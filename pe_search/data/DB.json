[{"토픽":"데이터모델링","키워드":"요 개 논 물\n커 상 논","도식":null,"정의":"현실의 개념을 논리적인 데이터 모델로 매핑하는 작업","내용":"3단계 : 요구 분석 > 개념(개체확정, ERD 정의) > 논리\n(정규화, ERD산출) > 물리(반정규, 관계형 데이터 모델 도출)\n원칙 : 커뮤(모두가 이해) \/ 상세화(복잡 분할, 불필요 제거),\n논리적 표현(비즈니스 그대로 반영, 절차 준수)"},{"토픽":"개념적 데이터 모델링","키워드":"주 핵 관 속 식","도식":null,"정의":"상위수준의 모델링, 개념적 데이터 모델링 업우요건 충족을 위해 주제와 핵심 데이터 집합간의 관계를 정의하는 상위수준의 개략적인 데이터 설계 작업","내용":"주제 영역 선정 : 상향식, 하향식, Inside-out, 혼합식 \/ 하위주제 영역 또는 데이터 집합들로 구성업무 기능과 대응\n핵심 데이터 집합 선정 : 독립중심, 의존중심, 의존특성, 의존연관 데이터 \/ 데이터 보관단위, 주제영역 중심 데이터 정의\n관계설정 : 1:1, 1:N, M:N, 순환관계 \/ 개체간 관계(Relationship) 설정\n속성 정의 : 핵심속성(원자단위 검증, 유일값 유무판단, 수준 상세화 결정) \/ 데이터 집합의 특징을 나타내는 항목\n식별자 정의 : PK, CK, AK, FK \/ 데이터 집합을 유일하게 식별해주는 속성(PK로 구현)"},{"토픽":"논리적 데이터 모델링","키워드":"엔 관 식 속 세 정 통\nSkeleton, task, 완료기준task","도식":null,"정의":"업무의 모습을 모델링 표기법으로 형상화하여 이해하기 쉽게 표현하는 모델링 기법","내용":"주요TASK\n엔티티타입 도출 : 기본, 중심, 행위 엔티티 타입 도출\n관계도출 : 엔티티타입간의 관계 도출\n식별자 도출 : PK, AK, CK, FK 등에 대한 정의\n속성 도출 : 기본, 설계, 파생속성을 정의\n세부사항 도출 : 용어사전, 도메인정의, 속성의 규칙(기본값, 체크값) 등 정의\n정규화 : 1차, 2차, 3차, BCNF, 4차, 5차 정규화 적용\n통합 \/ 분할 : 엔티티타입의 성격에 따라 통합, 분할수행, 수퍼\/서브타입 모델링 수행\n\n완료기준TASK\n데이터 모델링 검증 : 엔티티타입, 속성, 관계 등에 대한 적합성 검증\n\n수행TASK\n논리적 데이터 모델로 변화 : DBMS 독립적인 개념적 스키마 관계, 계틍, 네트워크 객체 지향 모델로 변환\n트랜잭션 I\/F 설계 : 트랜잭션의 전체적인 골격(Skeleton)을 개발하고 인터페이스 정의\n스키마의 평가 및 정제 : 정량적 정보와 성능평가 기준에 따라 평가 및 정제"},{"토픽":"물리적 데이터 모델링","키워드":"일괄전환, 구조조정, 성능향상","도식":null,"정의":"성능을 고려한 모델링, 물리적 데이터 모델링 논리 데이터 모델을 특정 DBMS의 특성에 맞게 성능을 고려하여 저장, 물리적인 스키마를 만드듣 일련의 과정","내용":"일괄전환\n엔티티를 테이블로 전황 : 서브타입 설계방안\n식별자의 PK정의 : 인공키 검토, PK컬럼 순서 검토\n속성을 컬럼으로 전환 : 영문 컬럼명 매핑, 데이터 타입\/길이 결정, 도메인 정의, 컬럼순서 결정\n관계를 컬럼으로 전환 : 참조 무결성 규칙 및 구현방향 결정\n\n구조조정\n슈퍼\/서브 타입 모델 전환, 트랜잭션 성격에 따라 전체\/부분 통합, 개별 유저에 대한 의사 결정을 통해 데이터 모델 조정\n\n성능향상\n성능을 고려한 반겅규화 \/ SQL 활용 능력의 미흡으로 인한 빈번한 비정규화는 베제하도록 신중히 검토"},{"토픽":"ERD","키워드":"첸 IE 바\n도 개 관 속 키","도식":null,"정의":"개체 및 개체 간 관계를 표현한 다이어그램","내용":"Chen : 개체는 네모, 관계는 마름모, 속성은 원\nIE(Crow's Foot)\n바커 방법, UML, IDEF1X 등\n\n도메인 > 개체 > 관계 > 속성 > 식별자(키) 선정"},{"토픽":"IE(Crow's Foot) 표기법","키워드":"피 풋 분","도식":null,"정의":"ERD 표기법","내용":"PK\n까마귀 발(Crow;s Foot)\n식별자와 분할 표기"},{"토픽":"Barker 표기법","키워드":"네 샾 아 동","도식":null,"정의":"ERD 표기법","내용":"네모 모양 으로\n본질 식별자 앞 #\n인조 식별자 *\n대체 식별자 O "},{"토픽":"연결함정","키워드":"부 교 단 학\n균 과 교 생","도식":null,"정의":"논리 모델링 시 실제 개체 간 관계가 사라지는 관계성 분실 현상","내용":"부채꼴(Fan) : 교수, 단과대학, 학과\n개체(Entity) 집합 사이에 관계성(Relation) 집합이 정의되어 있으나, 관계성 예시가 모호한 현상(1:N 관계를 N:1관계로 치환 해결)\n\n균열(Chasm) : 학과, 교수, 학생\n개체(Entity) 집합 사이에 관계성(Relation) 집합이 정의되어 있으나, 일부 개체의 관계성 미존재 현상(관계성 집합을 배치)\n\n예방 : 정규화 시 시나리오 검증 \/ CRUD Matrix 활용"},{"토픽":"슈퍼\/서브타입 데이터 모델","키워드":null,"도식":null,"정의":"논리 모델링 시 공통부분을 슈퍼로 추상화, 차이를 서브 Entity로 세분화해 구분하는 모델","내용":"슈퍼 : 직원 \/ 서브 : 관리자 or 팀원\n슈퍼 : 고객 \/ 서브 : 일반 or VIP\n서브 간 교집합 있으면 '포괄적' \/ 없으면 '배타적'\n* 세로가 아니고 가로 기준 분할 느낌"},{"토픽":"슈퍼\/서브타입 물리적 모델링 기법","키워드":"싱 플 원","도식":null,"정의":"슈퍼\/서브타입 데이터 모델을 1:1 물리 매핑 시의 성능저하 방지를 위한 세 가지 모델링 기법","내용":"Single(슈퍼+서브 통합)\nPlus(슈퍼를 서브타입에 각각 추가)\nOne to One(슈퍼에 서브 각각 연결해서 구성)"},{"토픽":"관계형 데이터 모델","키워드":"릴 튜 카 속 차 도 키 널\n개 관 정","도식":null,"정의":"물리 모델링 시 ERD 개체, 속성 등 기반한 2차원 구조 테이블(표)","내용":"릴레이션\n튜플(행)\n카디널리티(튜플 개수)\n속성(열),\n차수(속성 개수)\n도메인(가능한 값 집합)\nKey\nNULL\n릴레이션 스키마(내포, 모든 속성)\/인스턴스(외연, 한 시점)\n\n개체 Set 전환 > 관계 Set 전환 > 정규화 및 검증(최적화)"},{"토픽":"CRUD 매트릭스","키워드":"엔 열 프 행\nC R U D","도식":null,"정의":"업무분석 과정에서 데이터 모델링과 프로세스 관계 상호 검증 위한 매트릭스","내용":"엔티티를 열에 쭉 쓰고 프로세스(업무)를 행에 쭉 써서,\n교차점에 C R U D 쓰면 됨\nCRUD 아예 없는 개체 없지? \/ 모든 개체 C\/R 한번씩 있지?\nCRUD 없는 업무 없지? \/ 여러 업무가 하나 개체 생성 X지?"},{"토픽":"데이터베이스 구조 (ANSI\/SPARC 3단계)","키워드":"외 개 내","도식":null,"정의":"DB에 대한 사용자 뷰와 실제 DB 표현을 분리해 data 독립성 제공 위한 일반적 3레벨 아키텍처","내용":"3 View : 외부(유저, 뷰) \/ 개념(DBA, 전체구조) \/ 내부(물리)\nMapping(사상) : 논리(외부-개념), 물리(개념-내부)"},{"토픽":"Data 독립성","키워드":"유 복 중 변","도식":null,"정의":"하위 Data 구조가 변경되어도 상위 단계에 영향 미치지 않는 속성","내용":"유지보수 비용 감소\nData 복잡성 감소\nData 중복 감소\n변경 요청 대응↑\n\n논리적 : APP에 영향 없이 DB 논리 구조 변경(확장\/축소)\n물리적 : DB 논리구조 영향 없이 물리구조(File Sys) 변경\n* 밑 스키마 변경해도 매핑만 조정하면 윗 스키마는 상관 X"},{"토픽":"DA\n(Data Architect)","키워드":"표 품 요 통 개논","도식":null,"정의":"개념적 관점으로 데이터 표준\/품질관리, 개념\/논리 데이터 모델 관리 등 수행 담당자","내용":"SDLC 중 분석, 설계, 메타데이터 측면(data 흐름 등)\n데이터 표준\/품질, 요구사항, 전사 data 변경\/통합 모델 관리\n개념\/논리 데이터 모델링(도메인 지식), 개념-논리 모델 매핑\n특정 DB가 아닌 여러 DB 활용 관점(DB 전문성은 낮음)"},{"토픽":"DBA\n(DataBase Administrator)","키워드":"디 관 모 튜 보 형 물","도식":null,"정의":"물리적 관점으로 DB 설계\/개발\/보안 관리 등 역할 담당자","내용":"SDLC 중 설계, 개발, 테스트, 구현, 운영\/유지관리 측면\nDB 디자인\/관리\/모니터링\/튜닝\/보안, DB\/data 형상 관리\n물리 데이터 모델링, 물리모델-DB 매핑, data 모델 해독력\n특정 DB에 특화된 DB 전문가, data 정제\/정합성 체크"},{"토픽":"데이터베이스 키","키워드":"기 대 후 슈 외\n유 최 대\n결 슈 후 기","도식":null,"정의":"DB에서 조건 만족 튜플 찾거나 순서대로 정렬할 때 기준이 되는 속성","내용":"슈퍼키(유일성 O, 최소성 X), 후보키(유일성 O, 최소성 O)\n기본키(후보키 중 대표성, PK), 대체키(선정 못 된 후보키)\n외래키(다른 릴레이션의 기본키를 참조하는 속성)\n결정자 > 슈퍼키 > 후보키 > 기본키 순으로 도출"},{"토픽":"식별자 관계","키워드":"강 실 사 발","도식":null,"정의":"업무적 연관성 정확 반영 및 참조무결 위해 FK 사용 시 부모 개체 PK가 자식의 PK로 상속 되는 관계","내용":"강한 연결관계, 실선 표현\n사원(사원번호) > 발령(사원번호 = FK\/PK, 발령일자)\n부모 개체가 생성돼야 자식 개체 생성되는 경우\n문제 : 부모 > 자식 계속 내려가서 PK 속성\/개발 너무 복잡"},{"토픽":"비식별자 관계","키워드":"약 점 사 계","도식":null,"정의":"업무적 연관성 정확 반영 및 참조무결 위해 FK 사용 시 부모 PK가 자식의 PK가 아닌 일반 속성으로 상속되는 관계","내용":"약한 연결관계, 점선 표현\n사원(사원번호) > 계약(계약번호 = PK, 사원번호 = FK)\n개체별로 데이터 생명주기를 다르게 관리하는 경우\n문제 : 단순한 조회도 조인 걸려 구문작성 어려움, 성능 저하"},{"토픽":"관계 대수","키워드":"순 셀 프 조 디\n일 합 교 차 카","도식":null,"정의":"RDB에서 원하는 정보를 위해 '어떻게' 질의를 해석하는가, 기술하는 절차적 언어","내용":"순수 : RDB에 적용 위해 특별히 개발한 관계 연산자\n- 기본(셀렉트, 프로젝트, 조인, 디비전),\n- 확장(세미조인(자연), 외부조인(없으면 null), 외부합집합)\n일반 : 집합론 기반으로, 일반 집합 연산자를 릴레이션에 적용\n- 합집합(⋃), 교집합(∩), 차집합(-) 카티션 프로덕트(X)"},{"토픽":"관계 대수 예시","키워드":null,"도식":null,"정의":null,"내용":"학생 릴레이션에서 학과가 '컴퓨터'인 튜플 찾기\nσ학과 = \"컴퓨터\"(학생)"},{"토픽":"관계 대수의 한계","키워드":"정 집 산 수 중","도식":null,"정의":null,"내용":"정렬 불가, 집단 함수(AVG, SUM, MIN, MAX..) 미지원,\n산술 연산 불가, DB 수정 불가, 중복 튜플 명시 불가\n> 한계 극복 위해 확장 후 튜플 관계 해석을 더해 SQL 등장"},{"토픽":"관계 해석","키워드":"오 앤 낫\n튜 도","도식":null,"정의":"RDB에서 원하는 정보가 '무엇'인지만 정의하는 선언적 언어 * 관계대수식>관계해석 가능","내용":"연산자 : or(V), and(∧), not(┐) \/ 종류 : 튜플, 도메인(속성)\n- 원하는 릴레이션을 튜플\/도메인 해석식으로 정의\n{t1.A1… tn.An | F(t1.. tn.. tn+m)} : t가 튜플, F는 선정조건\n{x1… xn | F(x1… xn… xn+m)} : 도메인, F가 정형식(조건)"},{"토픽":"관계 해석 예시","키워드":null,"도식":null,"정의":null,"내용":"학생 릴레이션에서 학과가 '컴퓨터'인 튜플 찾기\n{t|t∈학생 ∧ t[학과] = \"컴퓨터\"}\n\nSQL이면 SELECT * FROM 학생 WHERE 학과 = \"컴퓨터\""},{"토픽":"SQL","키워드":"스 데 관 대 내","도식":null,"정의":"RDB에서 관계대수+튜플관계해석 기반 스키마\/데이터 관리 언어","내용":"스키마 관리 : 스키마 생성\/변경\/제거(DDL)\n데이터 관리 : DB 질의, data 삽입\/갱신\/삭제(DML)\n관계형 : 입력 R > 출력 R로 사상하는 관계형 언어\n대화식 SQL(DB 다룸)\n내포된 SQL(C, C++ 등 호스트언어)"},{"토픽":"DDL (Data Definition Language) ","키워드":"디 크 얼 드 트 리","도식":null,"정의":"Table 객체 생성, 변경, 제거 등DB 구조를 설정하는 언어","내용":"Create, Alter, Drop, Truncate(행만 싹 삭제), Rename\nCREATE TABLE My_table(col3 DATE NOT NULL, PRIMARY KEY (col1, col2));\nALTER TABLE 테이블명 ADD 추가할 칼럼명 데이터 유형;"},{"토픽":"DML(Data Manipulation Language)","키워드":"엠 인 업 딜 셀","도식":null,"정의":"DB 자료들을 입력, 수정, 삭제, 조회 언어","내용":"INSERT INTO 테이블명 (COLUMN_LIST)VALUES (COLUMN_LIST 에 넣을 VALUE_LIST);\nUPDATE 테이블명 SET 칼럼명 = 값;\nDELETE, SELECT"},{"토픽":"DCL (Data Control Language)","키워드":"씨 커 세 롤 그 리","도식":null,"정의":"개체 무결성 제약조건 관련 데이터 불일치 현상 방지 위해 DB 접근 및 객체 권한 부여 등 제어 언어","내용":"Commit : 입력 data 문제 없을 시 트랜잭션 완료\nSavepoint S1 : 롤백 시 트랜 전체 작업 말고 S1 까지만 롤백\nRollback : 커밋 이전 변경들 취소\nGrant : 특정 유저에 특정 작업 수행 권한 부여\nRevoke : 특정 유저에 특정 작업 수행 권한 박탈, 회수"},{"토픽":"정적 SQL","키워드":"정 컴 개 유 직 보","도식":null,"정의":"컴파일 시점에 정의된 SQL을 확정하여 실행하는 구문","내용":"개발\/유지 굿, 직관, 보안(인젝션, XSS 예방), 하드파싱 긺\nEXEC SQL SELECT ~ ; Printf(\"%s\", ename);\n- 이런 식으로 SQL을 str에 안 담고 코드 사이에 직접 기술\n* bind 통한 소프트 파싱은 정\/동 모두 사용 가능"},{"토픽":"동적 SQL","키워드":"동 런 유 재 하 플","도식":null,"정의":"Runtime 시점에 사용자 입력값에 따라 동적 실행하는 Binding 기법","내용":"str, char 등에 sql을 담기에 조건 따라 동적으로 변경 가능\n유연한 개발 \/ 쿼리 재사용성 \/ 하드파싱 시간, QEP 최적화\nchar stmt[50] = \"SELECT ~\"; EXEC SQL sql FROM stmt;"},{"토픽":"JOIN","키워드":"내 동 자 외 크 세","도식":null,"정의":"복수의 테이블로부터 data를 가져오기 위해 서로 묶은 뒤 특정 조건의 data를 선별, 가공하는 기법","내용":"내부\/동등(조인 key 정해줌), 자연(공통속성),\n외부(Null 채움), 크로스(카티시안 반환),\n세미(e.salary > 100 처럼 서브쿼리 조건 부합 data만 추출)"},{"토픽":"Semi Join (세미 조인)","키워드":"셀 프 부 인 셀 프 직 앤 월","도식":null,"정의":"IN, EXISTS 등을 사용한 서브쿼리에 존재하는 data만 메인 쿼리에서 추출하는 Join","내용":"SELECT 부서명 FROM 부서 WHERE 부서명 IN\n(SELECT 부서명 FROM 직원\n WHERE 부서.부서명 = 직원.부서명\n AND 직원.월급 ＞300)"},{"토픽":"세미 조인 EXISTS 예시","키워드":"셀 프 부 익 셀 일","도식":null,"정의":null,"내용":"SELECT 부서명 FROM 부서 WHERE EXISTS\n(SELECT 1 FROM 직원 -- 1은 의미가 없음\n WHERE 부서.부서명 = 직원.부서명 AND 직원.월급 ＞300)"},{"토픽":"수행 알고리즘에 의한 JOIN","키워드":"네 소 해 하","도식":null,"정의":null,"내용":"Nested Loop : driving table 조건 만족 튜플로 driven 검색\nSort Merge : 두 table을 조인 속성 기준 Sort 후 Merge\nHash : 작은 table을 해시 table(버킷 체인)한 뒤 해시값 조인\nHybrid : 네 + 소(driving table 조회 결과를 Sort 후 Merge)\n* driving table은 옵티가 정함, Hash는 CBO에서만 가능"},{"토픽":"JOIN 성능 향상 기법","키워드":"인 외 순 연","도식":null,"정의":"Nested Loop, Sort Merge 등 알고리즘 활용 또는 인덱스, 조인 순서 등 통해 Join 성능 향상하는 기법","내용":"인덱스 : Where절에 인덱스 타게 하는 조인 조건 추가\n외부 조인 제거 : 조건 안맞아도 다 처리하니까 너무 오래걸림\n순서 효율 : 작은 table이나 조인 성공률 낮은 애 먼저 수행\n연결고리 확인 : 연결고리 이상 시 이상한 table 먼저 처리"},{"토픽":"트랜잭션","키워드":"활 부 완 실 철","도식":null,"정의":"DB에서 수행되는 작업의 최소 논리적 단위","내용":"활동 > 부분완료(커밋 직전) > (커밋) 완료\n        > 실패(트랜 오류) > (롤백) 철회\nACID : A, D는 회복 \/ C, I는 동시성 제어"},{"토픽":"트랜잭션 특성\n(충족 요건)","키워드":"원 일 고 영(ACID)","도식":null,"정의":"DB 정합성, 무결성 유지 위해 트랜잭션이 만족해야 하는 속성","내용":"원자 : All or Nothing(Commit\/Rollback)\n일관 : 트랜잭션 완료 시 늘 모순 없이 일관성 있는 상태 보존\n고립 : 트랜 실행 중 생성한 중간 결과를 타 트랜이 접근 불가\n영속 : 완료된 트랜의 결과는 영속적으로 DB에 저장됨"},{"토픽":"트랜잭션 고립화 이슈\n(동시성 문제)","키워드":"더 논 팬\n갱 모 연","도식":null,"정의":"낮은 트랜잭션 고립화로 인해 발생하는 문제","내용":"Read - Write 문제 : Dirty, Non-Repeatable, Phantom\nWrite - Write 문제 : 갱신 손실, 모순성, 연쇄 롤백"},{"토픽":"트랜잭션 고립화 수준 (Isolation Level)","키워드":"언 컴 리 시","도식":null,"정의":"병행 트랜잭션 실행 시 Lock의 강도\/시간 조절해 다른 트랜이 사용중인 data를 얼마나 볼 수 있는지 허용 수준","내용":"Read Uncommitted : Dirty, Non-Repeatable, Phantom\nRead Committed(S-lock) : Non-Repeatable, Phantom\nRepeatable Read(S-lock, X-lock) : Phantom Read\n- 타 트랜의 갱신\/삭제는 금지, 레코드 삽입하는건 허용\nSerializable Read(Index S-Lock, Undo 데이터 사용 구현)\n- 트랜 종료 때까지 타 트랜의 신규 레코드 삽입도 제한"},{"토픽":"Read-Write 트랜잭션 동시성 문제","키워드":"더 논 팬","도식":null,"정의":"Read-Write 트랜잭션 간 낮은 고립화로 인한 문제","내용":"더티 Read(현황파악오류) : 커밋 안 된 변경 롤백 시\n논 리피터블 : 한 트랜 내 같은 쿼리 두번 수행 시, 그 사이에\n다른 트랜이 값을 수정\/삭제해 두 쿼리 결과 상이해짐\n팬텀 리드 : 한 트랜이 일정 범위 레코드 여러 번 읽을 시,\n첫 번째 쿼리에 없던 유령 레코드가 두 번째 쿼리에 나타남"},{"토픽":"Write-Write 트랜잭션 동시성 문제","키워드":"갱 모 연","도식":null,"정의":"Write-Write 트랜잭션 간 낮은 고립화로 인한 문제","내용":"갱신손실 : 트랜들이 동일 data 동시 갱신 시 값 덮어 써짐\n모순성 : 한 트랜 계산결과를 다른 트랜이 중간에 써서 모순\n- T1은 X+100, Y+100 \/ T2는 X*2, Y*2\n연쇄복귀 : 롤백 시 다른 트랜이 이미 커밋한거 롤백 불가"},{"토픽":"동시성 제어","키워드":"락 2 낙 타 엠","도식":null,"정의":"다중사용자 DB에서 낮은 고립화 문제 해결 위해 여러 트랜 직렬성 보장 기법","내용":"Locking\n2 Phase Lock(확장, 수축 \/ 데드락 가능),\n낙관적 검증(R V W \/ 단순하나 트랜 多 시 검증 오래걸림),\nTimestamp(데드락 절대 안남 \/ 연쇄 복귀 초래 가능),\nMVCC(data별 여러 버전값 유지, SCN, 롤백 Seg)"},{"토픽":"2PL","키워드":"확 차 수","도식":null,"정의":"다중 트랜잭션 환경에서 일관성(직렬성) 보장 위해 lock, unlock 연산을 확장\/수축단계로 수행 기법","내용":"확장 > 차단(연산수행) > 수축\n확장 : 트랜잭션이 Lock만 가능, Unlock 수행 불가한 단계\n- Lock A, Update A, Lock B\n수축 : 트랜잭션이 Unlock만 가능, Lock 수행 불가한 단계\n- Unlock A, Update B, Unlock B\n* cf) 2PC : 분산 DB 환경에서의 일관성 유지"},{"토픽":"개선된 2PL 기법","키워드":"스 리 스","도식":null,"정의":null,"내용":"Strict : 모든 X-lock은 해당 트랜 완료 시까지 Unlock 안함\nRigorous : 모든 S, X-lock은 트랜 완료시까지 Unlock 안함\n- S-lock도 유지하니 Strict보다 제한적, 데드락 발생 가능\nStatic : 트랜 시작 전에, 필요 자원 미리 파악해 다 lock 해둠\n- 데드락 없지만 현실성 없음"},{"토픽":"lock 종류","키워드":"익 쉐","도식":null,"정의":null,"내용":"Exclusive Lock : Data 변경 시 트랜 완료 때까지 해당 table,\n레코드를 타 트랜이 읽\/쓰 못하게 함. X lock 시 S lock 못 걺\nShared Lock : Data 읽을 시 타 트랜이 동시에 읽기는 되나\n변경 불가하게 함, 여러 S-lock 동시 적용 가능\n- S-lock 하나라도 있을 시 X-lock은 불가"},{"토픽":"낙관적 검증","키워드":"판 검 기","도식":null,"정의":"유저들이 같은 data를 동시 수정하지 않을거라 가정, 데이터 읽을 시 No 잠금, 데이터 수정 시 변경 여부 검사","내용":"판독(R) : 트랜잭션의 모든 갱신은 사본에 대해서만 수행\n검증(V) : R의 사본 갱신내역을 DB 반영 전 직렬성 위반 확인\n기록(W) : V 통과 시 실행결과 DB 반영, 실패 시 반영 취소\n* 트랜 수행 시엔 검사 No, 트랜 종료 시 일괄 검사"},{"토픽":"Timestamp","키워드":null,"도식":null,"정의":null,"내용":null},{"토픽":"MVCC\n다증 버전 동시성 제어","키워드":null,"도식":null,"정의":null,"내용":null},{"토픽":"DB 회복기법","키워드":"회 로 체 그 미(디)","도식":null,"정의":"DB 장애 발생 시, 복원을 통해 data 일관성 유지하는 기법","내용":"Redo, Undo : 로그 기반으로 트랜잭션 재수행\/취소\n로그 기반 : 즉시(장애>Undo, Redo) \/ 지연(장애>Redo)\n체크포인트\n그림자 페이징(현 PT는 MM, 그림자 PT는 Disk)\n미디어 기반(disk 손상) : 덤프, 소산, RAID, 미러링 \/ Redo만"},{"토픽":"DB 장애유형","키워드":"충 폴 성\n다 실 파\n\n트 시 디","도식":null,"정의":null,"내용":"미디어 : 충돌, HW Fault, 성능저하\nInstance : 프로세스 다운, 사용자 실수, 파라미터 설정\n\n트랜잭션 오류 \/ 시스템 충돌 \/ 디스크(Data-transfer)"},{"토픽":"로그 기반 회복기법","키워드":"지 리 즉 언 리","도식":null,"정의":null,"내용":"즉시 갱신 : 커밋 이전, 이후 log 모두 필요\n- 그래서 Undo, Redo 다 필요\n\n지연 갱신 : 커밋 후 log만 필요(커밋 이전 log 필요 없음)\n- Redo만 필요"},{"토픽":"체크포인트 회복기법","키워드":null,"도식":null,"정의":null,"내용":null},{"토픽":"그림자 페이징 회복기법","키워드":null,"도식":null,"정의":null,"내용":null},{"토픽":"ARIES 회복기법\n(시맨틱 이용한 회복\/격리 알고리즘)","키워드":"분 리 언\n왈 엘 노 스","도식":null,"정의":"DB에서 LSN, WAL(Write Ahea Log) 기반, ACID 특성 가운데 A\/D를 제공하는 기술","내용":"분석(CP부터 봄, REDO 필요 위치 결정) > REDO > UNDO\n- WAL이 LSN(Log Seq Num)과 모든 로그 기록\n- No-FORCE(지연 갱신, REDO 필요)\n- STEAL(커밋과 관계 없이 디스크 쓰기 가능, UNDO 필요)\n\n1단계) 분석 : 장애 시점에 버퍼내 수정된 페이지 \/ 진행 트랜잭션을 파악\nREDO 시작위치 결정\n2단계) REDO단계 : 분석 단계에서 결정 위치 로그부터 끝날 때 까지\n3단계) UNDO단계 : 로그 역순 Read \/ 진행 트랜잭션 연산을 역순UNDO"},{"토픽":"DB 버퍼(WAL) 관리 정책","키워드":"미 트 기 스 언\n\n완 트 기 않 노 리","도식":null,"정의":"페이지 버퍼관리자(MM관리)가 메모리 버퍼의 페이지를 언제 Disk 기록할지 성능\/일관성 기반 결정 정책 (WAL 사용하는 ARIES와 밀접)","내용":"미완료 트랜잭션 데이터를 디스크에 기록?\nSteal: 기록한다(Undo 필요)\nNo-Steal: 기록하지 않는다\n\n완료된 트랙잭션 데이터를 바로 디스크에 기록?\nForce: 바로 기록한다\nNo-Force: 바로 기록하지 않는다(Redo 필요)\n\n대부분의 DBMS는 No-Force, Steal 사용 즉, Redo와 Undo 사용"},{"토픽":"데이터 무결성","키워드":"정 일 유\n개 참 속 사 키\n앱 트 제 디","도식":null,"정의":"DB 내 data 값의 정확, 일관, 유효성 지키는, data 모델링의 궁극적 목표","내용":"개체(PK 중복이나 Null 안됨), 참조(FK는 PK나 Null 참조),\n속성(속성별 Not Null, 길이, CHAR 등 조건 준수),\n사용자 정의(업무규칙), 키(한 R에 같은 키 가진 튜플 불가)\n구현 : App 코딩, 트리거, 제약조건, DBMS 기능"},{"토픽":"참조 무결성","키워드":"삽 삭 갱 학 교","도식":null,"정의":"외래키 값은 피참조 Relation의 PK 값 또는 NULL 이어야 하는 제약 사항","내용":"삽입 규칙 : 부모 개체 있어야 자식 개체 입력 가능\n삭제 규칙 : 부모 행 삭제 시 자식 행 같이 삭제 또는 FK 수정\n갱신 규칙 : 부모 튜플 수정 시 자식도 수정됨\n- 학생 Table : 학번, 이름, 지도교수번호\n- 교수 Table : 교수번호, 교수이름\n- 교수가 1~3번 뿐인데 학생의 지도교수번호에 9 있음 No!"},{"토픽":"도메인(속성) 무결성","키워드":null,"도식":null,"정의":"주어진 속성의 값이 정의된 도메인에 속한 값이어야 한다는 성질","내용":"속성에 대한 정의\n\nPrimary Key : NULL 불가, 유일성\nForeign Key : 테이블간 논리적 관계\nUnique : NULL 허용, 다중의 보조키 개념 지원\nCheck : 값이 만족해야 할 조건\nData Type : 형식제한\nDefault : INSERT, UPDATE, DEFAULT 키워드 사용"},{"토픽":"릴레이션 무결성","키워드":"상 과 집 튜 즉 지","도식":null,"정의":"삽입, 삭제, 갱신과 같은 연산 수행 전과 후에 대한 상태의 제약","내용":"상태(DB가 특정시점 일관성)\n과도(DB가 상태변이 시 일관)\n집합(튜플집합 전체 제약)\n튜플(처리 중 튜플에만 적용)\n즉시(연산수행 즉시 적용)\n지연(트랜잭션 커밋 후 적용)"},{"토픽":"무결성 강화 기법","키워드":"앱 트 제\n동 회 정","도식":null,"정의":null,"내용":"App에서 무결성 검증\n트리거(발동 시 저장 sql)\n제약조건\n동시성 제어 : Locking, 타임스탬프, 낙관적 검증, MVCC\n회복 : Log 기반, Check Point, 그림자 페이징, 디스크 회복\n정규화"},{"토픽":"데이터 정합성 (일관성)","키워드":null,"도식":null,"정의":"Data 값이 정확하지 않더라도 data 간에 일관성이 있는 상태","내용":"다 틀린 값이더라도 서로 똑같기만 하면 정합성이 있는 상태"},{"토픽":"이상현상\n(DB Anomaly)","키워드":"삽 삭 갱","도식":null,"정의":"삽입, 수정, 삭제 시 의도하지 않은 삭제 등 data 일관성이 저해되는 상황","내용":"삽입 : 이거 삽입할건데 저 불필요한 컬럼 넣어야\n삭제 : 의도 안한 다른 data 삭제됨\n갱신 : 뭐 하나 고칠 때 여러군데 다 고쳐줘야"},{"토픽":"이상현상 및 BCNF 해결 예시","키워드":"학 과 교","도식":null,"정의":"3NF 만족하면서 결정자가 후보키 아닌 FD 제거 (모든 결정자는 후보키)","내용":"학번, 과목코드, 교수\n(학번, 과목코드) > 교수인데\n교수 > 과목코드라서 이상현상 발생\n* 학번 > 교수 \/ 교수 > 과목으로 분리"},{"토픽":"정규화","키워드":"도 부 이 결 다 조\n무 중 분 리 가","도식":null,"정의":"RDB 설계에서 이상현상을 제거하고 중복을 최소화하도록 데이터를 구조화하는 프로세스","내용":"장점 : 일관\/무결성, 이상현상 제거, 저장공간 효율화(중복X)\n단점 : 연산 과다(JOIN), 검색 비효율, 성능 저하\n정규화 : 도메인 \/ 부분 \/ 이행 \/ 결정자 \/ 다중 분리 \/ 조인\n원칙 : 무손실 분해 \/ 중복 제거 \/ 분리 \/ 리팩토링 \/ 가용성"},{"토픽":"함수적 종속성","키워드":"완 부 이 결 다 조","도식":null,"정의":"X값으로 Y값을 식별할 수 있고, X값에 따라 Y값이 달라질 때, Y가 X에 함수적 종속되는 성질","내용":"결정자(X) \/ 종속자(Y)\n완전(종속자가 기본(복합)키 전체에)\n부분\n이행\n결정자(X>Y에서 X가 후보키가 아님)\n다치\n조인(각각은 관계 있음, 전체는 관계 X 일 때 다 조인)"},{"토픽":"암스트롱 공리","키워드":"정 완\n기 재 부 이\n부 분 합 의","도식":null,"정의":"릴레이션 R에 존재하는 모든 FD 구하기 위한 정규화 기반 되는 추론 규칙","내용":"정당함(잘못된 FD 생성 X) \/ 완전함(모든 FD 찾을 수 있음)\n기본 : 이행, 부가(X > Y, XZ > YZ), 재귀(Y ⊆ X, X > Y)\n부가 : 분해(X > YZ \/ X > Y, X > Z), 의사이행(X > Y,\nWY > Z \/ WX > Z), 합집합(X > Y, X > Z \/ X > YZ)"},{"토픽":"제4정규화","키워드":"개 자 개 언","도식":null,"정의":"하나의 속성에 여러 값 대응 시 여러 row 삽입해야 하는 이상현상 해결하는 다중값 종속성 제거 정규화","내용":"개발자 > (자격증, 언어) 이렇게 있으면\n개발자 하나에 자격증도 여러 개, 언어도 여러 개(다중값)\n> 개발자-자격증 \/ 개발자-언어 이렇게 나눔"},{"토픽":"제5정규화","키워드":"개 자 언","도식":null,"정의":"원래의 속성 관계 보전을 위해 후보키 안 통한 종속 제거해 조인 종속성 제거하는 정규화","내용":"개발자 - 자격증 - 언어 이렇게 조인되면 이상하지만\n개발자-자격증, 개발자-언어, 언어 - 자격증 이렇게는 OK"},{"토픽":"DB 튜닝","키워드":"분 이(설 앱 서 시) 평","도식":null,"정의":"DB 성능저하 요인 분석, 개선해 DB 구조\/시스템 등 성능 향상, 최적화 기법","내용":"분석 : 인터뷰, 설계 검토, 자원 사용현황, SQL trace 분석\n> 이행 : 설계(모델링) > App(SQL) > 서버 > 시스템 튜닝\n> 평가 : 응처량시로 기반 평가, 산출물 작성"},{"토픽":"튜닝 이행 기법","키워드":"설 앱 서 시","도식":null,"정의":null,"내용":"설계 : 정\/반정규, 리팩토링, 파티션, 샤딩\nApp : 옵티, 힌트, 인덱스, 조인 순서, 동적 SQL 지양\n서버 : CPU, 메모리, 스토리지, I\/O, 네트워크(로밸 등)\n시스템 : OS 구조, DB 파라미터(버퍼\/캐시 크기, 검사점)"},{"토픽":"튜닝 지표","키워드":"응 처 시 로","도식":null,"정의":"DB 튜닝이 목표로 하는 지표","내용":"응답시간 : 사용자가 키 누른 때 ~ 시스템 응답까지의 시간\n처리량 : 트랜잭션 수 \/ 시간\n처리시간 : 작업완료 소요시간\n로드시간 : DB에 data 로드하는 시간"},{"토픽":"DB 설계 튜닝","키워드":"성 파 클 반 해\n가 리 클 쿼","도식":null,"정의":null,"내용":"성능 향상 : 파티셔닝(샤딩), 클러스터링, 반정규, 해시\n가용성 : Replication, 클러스터링, 쿼리 오프로딩"},{"토픽":"파티셔닝","키워드":"샤 행 직 열\n파 바 레 아\n파 피 밸 레 댄","도식":null,"정의":"DB 관리 용이 위해 같은 스키마 가진 data를 다수 DB에 분산 저장하는 물리적 분할 방법","내용":"목적 : 관리 용이, 가용성 증대(전체 훼손 예방), 부하 분산\n\n수평(샤딩) : 행(키) 기준, Join 많아짐, 장애시 무결성 위험\n- 최근 행만 많이 본다든가 할 때\n\n수직 : 자주 쓰는 열 분리, 3 정규화 같지만 이미 정규화 된걸\n분리하는 것, 나뉘면서 키가 양쪽 중복되니 키변경 관리해야\n* 4단락 : PARTITION BY RANGE(id)(\nPARTITION p0 VALUES LESS THAN (5),\nPARTITION p1 VALUES LESS THAN MAXVALUE);"},{"토픽":"파티셔닝(샤딩) 기본 분할 기준","키워드":"레 리 해 컴","도식":null,"정의":null,"내용":"Range : 키 값의 범위별로 파티션 분할(1~500, 501~1000)\nList : 분포 비슷, 많은 SQL에서 해당 칼럼 쓸 시(서울, 경기)\nHash : 키 값에 해시 적용, 해시 값이 1이면 1번 파티션\nComposite : 결합(range 뒤 그 파티션을 또 hash로 나눔)"},{"토픽":"파티셔닝(샤딩) 고급 분할 기준","키워드":"인 참","도식":null,"정의":null,"내용":"Interval : 인터벌이 100이면, 1~100, 101~200 이런식\n- DBA가 Interval에 값 넣으면 DBMS가 알아서 자동 파티션\n참조 : 부모 테이블 외래(참조)키 써서 자식 테이블 파티셔닝\n- 부모 파티션을 자식이 그대로 가져감"},{"토픽":"클러스터링","키워드":"A-A\nA-S","도식":null,"정의":"부하 분산, 장애 회복 위해 동일 DB에 여러 서버를 연결한 기법","내용":"Active-Active \/ Active-Standby 방식\n기능 : 부하 분산, 장애 회복\n- 문제 : Split Brain"},{"토픽":"반정규화","키워드":"대 타(뷰클인앱) 반\n\n테(병분추)\n속(중파기)\n관중","도식":null,"정의":"성능 향상, 개발 편의, 단순화 위해 중복, 통합, 분리 등 DB 개선 기법","내용":"반정규화 대상 조사 > 타 방법 검토(뷰, 클러, 인덱스, App)\n> 반정규화 적용(테이블 \/ 속성 \/ 관계)\n테이블 : 병합, 분할, 추가 \/ 속성 : 중복, 파생, 기능성 컬럼\n관계 : 중복관계 추가"},{"토픽":"반정규화 기법","키워드":"테 병 분 추\n\n칼 중 파 이 피 응\n\n관 중\n\n","도식":null,"정의":null,"내용":"테이블\n병합 : 1:1 \/ 1:M \/ 슈퍼, 서브타입\n분할 : 수평 \/ 수직\n추가 : 중복,통계,이력,부분\n칼럼\n중복 : 조인 성능저하 예방, 조인감소\n파생 : 트랜잭션 처리 시점 계산 성능저하 예방(Derived 컬럼)\n이력 : 불특정, 최근 값 조회 성능저하\nPK : PK 단일속성\n응용시스템 오작동 : 사용자 실수로 일시적 중복 보관\n관계\n중복관계 추가 : 여러경로 조인 데이터 처리 성능저하 예방"},{"토픽":"DB 스키마","키워드":"눈 정 별 반","도식":null,"정의":"star : 별과 같은 구조의 차원 테이블과 연결된 중앙 집중식 팩트 테이블로 구성\n\nsnow-flake : 다차원 테이블에 계층적으로 연결된 중앙 집중식 팩트 테이블로 구성","내용":"star(반정규화)\n장점 : 쿼리 성능 향상, 쉬운 설계\/유지보수\/중소규모 DW\n단점 : 효율성 저하, 데이터무결성저하,낮은 유연성(변경 어려움), 더많은 스토리지 필요\n\nsnow-flake(정규화)\n장점 : 복잡한 쿼리 수행 가능, 저장 효율성, 확장성, 무결성, 유연성, 대규모 DW, 적은 스토리지\n단점 : 느린속도, 복잡한 설계 및 유지보수"},{"토픽":"데이터 단편화","키워드":"완 회 분","도식":null,"정의":"하나의 릴레이션을 보다 작은 단편으로 나누어 또 다른 릴레이션으로 만드는 과정","내용":"특성 : 완전(전역 R의 모든 data는 어느 한 단편으로는 사상)\n\/ 회복(단편 모으면 전체 됨) \/ 분리(단편끼리는 중복 X)\n유형 : 수평(동적) \/ 수직(정적) \/ 혼합(수평 + 수직)\n- 수평 : 튜플(select) \/ 수직 : 칼럼(project)"},{"토픽":"해시 테이블","키워드":"키 밸 오원","도식":null,"정의":"(Key, Value)데이터를 해시 함수를 이용해 지정된 저장소(Bucket)에 저장 및 빠르게 데이터 검색 가능한 자료구조","내용":"시간복잡도 O(1) : 상수 시간 탐색 가능\n해시 값 충돌 적어야 함\n충돌 시 : 정적해시 오버플로 \/ 동적해시 오버플로 핸들링"},{"토픽":"해싱","키워드":"정 고 동 가","도식":null,"정의":"임의 길이의 입력(key값)을 고정 길이의 출력값으로 압축, 주어진 속성값 기반으로 목표 레코드 직접 접근 기법","내용":"정적해싱 : 버킷 개수 고정, 파일 크기 예측해서 공간 할당\n- 초기엔 저장공간 낭비, 추후 파일 커지면 구조 재구성해야\n동적해싱 : 버킷 개수 가변, data 증감에 원활 대응\n- 버켓 동적 변경 비용 때문에 성능 저하 가능"},{"토픽":"정적 해싱함수","키워드":"디 폴 중 기 무","도식":null,"정의":"레코드 키 값을 해시 테이블 주소로 변환하는 함수","내용":"Division : h(key) = key % M(버켓 크기, 소수)\nFolding : 123456 > 12 + 34 + 56 = 102(이동 폴딩)\n- 경계폴딩 : 123456 > 12+43+56(이웃한곳 뒤집어 더함)\n중간제곱함수 : 202 제곱해서 40804, 중간값인 080 = 해시\n기수변환법 : 1234 고 7이 기수면 > 1*(7^3) + 2*(7^2) + ..\n무작위 : 난수 발생시켜 각 키랑 매칭"},{"토픽":"정적 해싱 오버플로 핸들링","키워드":"개 선 제 무 재\n폐 연 오","도식":null,"정의":"버킷 개수가 고정적일 때 해시 충돌로 인한 버킷 오버플로우 해결 방안","내용":"개방 주소법 : 공간 남는 버킷 어디든 있으면 넣음\n- 선형(k씩 더함), 제곱(폭 점점 커짐), 무작위 탐사, 재해싱\n폐쇄 주소법(체이닝) : 같은 주소 내에서 끝까지 해결 봄\n- 연결방식(버킷에 연결list) \/ overflow(충돌시 별도 영역에)"},{"토픽":"동적 해싱 오버플로 핸들링","키워드":"오 두 확\n모 버 깊 작 디 1","도식":null,"정의":"버킷 개수가 가변적일 때 해시 충돌로 인한 버킷 오버플로우 해결 방안","내용":"오버플로우 발생 시 2배수 확장(키 값으로 이진트리 변화)\n- 버킷 오버플로 > 디렉터리를 2배로 늘림\n모든 버킷들의 깊이 값이 디렉터리 깊이 값보다 작으면\n디렉터리 깊이를 1 뺌 > 디렉터리 크기는 반으로 줄어듦"},{"토픽":"Replication","키워드":"마 바 슬 릴 SQL","도식":null,"정의":"DB 가용성을 위해 두개 이상의 DBMS를 Master\/Slave로 나눠 동일한 data를 저장하는 방법","내용":"1. 마스터에서 여러 세션의 data 변경 시 자기 DB에 반영\n2. 변경 이력 Binary Log에 기록 후 관련 이벤트 전송\n3. Slave IO Thread가 이벤트 감지, 자기 Relay Log에 기록\n4. Slave SQL Thread가 Relay Log 읽고 자기 DB에 기록"},{"토픽":"쿼리 오프로딩","키워드":"업 리 분\n마 스 슬 씨","도식":null,"정의":"DB 성능과 가용성 향상 위해 Update와 Read를 분리, DB의 처리량 감소시키는 기법","내용":"Master DB : Create\/Delete\/Update 만 수행, 1개 있음\nSlave DB : Read 만 수행. N개라 로밸 적용, 고가용성 제공\nStaging DB : 마스터랑 Slave 중간 경유지\n- 다수 Slave 복제 시 성능 저하 방지\nCDC(Change Data Capture) : 백로그 써서 data 복제"},{"토픽":"인덱스","키워드":"형 트 해 비\n목 함 도 비","도식":null,"정의":"data 검색속도 향상 위해 테이블에 저장된 row를 연계한 식별자로 구성한 독립적 구조","내용":"형태별분류\n트리기반 : OLTP범위검색, Root\/Leaf 노드 구성, B-Tree, T-Tree, R-Tree\n해시기반 : OLTP키검색, 버킷 \/ 해시함수 \/ 해시테이블 구성, 해싱, 동적해싱, 확장해싱\n비트맵기반 : DW\/Mart 데이터 검색, 비트맵 인덱스\n\n목적별분류\n함수기반 : 함수\/수식 기반, 트리, 비트맵 인덱스, PL\/SQL 함수\n도메인 : 개발자 정의형, 확장성\n비트맵구조 : 조인결과 검생성능 향상, 비트맵 인덱스"},{"토픽":"인덱스 종류","키워드":"물 비 빝 리 디 파\n논 클 논클 덴 스 유 논유 싱 함","도식":null,"정의":null,"내용":"물리적 인덱스 : B*, Bitmap, Reverse Key, Descending, Partition\n논리적 인덱스 : Clustered, Non-Clustered, Dense, Sparse, Unique, Non-Unique, Single, Composite, Function-based"},{"토픽":"인덱스 설계 절차","키워드":"수 설 선 순 시","도식":null,"정의":null,"내용":"접근경로 수집 > 인덱스 컬럼 설정 > 접근경로 선정 > 컬럼조합 및 순서 결정 > 적용시험"},{"토픽":"인덱스스캔","키워드":"유 레 디 스 풀 패","도식":null,"정의":null,"내용":"스캔(탐색기법) : 수직(Root > Leaf) \/ 수평적(왼 > 오)\n- Unique, Range, Range Descending, Skip, Full,\nFast Full(인덱스 구조 아닌 물리 순서로 Seg 전체 탐색)"},{"토픽":"SQL 튜닝 방법","키워드":"인컬 비 효 드 조 함 인블 힌","도식":null,"정의":null,"내용":"인덱스 컬럼 조사 > 인덱스 비교 선택 > 인덱스 효율성 검증\n> 드라이빙 테이블 > 조인 유형(Nested Loop, Sort Merge,\nHash) 선택 > 함수\/인라인 뷰 > 인덱스 블록 읽기\n> 힌트 사용"},{"토픽":"SQL 튜닝 기법","키워드":"옵 힌 부 인 조 다 병 정","도식":null,"정의":null,"내용":"SQL관점 튜닝 기법(어플리케이션 최적화)\n옵티마이저 : RBO\/CBO 최적 실행계획 수립\n힌트사용 : 힌트를 사용하여 원하는 실행계획 유도(쿼리에 표시\/*+ HINT ~ *\/)\n부분범위처리 : 응답시간 최소화 위한 부분처리\n인덱스 활용 : SQL 인덱스 효과적 수행, 오류방지\n조인방식 : 조인순서, 방식에 대한 확인 개선\n다중처리 : 배치작업 처리시 다중처리로 활용\n병렬쿼리 : 배치작업의 경우 하나의 SQL을 여려개의 CPU로 병렬 분할 처리\nStaticSQL 사용(정적SQL) : 동적쿼리보다 활용성 우수"},{"토픽":"옵티마이저","키워드":"파 옵 큐 엔\n리 에 제\n알 로 클 해 피 풀\n씨 딕 선 카 히 비","도식":null,"정의":"SQL 수행 시 최적의 처리경로를 생성해주는 DBMS 핵심엔진","내용":"Parser > Optimizer > QEP 생성 > 쿼리 실행 엔진\n옵티 : Query Rewrite \/ Estimator(CBO) \/ Plan Generator\nRBO : Row ID > Cluster Join > Hash > PK > Full scan\nCBO : 딕셔너리(선택도, 카디널리티, 히스토그램, 비용)"},{"토픽":"소프트 파싱","키워드":"파 라 실","도식":null,"정의":"Shared Pool 내의 Library Cache 에서 기 저장된 SQL, 실행계획 찾아 바로 실행하는 분석 방식","내용":"Parser > Library Cache > 실행\n- Parser : 문법(Syntax)\/의미(Semantic) 오류 검사\n- Library Cache(공유메모리)에 동일 SQL 있으면 그거 실행"},{"토픽":"하드 파싱","키워드":"파 라 옵 실","도식":null,"정의":"SQL이 Library 캐시에 없어서 Optimizer로 최적 SQL 계획 후 실행단계로 넘어가는 분석 방식","내용":"Parser > Library Cache > Optimizer > 실행\n- Cache Miss로 Optimizer로 거쳐 신규 QEP 생성"},{"토픽":"힌트","키워드":"\/*+ hint *\/","도식":null,"정의":"옵티마이저 보완 위해 개발자가 직접 최적화된 QEP 를 위해 SQL 상에 추가한 문장","내용":"개발자가 직접 추가해 옵티마이저를 더 최적화\n\/*+ hint *\/\n\n종류\n최적화 목표 all_rows, first_rows(n)\n액세스 경로 full, hash, index, index_ffs, index_ss\n쿼리 변환 no_query_transformation, use_concat, no_expand\n조인 순서 ordered, leading\n조인 방식 use_nl, use_merge, use_hash\n병렬 처리 parallel, pq_distribute"},{"토픽":"인덱스","키워드":"트 비 함 리 클\n유 레 디 스 풀 패","도식":null,"정의":"data 검색속도 향상 위해 테이블에 저장된 row를 연계한 식별자로 구성한 독립적 구조","내용":"구조 : 트리기반, 비트맵, 함수기반, 리버스 키, 클러스터\n스캔(탐색기법) : 수직(Root > Leaf) \/ 수평적(왼 > 오)\n- Unique, Range, Range Descending, Skip, Full,\nFast Full(인덱스 구조 아닌 물리 순서로 Seg 전체 탐색)"},{"토픽":"서브 쿼리","키워드":"서 웨 셀","도식":null,"정의":"SELECT 문 안에 다시 SELECT 문이 기술된 형태의 쿼리","내용":"SELECT C1, C2, C3\nFROM T1\nWHERE C1 = (SELECT C1  FROM T2  WHERE C2 = '3')"},{"토픽":"인라인 뷰","키워드":"인 프 셀","도식":null,"정의":"FROM 절 안에 테이블명이 아닌 서브 쿼리가 사용된 쿼리","내용":"인라인 뷰는 동적으로 생성된 테이블 or View처럼 사용 가능\nSELECT T1.C1, T2.C1, T2.C2\nFROM T1 T1, (SELECT C1, C2 FROM T2) T2\nWHERE T1.C1 = T2.C1;"},{"토픽":"NoSQL","키워드":"레 카 몽 네\nBASE","도식":null,"정의":"유연한 데이터 저장 모델 기반, 저장 및 검색에 특화된 DBMS","내용":"Basically Available, Soft-State, Eventually Consistent\n- CAP 이론으로 치면 NoSQL은 C+P 또는 A+P\nSchema-less \/ scale-out 용이 \/ 빠름 \/ 일관성 ↓ \/ 조인 X\n예시 : Redis, Cassandra, MongoDB, Neo4j"},{"토픽":"BASE","키워드":"베 소 이","도식":null,"정의":"SQL ACID와 대응되는 NoSQL의 기본 원칙\/특징","내용":"Basically Available, Soft-State, Eventually Consistent"},{"토픽":"Redis","키워드":"스 셋 리 소 어 스","도식":null,"정의":"Key-value 구조의 비정형 data 저장\/관리하는 BSD 오픈소스 인메모리 DB","내용":"Data : String(key-value), Set(string 집합), List(배열),\nSorted Set(Key value에 score도 저장, score로 정렬)\n성능 : Cluster, Replication, 샤딩\n영속성 : AOF(입\/수\/삭 시 appendonly.aof 파일에 기록),\n스냅샷(메모리 전체를 disk에 기록)\n활용 : 캐시(일반적), 세션 저장, 메시지 큐, 스트리밍"},{"토픽":"Memcached","키워드":null,"도식":null,"정의":"Redis 보다 단순하고, 확장\/유연성 좋은 캐시 솔루션","내용":"Strings, Ingegers만 지원\n멀티 스레드 \/ Memory만 사용 \/ 복제 미지원\n* Redis는 Set, Hash 등 다양한 자료구조, 단일 스레드,\n메모리\/디스크 저장, Replication, Master-Slave 복제 지원\n\n맴캐시드 서버에 GET요청 보내서 DDoS 공격 가능\n(방어 : UDP 비활성화 \/ 방화벽 \/ 업데이트 \/ 전송률제한 \/ 직접방어)"},{"토픽":"MongoDB","키워드":"몽 컬 도 필","도식":null,"정의":"NoSQL 데이터베이스로, JSON 형태의 데이터를 저장하는 도큐먼트 지향 데이터베이스 입니다. 웹 애플리케이션과 인터넷을 기반을 위해 설계된 데이터베이스","내용":"샤딩, 파티셔닝 가능\nRDB : Table, Row, Col\n> MongoDB : Collection, Document, Field\n\n지속성 전략은 높은 읽기\/쓰기 효율과 Failover를 통한 확장의 용이성을 염두"},{"토픽":"시계열 DB (TSDB)","키워드":"시 디 파 청\n시 매 포 키 택 필","도식":null,"정의":null,"내용":"주기마다 Data 처리\/삭제\nDB > Partition(2000년, 2001년…) > Chunks(RDB의 샤드)\nRDB : Table, Row, Col, Index Col, Unindexed Col(일반)\nTSDB : Measurement, Point, Key, Tag Key, Field Key"},{"토픽":"NoSQL 유형","키워드":"키 컬 도 그 데 오 트","도식":null,"정의":null,"내용":"Key-Value Store(Redis) : key-value \/ 단순, 빠름, 분산 굿\nColumn Family(카산, HBase) : Key + [컬럼, value] 여러 개\nDocument Store(Mongo DB) : Key + doc(JSON, xml)\nGraph Store(Neo4j) : data를 노드로, 노드 간 관계를 엣지로\nData Structure 서버 : 자료구조 자체를 DB에 넣음\nObject DB : Object 자체를 넣는 평면 DB(Obj 이름이 Key)\nTriple Store(RDF Store) : 시멘틱 쿼리로 트리플 저장, 검색"},{"토픽":"Graph DB","키워드":"노 엣 프\n네 알 엣","도식":null,"정의":"관계\/영향도 분석 등 시멘틱 쿼리 위해 그래프 구조를 사용하여 data 저장하는 NoSQL DB","내용":"노드 : 개체 \/ 엣지 : 관계(Value) \/ 프로퍼티 : 노드의 정보\nNeo4j : 자바 기반 임베딩 방식이나 REST 방식으로 제공\nAllegroGraph : RDF 를 저장할 수 있는 그래프 DB\nS2 Graph DB : 카카오거, SNS 분석을 그래프 DB로 표현"},{"토픽":"NoSQL 모델링","키워드":"도 쿼 패 최 테 하","도식":null,"정의":"Query 효율성을 위해 반정규화 기반으로 쿼리설계 후 테이블 설계하는 DB 설계 기법","내용":"도메인 파악(ERD) > 쿼리 디자인 > 패턴 기반 모델링\n> 최적화(key ordering) > NoSQL 테스트(Hbase, 몽고 등)\n> H\/W 설계\n* 쿼리부터 설계하고 테이블 설계한다는게 특징!"},{"토픽":"NoSQL 모델링 원칙","키워드":"반 결 앱","도식":null,"정의":null,"내용":"반정규화 : data 중복 허용 > 질의 처리 비용 감소\nAggregation(결합) : 유연한 스키마, Join 없애기 위함\n- key만 같으면 각 row의 컬럼\/데이터 타입 다 달라도 됨\nApp Join : Join을 앱쪽에서 함, 서버 부하 감소"},{"토픽":"NoSQL 데이터 모델링 패턴","키워드":"반 결 앱 아 인 컴","도식":null,"정의":null,"내용":"반정규화 \/ 결합 \/ App Side Join\nAtomic Aggregate(Table 하나로 > Data 불일치 해결)\nIndex Table(NoSQL은 인덱스 X니까 별도 index table 만듦)\nComposite Key Table(단일 index 말고 복합 index 필요시)"},{"토픽":"NewSQL","키워드":"파 동 장 인 스","도식":null,"정의":"RDBMS의 ACID에 NoSQL의 BASE 특성 결합, MVCC, Schemaless 등 기반 인메모리 DBMS","내용":"파티셔닝\/샤딩 : 샤딩을 통한 scale-out 지원\n동시성 제어 : MVCC 적용(Non-Locking)\n장애 복구 : 장애 시 데이터를 복구하고 상태를 유지\nIn-Memory DB : 실시간 저장 및 처리를 위한 인메모리 DB"},{"토픽":"NewSQL 유형","키워드":"인 마 포\n볼 멤 누 토 포","도식":null,"정의":null,"내용":"In-Memory 기반 : VoltDB, MemSQL, NuoDB\nMySQL 기반 : TokuDB\nPostgreSQL 기반 : Postgres-XL(Cluster에 워크로드 분산)"},{"토픽":"In-memory Database\n(IMDB)","키워드":"운 분 엠\n인 해 티\n회 하 디","도식":null,"정의":"Disk DBMS가 제공하는 데이터 관리 관련 모든 기능을  메인 메모리로 제공하는, RAM에 data 저장된 DBMS","내용":"운영적 IMDB : CRUD 등 트랜잭션 위주 처리(RDB\/NoSQL)\n분석적 IMDB : 빠름, 분석 용도, col\/row 기반 MPP DB\n- MPP : Massively parallel processing, 대량 병렬 처리\n인덱싱 : Hashing, T-tree (디스크 기반은 B tree, B+ tree)\n회복 : HW적 기법(Disk 백업) \/ 디스크 기반은 Undo\/Redo"},{"토픽":"CAP 이론","키워드":"CA : RDB\nCP, AP : NoSQL","도식":null,"정의":"분산 DB의 세가지 속성인 일관성, 가용성, 분단 허용성 중 두가지만 가능하다는 이론","내용":"C : 모든 노드가 동일한 data 저장한 상태, 완벽한 일관성\nA : 시스템 문제 있더라도 R\/W 요청 오면 처리해줘야\nP : 노드 간 통신 실패한 상태라도 일단 시스템은 정상 동작"},{"토픽":"CAP 이론의 한계","키워드":"완 상 파","도식":null,"정의":null,"내용":"완벽한 CP, AP 시스템은 없다(대부분 CP-AP 사이 어딘가)\nC-A 상충인데 동시 선택 가능\n파티션 없는 정상상황 설명이 불가하다"},{"토픽":"PACELC 이론","키워드":"A C - P<>E -LC\n\n카 몽 코 베","도식":null,"정의":"CAP 이론의 단점을 보완 위해 네트워크 장애 상황(P)과 정상 상황(E)으로 나누어 설명하는 이론","내용":"PC : 장애 시 C를 위해 data 반영 아예 다 실패시킴\nPA : 장애 시 C 포기, 가능한 노드에만 데이터 반영\nEC : 정상 시 C 위해 장애복구 시 전달 못한 data들 반영\nEL : 정상 시 L 위해 모든 노드에 데이터를 반영하지 않음\n* P-E 하나씩 두개 조합 \/ 각 종류마다 대표 NoSQL 써주기\nPA\/EL : Cassandra\nPA\/EC : MongoDB\nPC\/EL : CosmosDB\nPC\/EC : HBase"},{"토픽":"Row 기반 DB","키워드":"티 중적 알 랜 추 삭 적조","도식":null,"정의":"Oracle, DB2 와 같이 일반적으로 상용화 된, row 순으로 데이터를 저장하는 DB","내용":"OLTP 위함 \/ 중복값 적음 \/ 주로 RBMS\n랜덤 액세스, 레코드 추가\/삭제, 적은 수 조회 시에 적합 \n단점 : 많은 컬럼 조회 또는 join 많을 시 성능 저하,\n레코드 하나 변경 시 여러 값 수정 필요"},{"토픽":"Column 기반 DB","키워드":"A 중많 노 연 많조","도식":null,"정의":"Hana DB, Hbase 등 대량의 비슷한 data 저장 위해 DW 등에서 컬럼 순으로 저장하는 DB","내용":"OLAP 위함 \/ 중복값 많음 \/ NoSQL \/ 이름끼리, 성별끼리\n연관 data 조회, 많은 수의 컬럼 조회에 적합\n단점 : 불필요한 컬럼 값 존재, 데이터 수정 시 여러 곳 수정"},{"토픽":"Hybrid DB","키워드":null,"도식":null,"정의":"Row + Column DB 장점 결합, DML은 Row로, 대량 분석은 Col로 하는 DB","내용":"같은 data를 row 기반으로도, col 기반으로도 구성해서\n단순 트랜잭션(DML)은 Row 기반 DB로 조회하고\n분석은 Col 기반 DB로 하는거지"},{"토픽":"분산 DB","키워드":"처 디 트 네","도식":null,"정의":"사용자한테는 하나의 중앙 DB처럼 보이지만 실제로는 물리적으로 분산된 데이터베이스","내용":"분산 처리기 : 지역별로 그 지역 data 처리하는 로컬 컴퓨터\n분산 DB : 로컬 DB, 이거 하나에 분산 처리기 여러 개 붙음\n분산 트랜잭션 : 여러 분산 DB들에 걸쳐 처리되는 트랜잭션\n네트워크 : 분산 처리기들 연결, 자원 공유시킴(논리적 통합)"},{"토픽":"분산 DB 장단점","키워드":"장 자 대 분 점\n단 복 성 통 정","도식":null,"정의":null,"내용":"장점 : 지역 자치성(지역별 data 제어, 원격 센터 의존도 ↓),\n단일 컴에서 불가한 대용량 가능, 부하 분산, 점진 확장 굿\n단점 : 복잡성 증가, 성능 저하(메시지 교환 비용 등),\n통제기능 취약, 정확성 판단 곤란(치명적 오류 발생 가능)"},{"토픽":"분산 투명성","키워드":"위 복 병 장 지 분","도식":null,"정의":null,"내용":"위치 : DB의 실 위치 몰라. 시스템 카탈로그에 위치정보 저장\n중복 : 동일 data 여러 곳 중복돼 있어도 유저는 하나로 앎\n병행 : 다수 트랜 동시 수행해도 트랜 결과는 일관성 유지\n장애 : 트랜잭션, DBMS, HW 등 장애나도 가용성 유지돼야\n지역사상 : 각 지역 시스템 이름과 무관한 이름 사용 가능\n단편화(분할) : 유저는 한 릴레이션 등이 분할 저장된 걸 모름"},{"토픽":"분산 DB 스키마","키워드":"전 분 할 지","도식":null,"정의":null,"내용":"전역 : 지역DB 스키마 다 포함, 유저는 이거로 1개 DB처럼 씀\n분할 : 전역을 여러 개로 나눈 스키마\n할당 : 분할을 지역DB에 할당, 한 분할 여러곳 중복저장 가능\n지역사상 : 지역 DBMS랑 물리 DB 매핑"},{"토픽":"2PC\n(2 Phase Commit)","키워드":"프 컴","도식":null,"정의":"분산 환경에서 일관성(원자성) 보장 위해 트랜잭션에 연루된 모든 DB가 한 번에 커밋 or 롤백하는 기법","내용":"Phase 1(Prepare) : 클라가 코디네이터(TM) DB 통해\n각 DB에 커밋 준비시키고 Prepare 됐다고 Reply 받음\nPhase 2(Commit) : 클라가 코디네이터(TM) DB 통해 \n각 DB에 Commit\/롤백 보내고 각 DB에서 Reply 받음\n* 조정자 문제 : 조정자 부하로 Blocking 발생 가능"},{"토픽":"DB 용량산정","키워드":"수 산 검\n수 참 시","도식":null,"정의":"시스템 용도 및 동시 사용자 수, 사용자당 오퍼레이션 수 등과 성능요구사항 기반으로, HW 용량 산정 작업","내용":"용량 data 수집 > 용량산정(수참시) > 검토\n수식 계산법 : 사용자 수 등 규모산정 요소로 계산, 보정 적용\n참조법 : 기존 시스템과 사용자 수 등 대략 비교해서 참조\n시뮬레이션법 : 작업 부하 모델링 후 시뮬해서 규모 산정"},{"토픽":"DB 용량산정 기준","키워드":"씨 메 디 스\n트 레 시 배 크 비 백","도식":null,"정의":null,"내용":"시스템 유형 : OLTP, Web\/WAS\n산정대상 : CPU, Mem, Disk(OS, APP, data 용량 등), 스토리지\n산정자료 : 연간\/일일\/피크타임 트랜 수, 레코드별 크기, 운영\n시간, 배치 업무량, data 크기, 비정형 비율, 백업방식(RAID5)"},{"토픽":"공간 데이터베이스","키워드":"질 일 정 연 인 파","도식":null,"정의":"지형, 위치, 거리 등 공간정보를 저장, 활용 가능한 다차원 구조의 데이터베이스","내용":"구성요소 : 공간 질의 처리기 \/ 일반 질의 처리기,\n공간정보, 공간 연산자, 공간 Index(공간 data 검색 위함),\n공간 data 파일 관리기(공간 data 등 data의 효율적 저장)"},{"토픽":"공간 분석 기능","키워드":"분 세 일 중 추 연 인","도식":null,"정의":null,"내용":"분류 : 기준 따라 data를 나눔(상업지역, 산림지역, 주거지역)\n세분화\/일반화 : 분류를 더 나누면 세분화 or 합치면 일반화\n중첩 : 여러 data layer 수직 합침(건물, 도로, 하천 layer)\n공간 추정 : 아는 지역을 통해 모르는 지역 속성값 추정\n연결성 : 연속성, 근접성, 마을 네트워크 분석\n인근 분석 : 특정 위치 주변 특성 추출(학교 주변 주거지역)"},{"토픽":"공간 객체 표현","키워드":"이 도 공 위","도식":null,"정의":null,"내용":"개체 이름 : 토지 구획, 범람원, 강 등\n도형적 표현(Spatial Object) : 점, 선, polygon(다각형) 등\n공간정보(Geometry) : XY 좌표\n위상정보(Topology) : Topology Indicator"},{"토픽":"공간 관계 표현","키워드":"싱 위 더 공","도식":null,"정의":null,"내용":"일반 data 관계는 다이아, 공간 관계는 육각형(싱글, 더블)\n싱글 6각형 : 위상 정보(연결, 연속(인접))\n더블 6각형 : 공간 정보(X, Y) 및 관련 정보(일치, 포함, 근접)\n위상 : 공간객체들 어떻게 이어져 있는지 관계형 table로 정의"},{"토픽":"공간 data ERD","키워드":null,"도식":null,"정의":null,"내용":null},{"토픽":"공간 연산","키워드":"교 합 차 버 엔 스 엔 포","도식":null,"정의":"공간 DB의 data 처리 위해 두 공간 객체의 연산 결과로 공간 객체를 반환하는 함수","내용":"교집합, 합집합, 차집합, Buffer(n만큼 거리 확장한 공간),\nEnvelope(Convex Hull(최소 MBR) Polygon 반환),\nStartPoint(시작점만 추출), EndPoint(끝 점 추출),\nPointN(중간 점 개수)"},{"토픽":"공간 관계 함수","키워드":"컨 인 커 터 오 섹 이 디","도식":null,"정의":"해당 공간 관계 여부를 Boolean으로 반환하는 함수","내용":"A Contains B == B Inside A : A가 B 포함\nA Covers B == B Coveredby A : B가 A 외곽에 닿게 포함됨\nA Touch B : 외곽 닿음 \/ Overlap, Intersect : 겹친부분 有\nA Equal B : 동일 공간 \/ A Disjoint B : 아예 따로 있음"},{"토픽":"다차원 인덱스(색인) 구조","키워드":"팸 K 격 사\n샘 R","도식":null,"정의":"점, 선, 면 등 다차원 데이터를 저장\/검색 등 처리하기 위한 다중 키 인덱스 구조","내용":"PAM(Point Access Method) : 점 데이터를 저장\/검색\n- k-d 트리, k-d-B트리, 격자 파일, 사분트리\nSAM(Spatial Access Method) : 선, 면, 다면체 등 저장\n- R트리, R+트리, R*트리"},{"토픽":"K-D 트리 (K-Dimensional Tree)","키워드":null,"도식":null,"정의":"각 노드의 데이터가 K차원 점인 이진 검색 트리","내용":"완전 균형 트리 되면 KDB 트리임\n한 도형을 네모나 면으로 계속 나눠 각각 그 안의 점들을 저장"},{"토픽":"K-D-B 트리","키워드":null,"도식":null,"정의":"B트리와 K-D 트리의 결합","내용":"공간을 계속 나눠서 자식 노드로,\n자식 노드는 또 나눠짐\n그 자식 노드에 포함된 점들 표현"},{"토픽":"격자 파일","키워드":null,"도식":null,"정의":"공간을 격자로 나눠 각 격자를 page로 두고 page별로 점들 저장한 인덱스","내용":"선형 눈금자 : X, Y 축 값(0, 5, 10 등) 표시\n격자 배열 : 공간을 격자로 나눈 것\n데이터 페이지 : 격자끼리 묶어 하나의 page로 구성\n- 왼쪽 위 아래 격자 묶어서 P1, 가장 오른쪽 두개 P2…"},{"토픽":"사분트리","키워드":null,"도식":null,"정의":"공간을 반복적으로 4분할해 넘버링 후 이를 트리로 만든  계층적 자료구조","내용":"격자에서 도형에 해당 되는 부분은 1, 아니면 0\n큰 격자를 계속 4분할 해 나가며, 1인 부분은 계속 세분화\n> 첨엔 1, 2, 3, 4로 나누고, 2를 4개로 또 나누면 2, 3, 4, 5\n이런식으로 계속 번호 붙여 나중에 트리로 만듦"},{"토픽":"R트리","키워드":null,"도식":null,"정의":"MBR끼리 묶어 그 포함관계를 B 트리로 표현, 공간 data 저장\/검색 빠른 다차원 인덱스 구조\n\nMBR을 이용해서 다차원의 공간 데이터를 저장하기 위한 계층적 트리","내용":"리프(젤 작은 MBR), 중간 노드(자식 MBR들 포함하는 MBR)\n완전 균형 트리(모든 리프 같은 레벨)\n대용량 data 처리 굿\nMBR 중첩 가능, 따라서 임의 크기의 객체를 분할 저장 가능"},{"토픽":"R+트리","키워드":null,"도식":null,"정의":"중간 노드 MBR 중첩 제거, 여러 중간 MBR에 걸친 leaf는 여러 노드에 중복 저장하는 R트리의 변형\n\nR 트리에서 겹침으로 인한 성능 저하 개선을 위해 겹침 허용 안함\n","내용":"중간 노드 MBR 중첩 X, 삽입\/삭제 연산 R트리보다 복잡\n여러 중간 MBR에 걸친 리프 MBR은 여러 노드에 중복저장\n- MBR 중첩 시의 문제를 해결, 불필요한 노드 탐색 감소\n- 중간노드 분할로 하위노드 전체 분할 가능, 공간 활용 저하"},{"토픽":"R*트리","키워드":"리 분 재","도식":null,"정의":"R트리의 삽입\/삭제 시, 부모 MBR이 효율적 확장되게 알고리즘을 개선한 R트리의 변형\n\n겹침 허용하지만 최소화, 둘레•면적 최소화 등 합리적 방법 복합 사용\n","내용":"MBR 면적\/중첩 영역\/둘레길이(마진) 최소화(정사각화)\n리프 선택 : 중첩 영역 증가분이 최소인 MBR부터 선택\n노드 분할 : 분할된 MBR들 마진 합, 중첩 영역 최소되게 분할\n분할 전 강제 재삽입 : 오버flow 시 중심에서 먼 애 강제 삽입\n* R트리 시리즈 중 가장 복잡한 알고리즘"},{"토픽":"MBR\n(Minimum Boundary Rectangle)","키워드":"인미 검 저","도식":null,"정의":"기존 DB 또는 공간 인덱싱에서 불규칙 공간 data 저장 위한 공간 객체를 감싸는 최소 경계 사각형","내용":"공간 인덱스 미지원 DB에서도 유용\n검색 : MBR이 해당 영역에 있는지 봐서 탐색 공간 빨리 축소\n저장 : (minX, minY), (maxX, maxY) 두 개의 2차원 점 data"},{"토픽":"데이터 표준화","키워드":"요 정 확 관\n용 단 도 코\n명 정 형 규","도식":null,"정의":"시스템별로 상이한 data들의 명칭, 정의, 형식, 규칙을 일관성 있게 관리하는 활동","내용":"표준화 요구 수집 > 표준 정의(용단도코) > 확정 > 관리(이행)\n- 용어 : 표준 단어\/도메인\/코드로 구성, 기술\/업무로 분류\n* 고객 구분 코드(CUST_TYP_CD), 고객ID(CUST_ID)\n- 단어 : 용어에 대한 한글\/영문명 일관성 있게 정의\n* 고객(CUST), 구분(TYP), 코드(CD), ID(ID)\n- 도메인 : 컬럼 성질 그룹핑한거(문자, 숫자, 일자, 시간형)\n* 도메인 : ID \/ 데이터타입 : CHAR(16)\n- 코드 : 도메인의 한 유형, 특정 도메인에 부여된 값\n* 고객 구분 코드 : 01-개인 \/ 02-법인 \/ 03-기타\n\n데이터 표준 \/ 데이터 표준 관리 조직 \/ 데이터 표준화 절차"},{"토픽":"마스터 데이터","키워드":"마 컨 운\n거 운(표 품 데) 인","도식":null,"정의":"모든 업무에서 동일 의미\/형태로 사용하는, 운영\/분석 data의 기준이 되는 데이터","내용":"마스터 기준정보 : 전사 업무에 동일한 기준으로 사용되는 핵심 업무 데이터(고객, 상품, 서비스, 종목 등)\n\n컨트롤 기준정보 : 데이터의 입력\/집계\/분석 시 편의를 위해 설계된 코드(고객구분코드, 자산관리유형코드 등)\n\n운영 기준정보 : 업무프로세스 실행결과 또는 산출식에 의해 생성, 변경, 폐기되는 데이터로 참조되거나 입력값으로 활용(수수료 징수율, 약정이자율 등)\n\n거버넌스 \/ 운영표준(표준.품질,테이터) \/ IT인프라 아키텍처"},{"토픽":"데이터 거버넌스","키워드":"\n원 프 조 변\n투 책 표\n정 품 준 비","도식":null,"정의":"조직이 가지고 있는 데이터를 관리 수준을 높여 의사결정을 지원하고 비즈니스 수준을 높이는 행위 및 기준체계","내용":"원칙 : 투명성, 책임성, 표준화\n집중역역 : 정책, 품질, 규정준수, 비즈니스 인텔리전스\n\n구성 : 원칙, 프로세스, 조직체계, 변화관리"},{"토픽":"MDM\n(Master Data Management)","키워드":"분 속 식 표 품 생","도식":null,"정의":"Single View Of Truth에 따라 통합적인 뷰 제공하는 거버넌스, IT 인프라, 표준 기반 마스터 데이터 관리 도구","내용":"분류 : 데이터 분류, 실적집계 및 분석 기준\n속성 : 관리하고자 하는 정보항목\n식별 : 마스터의 코드체계\n표기표준 : 속성의 입력 기준\n품질체계 : 기준 정보의 데이터 품질 및 운영수준 평가 기준\n생애프로세스 : 데이터의 생성\/변경\/폐기를 위한 업무절차,기준"},{"토픽":"공공기관 DB 표준화지침","키워드":null,"도식":null,"정의":"공공기관들의 효율적인 데이터 표준화 산출물 위한 테이블 정의서 등 지침서","내용":"대상 : 공공기관에서 개별 구축한 신규\/고도화 시스템의 DB\n공공 data의 양적 확대 넘어 질적 확대가 필요\n공공기관 간 다른 이기종 시스템 연계 표준화가 없었음"},{"토픽":"공공기관 DB 테이블 정의서 항목","키워드":"보 물 소 한영 설 업 공비\n유 엔 볼 발","도식":null,"정의":"공공기관들의 효율적인 데이터 표준화 산출물 위한 테이블 정의서 등 지침서","내용":"보존기간, 물리DB명, 테이블소유자, 테이블 한글\/영문명, 테이블 설명, 업무분류체계\n\n공개\/비공개 사유 등\n\n테이블 유형, 관련 엔티티명, 테이블 볼륨, data 발생주기, "},{"토픽":"공공기관 DB 테이블 정의서 항목별 지침","키워드":"한 준\n유 일 파 클 뷰\n설 파분 뷰구\n업 기 자","도식":null,"정의":"공공기관들의 효율적인 데이터 표준화 산출물 위한 테이블 정의서 등 지침서","내용":"한글\/영문 : '표준용어정의서' 규칙 준거\n유형 : 물리 유형이면 일반\/파티션\/클러스터\/뷰 테이블 등\n설명 : 파티션 table이면 분할조건, 뷰 table은 뷰의 구성 조건\n업무 : 정부의 기능분류체계(BRM) or 기관 자체 BRM 기반"},{"토픽":"ISO 8000","키워드":"품 마 측 특","도식":null,"정의":"일반, 마스터, 제품 data의 관리 프로세스 및 평가 관련 데이터 품질관리 국제 표준","내용":"데이터 품질관리(거버넌스+보증)\n마스터 데이터 교환(구문, 의미, 활용)\n데이터 품질 측정 원칙(확인+검증)\n특정 유형의 공학 데이터 품질"},{"토픽":"ISO 8000-61","키워드":"실 연 자\n실 계 통 보 개\n연 구 보 운 전\n자 교 조 인","도식":null,"정의":"ISO 8000의 데이터 품질관리 프로세스 참조 모델","내용":"실행 : PCAI(계획 > 통제> 보증 > 개선) Cycle\n- 계획 : 요구사항, 정책, 표준, 절차 관리\n- 통제 : 명세서 작성, 작업 지시, Data 처리, 품질 모니터링\n- 보증 : 품질 이슈 리뷰, 품질\/프로세스 성능 측정, 평가\n- 개선 : 원인 분석, Data 클렌징, 프로세스 개선\n\n연계 지원 : 정보\/기술(Data 구조, 보안, 운영, 전환 관리)\n\n자원 제공 : 자원\/교육(품질 조직, 인적자원 관리)"},{"토픽":"ISO 8000-150","키워드":"거 문 조 프 변\n관 통 실 + 운 모 개","도식":null,"정의":"ISO 8000의 마스터 데이터 품질관리 프레임워크","내용":"왼쪽에 데이터 거버넌스(문화, 조직, 프로세스, 변화통제),\n오른쪽에 관리자, 통제자, 실행자 각각이\n데이터 운용, 품질 모니터링, 품질 개선 하는 표(3 * 3 : 9칸)\n- 관리자 : data 구조 관리 \/ 품질 계획 \/ 권한, 흐름관리\n- 통제자 : data 설계 \/ 품질 기준설정 \/ 오류 원인 분석\n- 실행자 : data 처리 \/ 품질측정 \/ 오류수정"},{"토픽":"공공 데이터 품질 관리 매뉴얼 2.0","키워드":"관 진 개\n관 계 구 운 활\n진 대 진 결\n개 계 개 통","도식":null,"정의":"공공기관에서 생성한 data 등 공공 data의 품질을 진단\/관리","내용":"품질 관리 : 계획 \/ 구축 \/ 운영 \/ 활용(정보 SDLC 고려)\n- 계획 : 품질관리 조직, 목표 수립, 품질관리 대상 DB 선정\n- 구축 : Data 표준 수립\/적용, 구조 일관성, 오류 입력 방지\n- 운영 : Data 품질 진단\/개선, data 산출물 점검\/최신 유지\n- 활용 : 품질오류 신고 관리, 데이터 품질 평가에 따른 조치\n* 정보생명주기 : 계획, 획득, 저장\/공유, 운영, 활용, 폐기\n품질 진단 : 대상 정의 > 진단 실시 > 결과 분석\n품질 개선 : 개선계획 > 개선 > 품질 통제(평가, 모니터링)"},{"토픽":"DQM","키워드":"값 구 프\n설 관 모\n(김)정일 유보적 접근","도식":null,"정의":null,"내용":"대상 : 값, 구조, 프로세스\n관점 : DA(데이터 설계자), DBA(DB 관리자), 모델러\n기준 : 정확, 일관, 유용, 보안, 적시, 접근"},{"토픽":"DQM 3\n(데이터품질관리 성숙모형)","키워드":"속 프 성\n* ISO 8000으로 채택됨","도식":null,"정의":"한국이 세계 최초로 개발한, 데이터 품질관리 활동을 도정통정최 5단계 성숙도로 심사하는 DB 품질인증 모델","내용":"data 품질속성 6개 + 관리 프로세스 8개 + 성숙수준 5단계\n기술요소 : data 품질속성(값, 구조, 프로세스),\n성숙도(비정형이 1~3, 정형이 4, 5레벨),\n지원활동(Audit, MDM 도입, data 전처리, 트랜 처리)"},{"토픽":"DQM 3 data 품질속성","키워드":"(김)정일 유보적 접근","도식":null,"정의":null,"내용":"정확성, 일관성, 유용성, 보안성, 적시성, 접근성"},{"토픽":"DQM 3 data 관리 프로세스","키워드":"요 오 구 D 표 흐 활 뷰","도식":null,"정의":null,"내용":"요구사항, data 오너십, 구조, DB, data 표준, 흐름, 활용,\n사용자 뷰 관리"},{"토픽":"DQM 3 성숙도 기준","키워드":"도 정 통 정 최","도식":null,"정의":null,"내용":"도입 : 관리 문제점 인식함\n정형화 : 관리 프로세스 정형화\n통합화 : 전체 시스템 일관 관리\n정량화 : 수치 통해 관리\n최적화 : 개선에 필요한 요소 지속 도출, 적용"},{"토픽":"데이터 품질진단","키워드":"정 진 결 계 개 통","도식":null,"정의":"시스템 내 정형\/비정형 data 품질 측정해 현재수준 평가, 품질 저하 요인 분석해 개선사항 찾는 품질관리 활동","내용":"진단대상 정의 > 품질진단 실시 > 진단결과 분석 > 개선계획 수립 > 개선수행 > 품질통제\n\n3개씩 나눠서 품질진단 > 품질개선 활동으로 구분\n* 기준\/대상 정의 시 품질이슈 조사(설문, 면담, 과거 진단)\n* data 문서 수집 : 테이블정의서, 컬럼정의서, 구성도, ERD"},{"토픽":"품질 기준","키워드":"준 완 일 정 유 보 적","도식":null,"정의":null,"내용":"준비성 : 관리지표, 내용충실\n완전성 : 논리모델, 식별자, 물리구조, 속성의미\n일관성 : 속성, 표준, 중복값, 연계\n정확성 : 입력값, 업무규칙, 범위\/형식, 참조관계, 계산식\n유용성 : 충분, 접근, 활용\n보안성 : 오너십, 접근제한, DB보호\n적시성 : 응답시간, 데이터제공, 최신값"},{"토픽":"품질진단 종류","키워드":"프(값 구) 체 업 비","도식":null,"정의":null,"내용":"값 : 컬럼, 날짜, 패턴, 코드 데이터의 정확성 위주 진단(유효성,정확성)\n구조 : 표준화 수준, 테이블 구조, 정규화 수준, 컬림 및 관계 정의, 데이터의 구조적 결함 측정(일관성, 정합성)\n체크리스트 : 인터뷰, 설문으로 진단\n업무 규칙 진단 : 법, 규정, 업무규칙\/기준 근거 진단\n비정형 실측 : 문서, 이미지, 동영상 등 비정형 정보 직접 확인"},{"토픽":"데이터 진단 프로파일링","키워드":"기 메 도 진 프\n\n논 정 제 도\n물 총 유 널 최 범","도식":null,"정의":"Data 무결성 등 품질 이슈 확인 위해 논리 DB와 물리 DB 분석 기법","내용":"기준정보 수집 > 메타정보 추출 > 도메인 정의 > 진단방법 선정 > 프로파일링 실시\n\n논리 DB 설계(Meta Data)\n- Table\/컬럼 정의서, 제약 조건, 도메인 규칙\n\n물리 DB 구현(실제 Data)\n- 총 Data\/컬럼 수, 유일값\/Null 수, 최대\/최소, 유효 범위"},{"토픽":"데이터 Migration 검증 테스트","키워드":"유 완 외 통 프\n이 부 전","도식":null,"정의":"기존 data를 타 시스템으로 이관 시 누락\/중복 등 품질 검증 기법","내용":"유효성 test : 완전성(누락), 외양(GUI), 통합(link), 프로세싱\n- 통합 : 이관 후 링크 \/ 프로세싱 : 기능 처리 시 data 연계\n\n이관 test : 부분 \/ 전체 Migration\n- 부분 : 효율적 검증 \/ 전체 : 모든 Data + Migration 검증"},{"토픽":"DQC\n(Database Quality Certification)","키워드":"V M S","도식":null,"정의":"공공\/민간의 정보시스템의 data 품질 확보 위해 data 자체, 관리체계, 보안 요소 심사\/인증하는 제도","내용":"data 자체 품질 인증 : DQC-V(Value)\ndata 관리수준 인증 : DQC-M(Management)\ndata 보안 기술 인증 : DQC-S(Security)"},{"토픽":"DQC-V\n(Value)","키워드":"도 업\n플9997 골977 실955","도식":null,"정의":"데이터 자체'에 대한 품질 영향 요소 전반을 도메인, 업무규칙을 기준으로 심사\/심의하는 인증","내용":"심사 기준 : 도메인(속성별 data 허용 범위\/표준 준수 여부),\n업무규칙(data의 업무규칙 준수 여부)\n\n플레티넘 : 정합율(오류 X 비율) 99.977%(5.0 시그마) 이상\n골드 : 97.7%(3.5)\n실버 : 95.51%(3.2) 이상"},{"토픽":"DQC-M\n(Management)","키워드":"심사 : 김정일 유보적 접근\n레벨 : 도 정 통 정 최(1~5)","도식":null,"정의":"정보시스템의 '데이터 관리 수준'을 심사\/심의하는 인증","내용":"심사 기준 : 정확, 일관성, 유용성, 보안성, 적시성, 접근성\n\n도입 : 관리 문제점 인식함\n정형화 : 관리 프로세스 정형화\n통합화 : 전체 시스템 일관 관리\n정량화 : 수치 통해 관리\n최적화 : 개선에 필요한 요소 지속 도출, 적용"},{"토픽":"DQC-S\n(Security)","키워드":"접 암 작 취","도식":null,"정의":"중요 data나 개인정보 저장된 DB를 대상으로, '보안'에 대한 기술요소 전반을 심사\/심의하는 인증","내용":"심사 기준 : DB 접근제어, 암호화, 작업결재, 취약점 분석\n인증 레벨 : 1~4레벨(접 > 암 > 작 > 취 수행)"},{"토픽":"데이터 리니지\n(Data Lineage)","키워드":"생 형 정\n\n수 분 적 시 사","도식":null,"정의":"메타 데이터를 기반으로, 데이터 흐름을 시각화 해 Data SDLC를 계보로 구현한 Data 계보 관리 솔루션","내용":"배경 : 기업 업무, 시스템 연계 복잡해져 Data 계보 파악 필요\n특징 : Data 생애주기 관리, Data 형태 적시 확인, 정확 향상\n구성 : 수집 > 분석 > 적재\/매핑\/관리 > 시각화 > 사용자"}]