[{"토픽":"EA\/ITA","키워드":"환 방 프 원 현 목 관\n비 데 앱 기(비 데 타)","도식":null,"정의":"비즈니스와 IT 간 융합 위해 조직의 IT 구조와 시스템 총괄, 업무 프로세스와 IT 관계를 표현한 청사진","내용":"내\/외부 환경 분석 > EA 목적, 방향 > EA 프레임워크 정의 >\nEA 원칙 수립 > 현행 아키텍처(비 데 앱 기) 구축 >\n목표 아키텍처(비 데 앱 기) 구축 > EA 관리체계 정의\n\n비데앱기 : BA\/DA\/AA\/TA"},{"토픽":"ISP","키워드":"환 현 정 목 이","도식":null,"정의":"조직의 경영 전략과 IT 전략 및 비전 연계, IT 사업 도출\/로드맵 수립 활동","내용":"환경(외부, 법)분석 > 현황(업무, IT)분석 > 정보화 비전\/전략\n> 목표모델(업무, 시스템) 설계 > 통합 이행계획(구축비 등)\n* 세부 활동이랑 산출물은 대강 채워넣기\n* EA\/ITA(Biz-IT 관계) > ISP(전략 연계) > ISMP(RFP\/SRS)"},{"토픽":"ISP 공통가이드 5판","키워드":"사 필 시 중\n실 여 기 클\n규","도식":null,"정의":"ISP의 형식적 수립 타파, 기재부 검토 강화해 IT 예산 편성\/집행 내실화 도모 위한 가이드","내용":"기관 ↔ 기재부 ↔ NIA 로 검토 진행\n검토 절차 단축 \/ 기간 단축(60>30일) \/ 클 도입 검토 추가\n1) 사업 타당성 : 필요 \/ 시급 \/ 중복성\n2) 실현 가능성 : 사업추진여건 \/ 기술적정 \/ 클라우드 도입 가능\n3) 규모 적정성"},{"토픽":"ISP 공통가이드 6판","키워드":"M 수 민 디","도식":null,"정의":null,"내용":"ISMP 제도화 \/ ISP, ISMP, 중장기 정보화 계획 제시\n기존 상\/하반기 접수 > 연중 수시접수\n수립 제외 : 단순시스템 개발 > 민투형 SW 사업 추가\n클라우드 뿐 아니라 디지털 서비스 도입\/전환 우선 검토"},{"토픽":"ISP 공통가이드 7판","키워드":"C A 한 민 국\n도 개 운 물 시 디 민","도식":null,"정의":null,"내용":"디지털플랫폼정부 기본원칙 적용 우선 검토 항목\n클라우드 우선, 국민중심, 하나의정부, AI\/데이터 기반, 민관협력\n수립 제외 유형별 세부 사례 추가\n\n개발 및 유지보수 : 단순시스템 도입, 단순시스템 개발, 운영\/유지\n시스템 구축 : 단순물품 구매, 시설구축, DB구축\n제도 : 민투형 SW사업"},{"토픽":"ISM 공통가이드 7판 산출물 검토분야","키워드":"사 실 디 규","도식":null,"정의":null,"내용":"사업타당성 :필요 \/ 시급 \/ 중복성\n실현 가능성 : 사업추진여건 \/ 기술적정 \/ 클라우드 도입 가능\n디지털 플랫폼 정부 기본 원칙 적용 : CA한민국\n규모 적정성"},{"토픽":"ISMP","키워드":"착 방 분 정 이\n계 분 예 R 선","도식":null,"정의":"부적절 발주관행 등 타파 위해 SW 개발 사업을 FP 수준까지 상세 분석해 RFP 등 도출 활동","내용":"착수, 참여자 결정 > 시스템 방향성(전략 검토, 벤치마킹) >\n요건 분석(업무\/기술 현황, 요건) > 시스템 구조\/요건 정의 >\n구축사업 이행방안 수립\n- 이행방안 : 계획 > 분리발주검토 > 예산 > RFP > 업체선정"},{"토픽":"공공기관 중장기 재무관리계획","키워드":"2조 5개년 공기\/준정","도식":null,"정의":"자산 2조원 이상 또는 정부 손실보전 규정이 있는 공기업\/준정부기관의 5개년치 재무 전망 계획","내용":"필요 : 재정건전 \/ 부채 전이 방지 \/ 정부 투자 방향 결정\n대상(39개) : 자산 2조 이상 or 정부 손실보전 규정 있는 기관\n내용 : 5개년 경영목표, 투자방향, 연도별 자산\/부채 등 전망"},{"토픽":"제안요청서(RFP)","키워드":"개 현 추 제 작 안","도식":null,"정의":null,"내용":"사업개요, 시스템 현황, 사업추진 방안, 제안요청내용, 제안서 작성요령, 제안안내사항"},{"토픽":"요구사항","키워드":"기 정 기 자 입 사\n비 신 사 보 성 안 가\n유 컨 환","도식":null,"정의":"기능\/비기능 요소 등, SW 시스템이 제공해야 하는 역량","내용":"기능 : 입출력, 사용자(누가 써?), 기능, 자료, 접근 정책\n비기능 : 신뢰, 사용성(I\/F), 보안, 성능, 안전, 가용성\n기타 : 유지관리 방안\/인력, 컨설팅, 전산실 등 환경조성\n요르단의 법칙(스노우볼 효과) : 초기설계 미흡>후반 비용↑"},{"토픽":"공공 SW 사업유형","키워드":"개 콘 공 유","도식":null,"정의":null,"내용":"SW 개발사업\n컨설팅(정보화전략계획 수립)사업\n공사(시스템 운용환경 구축)사업\n유지관리사업"},{"토픽":"요구사항 도출기법","키워드":"유 개\n\n상하 롤 페 인\n상상 관 심 설\n하하 프 브 워\n하상 벤 포 유","도식":null,"정의":null,"내용":"유저지식↑ 개발경험↓ : 롤플레잉, 페르소나, 인터뷰\n유저지식↑ 개발경험↑ : 관찰, 심층 면접, 설문\n유저지식↓ 개발경험↓ : 프로토타입, 브레인스토밍, 워크샵\n유저지식↓ 개발경험↑ : 벤치마킹, Focus그룹, 유즈케이스"},{"토픽":"요구공학","키워드":"개 타 추 분 명 검 관\n관 협 기 변 확","도식":null,"정의":"매 단계마다 요구사항이 잘 지켜지고 있는지 검증해나가는 공학적 방법","내용":"요구사항 개발 \/ 관리로 나뉨\n개발 : 타당성 조사 > 요구사항 추출 > 분석 > 명세화 > 검증 > 관리\n관리 : 협상, 요구사항 기준선(베이스라인), 변경관리, 확인"},{"토픽":"요구공학 프로세스 및 산출물","키워드":"추 분 명 검 관","도식":null,"정의":null,"내용":"요구공학 프로세스 및 기법\/산출물 요구사항 추출 : 인터뷰, 롤플레잉, 체크리스트,제안서\n\n요구사항 분석 : I\/F정의서, 분석서, 자료흐름도, 자료사전\n\n요구사항명세 : 요구 기준 정의, 명세서 작성, 요구사항 명세서\n\n요구사항검증 : Baseline수립\n\n요구사항 추적표 요구사항관리 : 요구사항 변경 요청서, 승인서"},{"토픽":"요구사항 유형분류","키워드":"기성시인\n데테 보품제프\n컨공유","도식":null,"정의":null,"내용":"기능 : 기능 비기능 성능,시스템, 인테페이스, 데이터, 테스트, 보안, 품질, 제약, 프로젝트 관리\/지원\n\n기타 : 컨설팅, 공사, 유지관리 수행\/인력"},{"토픽":"SRS\n(Software Requirement Specification)","키워드":"명 지 대 변 판\n계 공 결 착 변 검\n\nSW 진흥법 57조","도식":null,"정의":"SW 진흥법 57조 기반, 공공 SW사업의 명확 계약 위해 SW를 FP 수준까지 구체적 설명하는 과업 내용서","내용":"과업 명확화, 과업 확정 지연 방지, 변경관리,\n과업변경 시 대가지급, 분쟁 시 판단기준\n사업계획 > 사업공고 > 체결 > 착수 > 변경 > 검수\n* IEEE 29148(명세서)"},{"토픽":"SRS 평가 기준\n(IEEE 830)","키워드":"정 명 완 일 검 수 추 이 해","도식":null,"정의":null,"내용":"정확성(사용자 요구 정확히 반영)\n명확성(명세 하나는 하나의 의미)\n완전성,\n일관성(명세 내용 간 모순 없음)\n검토 가능성,\n수정 용이성\n추적 가능성\n이해가능성\n해석가능성"},{"토픽":"유저 스토리","키워드":"사 스 우","도식":null,"정의":"개발대상 제품 기능 정의 위해 사용자 입장에서 비즈니스적 가치 기반으로 요구사항을 정리하는 실천법","내용":"사용자 정의(누가 쓸지) > 스토리 카드(1기능 1카드)\n> 우선순위 설정"},{"토픽":"스토리 포인트","키워드":"골든 스토리","도식":null,"정의":"개발자별 능력 따라 가변적인 MD와 달리, 객관\/절대 기준으로 유저스토리 구현 어려움 표현 척도","내용":"골든 스토리 : 기준이 되는 유저 스토리(제일 쉬운 것)\n예컨대 로그아웃이 골든 스토리면, 로그아웃은 1포인트,\n로그인은 3포인트, 가입은 5포인트, 이런 식"},{"토픽":"플래닝 포커","키워드":"골 추 조 반\n\n40점 분","도식":null,"정의":"애자일 조직에서 팀 전체가 협업하여 유저 스토리 규모를 추정하는 방법","내용":"포커 치듯 각자 생각하는 카드를 동시에 내서,\n만장일치 될 때까지 반복, 보통 3번 정도 하면 그냥 평균값 냄\n골든 스토리 지정 > 스토리 규모 추정 > 규모 조정 > 반복\n* 40점 이상 나오면 그 기능 분할여부 검토"},{"토픽":"Velocity","키워드":"1 스프린트당 얻는 포인트","도식":null,"정의":"한 팀이 단위 스프린트 기간 내 완료시킨 스토리 포인트 총합","내용":"스프린트가 2주고, 벨로시티가 13인데 구현해야 될 총 스토리 포인트 합이 60이면 약 10주 걸린다고 예측 가능\n스프린트 종료 시마다 retrospect(회고)에서 velocity와 실제 구현한 포인트 비교하며 그 팀의 진짜 velocity를 찾아감"},{"토픽":"폭포수모델","키워드":"분 설 개 시 유","도식":null,"정의":"전통적 SW 개발 프로세스로 단계적으로 개발하는 방법론","내용":"요구 분석 > 설계 > 개발 > 시험 > 유지보수\n각 단계 종료 시 검증\/피드백 후 다음 단계"},{"토픽":"V모델(V&V)","키워드":"사 시 분 설 상 코\n단 통 시 인 설\n\n확 검","도식":null,"정의":"폭포수 모델 확장 형태로 코딩 단계에서 위로 꺾여 V자 모양으로 개발하는 방법론","내용":"사용자요구 > 시스템 요구 > 요구분석 > 구조설계 > 상세설계 > 코딩\n단위 > 통합 > 시스템 > 인수 테스트 > 설치\nVerification(개발자\/확인), Validation(사용자\/검증) \/ 폭포수 + 검증"},{"토픽":"프로토타이핑","키워드":"실 점 폐 진 프","도식":null,"정의":"본격적 상품화에 앞서 성능 검증\/개선 위해 핵심 기능 기반 기본 모델로 개발하는 방법론","내용":"1. 실험\/점진(증분) : 여러 모듈 각각 점증적 개발\/릴리즈,\n실제 개발 시 폐기\n2. 진화 : 프로토타입 빨리 만들고 이걸 계속 개선"},{"토픽":"나선형","키워드":"계 위 개 평","도식":null,"정의":null,"내용":"계획 > 위험분석 > 개발\/테스트 > 고객평가\n위험 최소화, 성과 봐가며 조금씩 투자, 릴리즈도 점증적\n대규모엔 좋은데 여러 상용제품 만들기엔 안좋아"},{"토픽":"소프트웨어 개발방법론","키워드":"구 정 객 씨 (플) 아","도식":null,"정의":"SW 개발 과정들을 표준화해 체계\/일관\/효과적 개발을 위한 방법론","내용":"구조적(절차, 모듈 중심) > 정보공학(ISP, Biz, EA 분석)\n> 객체지향(객체 중심) > CBD(컴포넌트 재사용, 조립)\n> SSPL(핵심자산 재사용) > 애자일(변화 대응)"},{"토픽":"소프트웨어 개발방법론 구성요소","키워드":"절방관 기도 산","도식":null,"정의":null,"내용":"Input : 작업절차, 작업방법(단계별로 누가 뭐할지), 개발관리\nTool\/Tech : 기법(ERD, Use Case), 기법별 도구(ppt, 엑셀)\nOutput : 단계별 산출물(설계서, 명세서)"},{"토픽":"구조적 방법론","키워드":"70 함 분 정","도식":null,"정의":null,"내용":"70년대, 복잡성 극복, 프로세스\/기능(함수) 중심, 분할 정복\nTop Down"},{"토픽":"알고리즘","키워드":"입 출 명 유 한","도식":null,"정의":null,"내용":"조건 : 입력, 출력, 명확성, 유효성, 유한성(무한 반복 X)\n평가 : 시간 복잡도(O, Θ, Ω) \/ 공간 복잡도(Mem 사용량)\n- 갈수록 메모리 발달해서 이젠 거의 시간으로만 평가"},{"토픽":"정보공학 방법론","키워드":"80 자 구 탑-다","도식":null,"정의":null,"내용":"80년대, 자동화, 프로세스\/data 균형, 자료구조 중심\nTop Down"},{"토픽":"객체지향 방법론","키워드":"캡 추 다 정 상\n\n클 객 인 속 메 시","도식":null,"정의":"실세계 Entity를 Attribute + Method 결합한 Object로 표현하는 개념","내용":"90년대, 모듈화, 객체 중심, 화이트박스 Reuse\nBottom Up\n모듈 : 캡슐화(data+메소드)\/추상화\/정보은닉\/다형성\/상속\n구성요소 : 클래스, 객체, 인스턴스, 속성, 메소드, 메시지"},{"토픽":"CBD 방법론","키워드":"재 컴 블 바\n\n추 설 구 인 배 특 조","도식":null,"정의":"컴포넌트 개발 및 조합을 통한 재사용 중심의 대규모 프로젝트에 유리한 개발방법론","내용":"2000년대, 재사용성, 컴포넌트 중심, 블랙박스 Reuse\nBottom Up, SSPL로 발전, UML등 자동화 도구 필요\n도메인 공학 : 분석>설계\n컴포넌트 : 추출 > 설계 > 구현 > 인증 > 배포 > 특화 > 조립"},{"토픽":"SSPL\n(SW&Systems Product Line)","키워드":"스 요 설 구 테\n요 설 구 테\nISO\/IEC26550","도식":null,"정의":"대량맞춤생산에 대응 위해 핵심자산은 재사용하고, 가변 요소만 집중 개발해 이를 조립하는 개발 방법론","내용":"Core Asset  개발\/재사용, SW 통해 원가절감\/품질개선 등\n도메인 공학 : 스코핑 > 요구정의 > 설계 > 구현 > 테스트\n어플리케이션 공학 : 요구 정의 > 설계 > 구현 > 테스트\n* 도메인으로 공통요소(PL) 구현, APP으로 가변 요소 구현"},{"토픽":"SSPL 4대 기술요소","키워드":"다 통 프 융","도식":null,"정의":null,"내용":"다품종 다수 고객 맞춤 역량 강화 : 재사용 극대화로 달성\n통합 플랫폼 구축 : 그간의 노하우 집적, 유사 제품군에 적용\n프로세스 구축 : 사용자, 개발자, 운영자의 개별 업무를 통합\nSW와 시스템 융합 : 다양한 도메인의 SW 집약 시스템 개발"},{"토픽":"SSPL 실현 원천 기술","키워드":"전 기 개 조 지","도식":null,"정의":null,"내용":"전략 및 통합 : SSPL 표준화, SSPL 기술 산업화(테일러링)\n기획 : 스코핑(마켓, 도메인, 자산), 개발계획 수립\n개발 : 도메인 요구공학 \/ 아키텍처 \/ 구현 \/ 검증, App 공학\n조직관리 : 조직계획 \/ 운영\n지원 : 플랫폼 기술(자동화 등) \/ 평가(SDLC 전체)"},{"토픽":"대규모 IT 프로젝트 문제점","키워드":"인 품 위 의 일 범 비\n\n파 자 후 학\n\n골 스","도식":null,"정의":null,"내용":"인력관리\/품질관리\/위험관리\/의사소통 관리 일정지연 \/ 범위증가 \/ 비용증가\n\n파킨슨 법칙, 자기방어, 후행공정, 학생증후군\n\nGold Plating(사업 수행자, 개발자가 범위 초과),\nScope creep(고객이 무분별 범위 확대), Cost 측정 hard,\n파킨슨(공무원 수), 커뮤니케이션 오류, 요구사항 변화"},{"토픽":"애자일","키워드":"가 고 개 P 스\n\n피자두판(5~8명)","도식":null,"정의":"절차와 산출물보다 고객 협력, 시장 적시성을 중시, 비즈니스 시장 변화에 유연하게 대응 위한 경량 개발 방법론","내용":"가변적 요구대응 \/ 고객만족 \/ 개발자 동기부여 \/\nPM의 역할변화(플젝 관리자 > 촉진자, 책임은 팀원에게)\nSweet Spots(한 작업실 5~8명, Key User 상주하며 피드백)"},{"토픽":"SCRUM","키워드":"유 제백 스백 스 회","도식":null,"정의":"짧은 스프린트의 반복을 통한 점진적 SW 개발 추구하는 애자일 방법론","내용":"유저 스토리 > 제품 백로그 > 스프린트 백로그\n> 스프린트(일일 미팅, 번다운\/소멸 차트)\n> Retrospective(리뷰\/개선미팅 a.k.a 회고)\n\n스크럼 마스터, 스크럼 팀"},{"토픽":"XP","키워드":"유 스 T 테 배\n용 단 의 피 존\n페리티 지단작 40표","도식":null,"정의":"고품질 SW의 신속 개발 위한 짧은 TDD의 반복 기반의 애자일 개발 방법론","내용":"유저스토리 > 스파이크 > TDD(리팩토링) > 테스트 > 배포\n핵심가치 : 용기, 단순성, 의사소통, 피드백, 존경\n실천항목 : Pair Programming, 리팩토링, TDD, 지속 통합,\n단순 디자인, 작은 배포, 주40시간, 코딩 표준 준수"},{"토픽":"린","키워드":"인품지존 최제학\n결미가 재이 작지","도식":null,"정의":"도요타 기반의 린 시스템 품질 기법을 SW 개발에 적용, 낭비요소 제거로 JIT하게 가치를 제공하는 애자일 방법론","내용":"7원칙 : 빠른 인도, 품질 내재화, 지식 창출(가설), 사람 존중,\n전체 최적화, 낭비 제거, 늦은 확정\n7낭비 : 결함, 미완성 작업, 가외기능, 재학습, 이관,\n작업전환, 지연"},{"토픽":"칸반","키워드":"백선개 완배서\nWIP(시 제 측)","도식":null,"정의":"단계별 작업 현황을 열(column)형태의 칸반 보드로 정리해 Workflow 가시화하는 애자일 방법론","내용":"Backlog > 선택 > 개발 진행 > 완료 > 배포 > 서비스 중\nWIP(Work in Process) 여유 있을 시에만 다음 단계 진행\nWorkFlow 시각화 > WIP 제한 > Flow 측정\nTotal Cycle Time(업무별 사이클의 합, 즉 총 작업 수행시간)"},{"토픽":"데브옵스","키워드":"계 코 빌 테\n릴 배 운 모\n피드백","도식":null,"정의":"자동화 툴 기반, 개발과 운영을 유기적 융합하는 개발 문화","내용":"CI : 계획 > 코드\/빌드 > 테스트\nCD : 릴리즈\/배포 > 운영 > 모니터\nJira, Git\/SVN, Maven, J-Unit, Jenkins, Chef, Puppet, datadog"},{"토픽":"IaC\n(Infrastructure as Code)","키워드":"멱 와\n\n오 부 설\n\n개 I 스 버 C 플\n\n엠솔젠  도배클  안퍼쉐","도식":null,"정의":"인프라 구성 및 제어 위해 코드를 이용해 오케스트레이션하는 프로비저닝 기술","내용":"[특징] 멱등성 제공 \/ 비용, 효율성 \/ 에러관리 -> 자동화된 CD\n[사용언어] \"YAML\"을 이용하여 play back 수행\n[구성도] 작업자 \/ 리뷰어 \/ 버전관리시스템 \/ 서버\n\n[구성기술]\n- 오케스트레이션 : Mcollective \/ SaltStack \/ Jenkins\n- 부트스트랩 : Docker \/ Vagrant \/ Cloud\n- 설정 : Chef \/ Puppet \/ Ansible\n\n[IaC Pipeline] 개발자 -> IDE > 배포스크립트(puppet,chef,ansible) > 버전관리 > CI 서버 > 플랫폼(도커,AWS,Azure)"},{"토픽":"SRE\n(Site Reliability Engineering)\n신뢰공학","키워드":"가 목 장\n지 용 변 비 문","도식":null,"정의":"데브옵스 실행 도구로, SLI\/SLO 기반으로 시스템의 지속적\/적절 수준의 안전성 확보 위한 S\/W 공학","내용":"가용성 정의 > 가용성 목표 정의 > 장애(위험) 대응 계획\n구성 : 비상 대응(Playbook), 문화(비난 X, 에러 Budget),\n용량 계획(수요 기반), 변경 관리(카나리, 롤링, 블루그린),\n지표\/모니터링(SLO\/SLI 기준)\n* Playbook : 워크플로우, 업무절차, 필요조치 등 기술 문서\n* Error Budget(허용 다운타임) : 100% - SLO 가용성 목표"},{"토픽":"SRE 성공요소","키워드":"통 실 자 측 점","도식":null,"정의":null,"내용":"Silo 조직 통합, 실패 수용, 자동화,\n측정(이용률, 처리량, 부하, 장애시간 등등), 점진 개선"},{"토픽":"페어 프로그래밍","키워드":"네 드","도식":null,"정의":"하나의 PC에서 Navigator, Driver가 함께 코딩하는 Agile 기법","내용":"Navigator : 개발 방향 및 전략 설정, 제시\nDriver : 전략에 맞춰 실제 Code 작성\n높은 집중력 발휘, 실시간 코드 리뷰, XP 등에서 활용"},{"토픽":"핑퐁 프로그래밍","키워드":"페 + T 교대","도식":null,"정의":"페어 프로그래밍과 TDD 결합, 두 개발자가 번갈아서 Test와 코드를 개발하는 기법","내용":"개발자 A, B가 둘 다 Tester이자 프로그래머(키보드 스위칭)\nA가 Test 작성 > B가 코드 작성 > B가 Test 작성 > A가 코딩\n* 페어\/핑퐁 둘 다 개발자 간 비슷한 실력 보유,\n짧은 개발(5~10분) 반복, 클린\/심플 코드 작성 필요"},{"토픽":"RAD\n(Rapid Application Development)","키워드":"리 앱 구 컷","도식":null,"정의":"2~3개월 짧은 주기 안에 툴을 활용해서 SW 개발 기법","내용":"JRP(분석) : Joint Requirement Planning\n> JAD(설계) : Joint Application Design > 구축\/운영\n> Cutover(이전) : 매뉴얼 작성 \/ 운영부서로 이전\nTool : 파워빌더, Visual C#, Miplatform\n\nJRP > JAP > Cutover"},{"토픽":"MDA\n(Model Driven Architecture)","키워드":"모 유 씨 엑","도식":null,"정의":"메타모델 기반으로 컴포넌트 정의 후 이를 자동 매핑하여 실제 시스템 구현하는 아키텍처","내용":"기술 플랫폼에 독립적인 기본설계 모델(PIM) 구축\n> 실제 구현 시 기술 플랫폼에 종속 모델로 변환\n구성 : [MOF 모델 > UML 메타모델 > CWM's] + XMI\n- MOF : Meta Object Facility, 표준화된 모델 정보 저장소\n- UML : 객체 및 컴포넌트 표현 위한 표준 모델링 언어\n- CWM : Common Warehouse Meta 모델, 저장소 표준\n- XMI : XML Metadata I\/F, MOF 모델을 XML로 매핑 표준"},{"토픽":"MDD\n(Model Driven Development)","키워드":"메 U 모 템 코\n씸 핌 씀 코","도식":null,"정의":"사용자-개발자 상호 이해 위해 비즈니스 모델(MDA) 기반 추상화 된 모델(설계도) 통해 SW 개발 방법론","내용":"메타모델 > UML 툴 > 모델 > 코드 생성 템플릿 > 코드\n메타모델 : 상태+행동, MOF(메타객체시설)로 공통정보 저장\n모델 기반 소스코드 자동 생성! 생산성\/유지보수 아주 좋다!\nCIM(Biz분석가) > PIM(설계자) > PSM(시스템설계) > 코드\n- CIM : 연산독립 모델 \/ 유즈케이스, 액티비티, 시퀀스 다이어그램 \n- PIM : 플랫폼 독립 \/ 클래스, 오브젝트, 타이밍, 인터액션, 커뮤니케이션 다이어그램\n- PSM : 특화 \/ 컴포넌트, 패키지, 디플로이먼트 다이어그램"},{"토픽":"DDD\n(Domain Driven Development)","키워드":"전 개 바 컨 \/ 택 설\n엔 밸 억 리\n프 앱 도 인","도식":null,"정의":"SW 복잡성 문제 해결 위해 기술 주도가 아닌 비즈니스 도메인(유사업무) 주도로 SW 개발 방법론","내용":"MDD + 유비쿼터스 언어\n전략적 디자인(개념설계, bounded context, Context map)\n> Tactical 디자인(구체적 설계, Entity\/Value Obj 설계 등)\nEntity, Value Object, Aggregate(객체 묶음), Repository\n계층 : Presentation(http요청) > App > 도메인 > 인프라(DB)"},{"토픽":"TDD","키워드":"유 테 코 리 체\n빨 초 테 U 디","도식":null,"정의":"Simple Code를 위해, Test Case를 먼저 개발하고 이를 통과하는 실제코드를 나중에 개발하는 개발 방법","내용":"유저스토리 > 테스트 케이스 > 코딩(git\/svn)\n > 리팩토링(반복) > 체크인\n패턴 : 빨강(test 언제 어디에)\/초록막대(test 통과 코딩),\n테스팅(상세 test), xUnit(j, Cpp, Py\/자동 test), 디자인(BP)"},{"토픽":"애자일 테스트 전략","키워드":"비 기 개 운","도식":null,"정의":"Test Quadrant(4분면)을 이용한 애자일 테스트 전략","내용":"비즈니스 ↔ 기술 \/ 개발 ↔ 운영 해서 4분면 나눔\n비즈니스 : User Case\/Story, Prototype, 시뮬, 사용성, 품질,\n탐색적(전문가 중심), 고객과 pair test\n기술 : 단위\/컴포넌트, 성능\/부하, 보안 test"},{"토픽":"테일러링","키워드":"특 표 상 세 문\n규 범 인 기 \/ 구 연 혁","도식":null,"정의":"SW 개발 프로젝트 특성 고려, 기존 개발방법론들의 절차, 기법, 산출물 등을 적절하게 변경하는 활동","내용":"플젝 특징 정의 > 표준 Baseline 선정 > 상위 커스텀(SDLC, WBS)\n> 세부 커스텀(스케줄, 세부 WBS, 산출물 list) > 문서화\n\n특징 : 규모, 범위, 인력, 기간 \/ 시스템 구조, 연계, 기술혁신"},{"토픽":"무중단 배포 기법","키워드":"롤 블 카 리 토","도식":null,"정의":"애자일로 잦은 배포 시 서비스 중단 없이 가용\/안전\/연속성 보장하며 운영환경에 배포하는 기술","내용":"롤링 : 1개씩 점차 서버 업뎃(배포 중 특정 서버에 트래픽↑)\n블루그린 : New(그린) 버전 모두 배포 후 한번에 Switching\n카나리 : 로드밸런서로 사용자 일부만 신규 > 100% 신규로\nReverse Proxy(서버 가까이)랑 로드밸런싱으로 무중단\nRecreate : 운영서버 삭제 후 신규 서비스 배포(다운타임 존재)\n\nfeature toggle : 릴리즈 \/ 배포 분리 토글로 쉽게 제어"},{"토픽":"Feature Toggle","키워드":"플 특 분","도식":null,"정의":"코드를 수정하지 않고 시스템의 동작을 바꿀 수 있는 기술\n\n특정 기능을 개발했을 때, 그 기능을 특정 인원에게만 접근할 수 있게 하여 운영환경에서 테스트 할 수 있게 하는 방법","내용":".\n배포 이후 원하는 때에 기능을 활성화하거나 비활성화 가능\n\n특징\nflag 활성화\/비활성화를 배포 없이 진행\nproduction에서 특정 기능을 테스트\n사용자의 특징에 따라 분리 적용(릴리즈\/배포분리)\n\nFeature Flag 구현 방법\njson 혹은 config map, YAML과 같은 property 사용\nfeature flag 서비스를 구성하여 사용"},{"토픽":"소프트웨어 설계 원리","키워드":"데 구 인 프\n추 정 단 모","도식":null,"정의":"시스템 개발 조건이나 운용환경 조건의 제약 안에서 효율성\/단순성을 높이는 최적의 설계안 작성 작업","내용":"데이터설계 > 구조 > 인터페이스 > 프로시저(알고리즘)\n원리 : 추상화 \/ 정보은닉(캡슐화) \/ 단계적 분할 \/ 모듈화"},{"토픽":"추상화","키워드":"기 자 제","도식":null,"정의":"객체들의 공통 특성을 파악하고 불필요 특성은 제거해 단순화 하는 원리","내용":"기능 추상화 : 클래스 내 메소드 정의(obj.getName())\n자료 추상화 : 기억 장치의 위치를 변수로 추상화(int x),\n자료의 값(2진수)을 10진수로 추상화(x = 5.7), 배열 등\n제어 추상화 : 제어 행위 개념화, 명령 이벤트(If, for, while)"},{"토픽":"정보 은닉","키워드":"protect private","도식":null,"정의":"타 객체에 자기 정보를 숨기고 자기 연산만을 통해 접근 허용, 외부의 직접 접근을 막는 기법","내용":"Public : 모든 객체 접근 가능\nProtected : 상속 객체만 접근 가능\nPrivate : 자신만 접근 가능"},{"토픽":"단계적 분해","키워드":null,"도식":null,"정의":"추상화의 반복을 통해 문제를 상위 단계에서 하위 개념으로 세분화하는 기법","내용":"하향식 설계"},{"토픽":"모듈화(응집도\/결합도)","키워드":"응 우논시절통순기\n결 내공외제스자\n응 높 결 낮","도식":null,"정의":"SW 성능 향상 위해 프로그램을 분해, 추상화하여 프로그램의 재사용, 수정 등 용이하게 하는 설계 원리","내용":"추상화 > 정보은닉 > 단계적 분할 순서로 모듈화\n응집 : 우연\/논리\/시간\/절차\/통신\/순차\/기능\n결합 : 내용\/공통\/외부\/제어\/스탬프\/자료\n오른쪽으로 갈수록 독립성 좋음, 응집 높고 결합 낮아야\n- 모듈'당' 개발비와 모듈 '간' 연계비 고려해 균형점 찾기"},{"토픽":"객체지향설계원칙","키워드":"SOLID\n상속 : OCP, LSP, DIP\n기능 분리 : SRP, ISP","도식":null,"정의":"클래스 내부 응집도는 높이고 클래스 간 결합도는 낮춰 재사용\/확장\/유지보수 높이는 SW 설계 원칙","내용":"단일책임(1객체 1책임), 개방폐쇄(확장 ok 수정 no,\n변하는 것과 아닌 것 구분 후 그 사이에 I\/F를 정의)\nLiskov치환(자식은 부모 대체), I\/F분리(1인터페이스 1책임)\n의존성역전(상위 클래스를 의존)"},{"토픽":"의존성 주입","키워드":"생 속 메","도식":null,"정의":"의존객체를 내부 생성하지 않고 외부에서 주입해 객체 간 의존성을 컨테이너가 자동 연결하는 방식","내용":"생성자 활용\nclass A{ private B b;  public A(){b = new B();}} \/\/ NO!\n> class A{ private B b;  public A(B b){this.b = b;}} \/\/ OK\n\n속성 노출\nclass A{ public B b; } \/\/ public으로 속성 노출\nA 생성 시 a = new A(); a.b = new B();\n\n메서드(Setter) 사용(매서드 매개변수로 주입)\nclass A{ set bb(B b){this.b = b;} }\n\/\/ 속성 b랑 setter 함수 이름 중복은 안됨"},{"토픽":"의존성 주입 예시","키워드":"스 프 펜","도식":null,"정의":"두 객체 사이에 I\/F를 두어 class lv에선 의존관계 고정 X, 런타임 시 외부에서 두 객체 간 관계를 동적 주입해 유연성 높이고 결합 낮춤","내용":"Store > Pencil(Store가 Pencil 의존) 을\nStore > Product(I\/F, 외부에서 주입) > Pencil 로 변경\nProduct product = new Pencil() \/\/ 의존성 생성\nStore store = new Store(product) \/\/ 의존성 주입"},{"토픽":"다형성","키워드":"라 런 매 리 동 상 직\n로 컴 매 다 리 노 동 평","도식":null,"정의":"오버라이딩, 오버로딩과 같이 하나의 객체에 여러가지 타입을 대입할 수 있는 성질","내용":"오버라이딩 : Runtime 호출 시, 매개변수\/리턴타입 동일 \/ 상속관계 \/ 수직적 확장\n\n오버로딩 : Compile 시, 매개변수 다름, 리턴타입 노상관 \/ 동일클래스 \/ 수평적 확장"},{"토픽":"다형성 예시 \/ 특징","키워드":"동 확 재","도식":null,"정의":null,"내용":"도형 class : int area(), int area(int a) \/\/ 오버로딩\n삼각형 class : int area() \/\/ 오버라이딩(삼각형이 도형 상속)\n\n다형성 특징\n동적바인딩 : 프로그램 실행 시점 호출 번지\/함수 연결\n확장성 지원 : 오버로딩 수평적 \/ 오버라이딩 수직적\n재사용성 지원 : 기존 구현 부분은 동일 사용 \/ 필요 부분 수정"},{"토픽":"형변환\n(Type Casting)","키워드":"묵 자 작 큰 떠 인\n명 직 인 플","도식":null,"정의":"프로그래밍에서 자료형을 다른 형태로 암시적, 명시적 변경하는 기법","내용":"묵시적 : 컴파일러가 자동 변환, 작은 타입 > 큰 타입으로\n- double a = 3; \/\/ int 3이 더블로 자동 변환됨\n- Cat cat = new Cat(); Animal animal = cat;\n명시적 : 프로그래머가 직접 변경(자식 type 함수도 쓰려고)\n- int b = (int) 10.0; \/\/ float 10이 int로 변경됨\n- Cat cat = (cat) animal;"},{"토픽":"SW 아키텍처 설계 전술","키워드":"결 전 수\n\n가 성 변 보 시 사","도식":null,"정의":"품질속성 시나리오의 '응답'을 제어하는데 영향을 주는 설계 결정 사항들","내용":"결함 > 전술 > 수정 \/ 이런 설계를 모은게 아키텍처 패턴\n\n가용성 : 결함 탐지(ping), 복구(롤백), 방지\n성능 : 자원 요구\/관리\/조정\n변경용이성 : 변경 지역화 \/ 파급효과 방지 \/ 바인딩 시점 연기\n보안 : 저항\/탐지\/회복\n시험용이성 : I\/O, 내부감시\n사용편의성 : 런타임, 설계시점"},{"토픽":"SW 아키텍처 드라이버","키워드":"드 설 문가","도식":null,"정의":"아키텍처 설계를 위해 품질 시나리오를 기반으로 도출한 요구사항","내용":"아키텍처 드라이버 > 아키텍처 설계 > 문서\/가이드라인"},{"토픽":"ISO\/IEC\/IEEE 42010","키워드":"근 대 규 뷰 포\n시 아 기 모 이 관","도식":null,"정의":"다양한 SW 설계 및 소통 위해, SW 아키텍처 표현 및 아키 간 관계를 표준화한 메타 모델","내용":"아키 표현 : 근거, 대응관계, 대응관계 규제, 뷰, 뷰 포인트\n\n구성 : 대상 시스템, 아키, 아키 기술(묘사), 이해관계자,\n관심사(시스템 목적\/기능\/구조 등), 아키 모델"},{"토픽":"아키텍처 구축 절차","키워드":"요 분 설 시","도식":null,"정의":null,"내용":"요구 분석 > 아키텍처 분석 > 설계 > 검증\/승인(시험)\n- 아키 분석 : 품질 속성 시나리오, 품질 요소 도출\n- 설계 : 모델 선택"},{"토픽":"인프라 아키텍처","키워드":"집 분 직 평 지\n\n직 2 3\n평 샤 파 공","도식":null,"정의":"T 인프라 아키텍처는 서버, 네트워크, 등 하드웨어부터 소프트웨어까지 IT운영에 필요한 제반 사항을 의미","내용":"집약형 : 하나의 인프라\n분할형 : 대형컴퓨터(메인프레임 aka 기간계)\n수직형 : 2Tier(클서), 3Tier(프리젠테이션-애플리케이션-데이터)\n수평형 : 단순수평(샤딩\/파티셔닝), 공유형\n지리분할형 : 스탠바이, 재해대책"},{"토픽":"금융권 아키텍처","키워드":"기 계 운 정 대","도식":null,"정의":null,"내용":"기간계 : 기존 사용 시스템\n계정계 : 이용자의 업무 처리(입금, 출금, 대출 등) \/ 가장 거대한 시스템, 문제 발생시 치명적\n운영계 : OLTP(Online Transaction Proccessing), 실시간 처리\n정보계 : 분석, OLAP(Online Analysis Processing), DM\/DW\n대외(외부\/채널)계 : 대내외망 연결, ATM,CD"},{"토픽":"SW 아키텍처 패턴","키워드":"정 문 해\n레 블 브 엠 발 클 이","도식":null,"정의":"SW 비가시성 해결 및 개발 효율 위해, 구조 설계 시 반복되는 문제 해결책을 정형화한 패턴","내용":"스키마 : 정황(문제 발생시키는 상황) > 문제 > 해법\n종류 : Layer, 블랙보드, 브로커, MVC, PubSub(발행\/구독), 클서, 이벤\n* 시스템 구조 BP 모음!\n* 고객이 생각 없어도 이거 갖고 고객과 소통하기 좋음"},{"토픽":"Layer 아키텍처","키워드":"프 앱 데","도식":null,"정의":"각 서브시스템이 계층이 되어 하위층 제공 서비스를 상위층 시스템이 사용하는 구조","내용":"프레젠테이션 계층 : 인터페이스\nApplication\/비즈니스 계층 : 서버(트랜잭션 처리)\n데이터 계층 : DB"},{"토픽":"Blackboard (Repository) 아키텍처","키워드":"공 독 통","도식":null,"정의":"시스템의 여러 구성요소가 공유 데이터 저장소로 데이터 교환하는 구조","내용":"장점 : 대용량 데이터 공유, 서브시스템 간 독립, 통합 용이,\n저장소 하나라 관리 용이\n단점 : 저장소 분산 어려움"},{"토픽":"Broker 아키텍처","키워드":null,"도식":null,"정의":"컴포넌트-컴포넌트 간 통신 시 브로커가 클라이언트 요청 값을 분석해 서버 컴포넌트에 전달, 그 결과를 전달하는 구조","내용":"client 1, 2, 3 - servant proxy 1, 2, 3 - broker -\nbroker - servant proxy 1, 2, 3 - server 1, 2, 3\n* client랑 서버 각각 사이드카 패턴 비슷하게 그려서 연결"},{"토픽":"MV 패턴 시리즈","키워드":"씨 피 븜 인","도식":null,"정의":null,"내용":"Model : data 생성, 업데이트 \/ View : UI 또는 화면 표시\n표현 로직(GUI)과 비즈니스 로직(DB 검색 등) 구현 시\n데이터와 UI는 필수이므로 M-V는 당연히 의존성 생김\n> 로직 복잡해지면 의존성 ↑ > 유지보수 어렵 > 패턴들 등장\n\nMVC \/ MVP \/ MVVM \/ MVI"},{"토픽":"MVC\n(Model View Controller)","키워드":"인 컨","도식":null,"정의":"시스템을 Model, View, Controller 3가지로 구분, 요청을 받는 부분과 요청 처리 부분을 분리한 구조","내용":"모든 입력은 컨트롤러로 > 컨이 모델 업뎃\n> 업뎃 결과 따라 컨이 뷰 선택 > 모델이 뷰 업뎃\n> View 업뎃 위해선 M-V 의존, 단순하나 유지보수 어렵\n* 뷰는 여러 개라서 컨트롤러는 1:N 관계에서 뷰를 선택만 함"},{"토픽":"MVP\n(Model View Presenter)","키워드":"인 뷰","도식":null,"정의":"MVC에서 파생된, 모델과 뷰 간의 의존성이 없는 아키텍처 패턴","내용":"모든 입력은 뷰로 > 프레젠터가 입력에 해당하는 모델 업뎃\n> 뷰 업뎃 > 프레젠터는 해당 뷰 참조(1:1)\n> 프레젠터가 M, V 사이에서 관리해 MV 의존성 없음\nbut V와 P가 1:1이라 VP 의존 크고 필요 클래스 개수가 많음"},{"토픽":"MVVM\n(Movel View ViewModel)","키워드":"인 뷰","도식":null,"정의":"MVC에서 파생된, 컨트롤러-뷰 의존성도 고려해 각 구성요소가 독립적으로 작성 및 test 되는 패턴","내용":"모든 입력 V > VM이 해당 표현로직 처리, 뷰에 data 전달\n> 뷰는 이용할 VM 선택, 바인딩해 업뎃 받음 \n> M 변경되면 해당하는 VM 이용하는 뷰가 자동 업뎃\n* VM은 뷰 참조 X라 독립적(1:N), 그러나 VM 설계 어려움"},{"토픽":"MVI\n(Model View Intent)","키워드":null,"도식":null,"정의":"JavaScript 생태계 기반, 능동적 컨트롤러 대신 Reactive한 Intent 활용한 패턴","내용":"입력 Intent로 > I는 M이 처리해야 될 동작 제공\n> 모델은 뷰에 표시할 새로운 모델 생성 > 뷰는 그 모델 표시\n* 단방향, 불변성 data로 상태 예측 가능, 서로 의존 없음\nBut, RxJava와 같은 Observable한 외부 library 이용해야"},{"토픽":"Publish-Subscribe 아키텍처","키워드":"퍼 서 섭","도식":null,"정의":"시스템 구성요소들을 메시지 제공자\/사용자로 구분, 이벤트로 동적 상호작용 구조","내용":"Publishers > Pub\/Sub 서버 > Subscribers\n장점 : 동적 관계 확장, 모듈 간 결합도 낮음\n단점 : 메시지 유실 가능, 보안성 강화 필요"},{"토픽":"클라이언트-서버 아키텍처","키워드":null,"도식":null,"정의":"자원 사용(사용자)과 자원 저장(서버)을 분리시킨, 1서버-다수 클라이언트 구조","내용":"클라이언트 요청 > 서버 서비스 제공\n서버는 요청올 때까지 대기\n이메일, 문서공유, 은행 등\n단점은 오버헤드 발생"},{"토픽":"이벤트 중심 아키텍처","키워드":"제 채 엔","도식":null,"정의":"독립 시스템 간 이벤트 생성\/발행\/전송, 이벤트 수신 모듈이 처리 구조(MSA 구조)","내용":"Event Generator > Event Channel > Processing Engine\n\n이벤트 : IoT센서값, 클릭\/키보드\/터치, 시스템 상태변화 등\n중재자(Mediator) : Orchestrator\n브로커(Broker) : Kafka, msg Broker\n\n[중재자] : Spring Integration, Apache Camel, Mule ESB\n[브로커] : Apache Kafka, ActiveMQ, HornetQ"},{"토픽":"클린 아키텍처","키워드":"엔 유 컨 인","도식":null,"정의":"변화 유연\/유지보수 등 위해 변경 가능성 높은 UI와 적은 Entity 간 의존성 분리한 4계층 아키텍처","내용":"Entity > Use Case > Controller > Interface (안 > 밖)\n바깥은 안중요(세부), 밖에서 안으로 data 전달(의존성 룰)\nEntity : 핵심, ID로 구별, 영구 보관 가능, 외부에서 생성 가능\nUse Case : 비즈니스 로직 \/ 컨트롤러 : G\/W, 프레젠터, 뷰"},{"토픽":"모놀리식 아키텍처","키워드":"액 일 빌 배 변","도식":null,"정의":"SW의 모든 구성요소가 한 아키텍처에 통합 되어 있는 전통적 단일체 구조","내용":"트랜 ACID 지원, 일관성 굿, but 긴 빌드\/배포, 변화에 취약\n> SOA(서비스 지향, 미들웨어(ESB)로 연결, 미들 SPOF)\n> MSA(분할, 빠른 빌드\/배포)\n모놀 : 여행 전체 \/ SOA : 숙박,교통,식사 \/ MSA : 결제,검색"},{"토픽":"2PC\n(2 Phase Commit)","키워드":"R P C D","도식":null,"정의":"모놀리식 아키텍처에서 분산 트랜잭션의 일관성을 보장하는 기법","내용":"Request to Prepare > Prepared > Commit > Done\nbegin(읽기, 쓰기) > end > prepare > commit\ncoordinator가 node들에게 prepare을 물어봄\n한 트랜이라도 prepare 실패하면 begin으로 롤백\nprepare가 완전히 성공해서 커밋 시작하면 끝까지 가야함\nprepare 완료 후 커밋 시도 시 실패하면 관리자가 해결"},{"토픽":"SOA\n(Service Oriented Architecture)","키워드":"통 조 서 디\n\n솝 들 띠 이","도식":null,"정의":"비즈니스 로직의 재사용 통한 비즈니스 Agility를 확보하며 전체 서비스 단위 배포 구조","내용":"통합 UI ↔ 서비스 조합 ↔ 서비스 1,2,3 ↔ DB1,2,3\n\n서비스 공유 지향(MSA는 공유 최소화)\n공통의 서비스를 ESB(미들웨어)로 연결 > SPOF 문제\n통신 : SOAP, WSDL, UDDI, ESB"},{"토픽":"MSA\n(Micro Service Architecture)","키워드":"API GW\nREST API","도식":null,"정의":"빠른 배포 및 개발 적용으로 비즈니스 Agility 확보하며 독립 개별 서비스 배포 구조","내용":"별도 UI ↔ 별도 API(REST) ↔ 별도 서비스 ↔ 별도 DB\nAPI GW : 로드밸런싱, 인증\/로깅, Restful API\n* 내부 간 통신도 다 G\/W 통하므로 SPOF 발생 가능\n트랜잭션 ACD는 SAGA 패턴으로 해결(I는 해결 힘듦)\npolyglot 영속성 : 서비스별 다른 DB 사용(RDB, NoSQL 등)"},{"토픽":"Client Side Service Discovery","키워드":"클 레 마","도식":null,"정의":"MS의 네트워크 위치를 찾고 로드밸런싱하는 역할을 Client가 담당하는 서비스 디스커버리 패턴","내용":"구성 : Client ↔ Registry ↔ Micro Services\nMS(Micro 서비스)들이 서비스 Registry에 서비스 주소 등록\n> Client가 Registry에 목표 서비스 주소 요청\n> 주소 받아서 목표 서비스 호출"},{"토픽":"Server Side Service Discovery","키워드":"클 로 레 마","도식":null,"정의":"서버 측 Proxy 서버 이용한 서비스 디스커버리 패턴","내용":"구성 : Client ↔ 로드밸런서(Proxy) ↔ Registry ↔ Micro\nMS들이 서비스 Registry에 서비스 주소 등록\n> Client가 서버의 로드밸런서(Proxy) 호출\n> 로드밸런서가 Registry에서 서비스 주소 검색, 클라에 줌\n> Client가 주소 받아서 목표 서비스 호출"},{"토픽":"클라우드 네이티브 APP 개발","키워드":"\n구 통 인 프\n엠 에 컨 애","도식":null,"정의":"클라우드 컴퓨팅 환경에서 DevOps, Agile 방식을 통해 MSA 기반으로 속도와 유연성에 중점을 둔 개발 방식","내용":"전통 : 온프레미스, 서버 인프라, 서버 수직 확장, 수동 배포\n클라 : 클라우드, 컨테이너 인프라, On-demand 수평 확장\n\n4요소\n1) 구조-MSA\n2) 통신-AP\n3) 인프라-컨테이너(도커, 스웜)\n4) 프로세스-애자일(DevOps, CI\/CD)"},{"토픽":"서비스 메시\n(Service Mesh)","키워드":"SPOF 해결\n\n컨 데\n\n디 로 헬","도식":null,"정의":"중앙집중 구조 한계 극복 위해 서비스 간 직접 호출 없이 내부 Proxy를 통해 호출하는 분산 아키텍처","내용":"Control Plane : 서비스 메시 컨트롤러\n- proxy에 설정값 전달\nData Plane : Sidecar Proxy로 모든 서비스 간 통신\n- 서비스 디스커버리, 로드밸런싱, 헬스 체크 등"},{"토픽":"EDM\n(Event Driven MicroService)","키워드":"버스","도식":null,"정의":"MSA가 적용된 시스템에서 이벤트 발생 시 해당 log 보관, 비동기 통신으로 시스템을 통합하는 아키텍처","내용":"Pub\/Sub 모델(카프카 비슷), 각 서비스가 Event Log 구독\nEvent Service Bus로 비동기 통신, Broadcasting함\nNon-Blocking 모델로 장애 격리\n반정규화 기반 Data 처리 & App 레벨 롤백(SAGA 처럼)"},{"토픽":"카프카\n(Kafka)","키워드":"프 카 컨","도식":null,"정의":"대규모 data 분산 처리 시 data를 큐로 버퍼링해 목적지에 안정적 전송하는 Pub-Sub 모델의 미들웨어","내용":"Producer : 브로커의 특정 큐에 msg 생성해 줌\nKafka cluster(broker) : 전달받은 msg를 Topic별 큐에 분류\nConsumer : 브로커에게서 구독하는 토픽의 msg를 Pull 함\n\nTopic : Publish 된 msg들의 카테고리(msg 구분 이름)\n성능향상 기법 : Zero Copy, Partitioning"},{"토픽":"헤드리스\n아키텍처","키워드":"프 게 백 디","도식":null,"정의":"고객이 보는 프론트엔드와 백엔드를 분리해 필요 기능은 API로 불러오는 App 아키텍처","내용":"프론트엔드 ↔ API G\/W ↔ 백엔드 ↔ DB, Data Lake\n\n- 프론트엔드 : 모바일 앱, 반응형 웹, 이커머스, 소셜미디어\n- 백엔드 : 검색엔진, MSA, 서비스, 주문\/결제, log, 모니터링\n* CRM, 커머스, POS 등 연동, 옴니채널 등 일관적 경험 제공"},{"토픽":"컴포저블 시스템","키워드":"컴 모 디","도식":null,"정의":"헤드리스 아키텍처 개선, 모듈화와 디커플링으로 중간\/백엔드 유연성 확보한 아키텍처","내용":"헤드리스는 프론트 엔드 사용자 경험 맞춤화\n컴포저블은 플랫폼 및 내부 모듈 다양화로 백엔드 기능 선택\n- 모듈화, 디커플링 등으로 구현"},{"토픽":"SAGA 패턴","키워드":"보가 피 재 보\n주 결 확 취","도식":null,"정의":"MSA의 polyglot 때문에 2PC 적용 불가하기에 비동기 메시지를 이용해 data 동기화하는 매커니즘","내용":"보상가능 트랜 : 롤백 가능한 트랜잭션(주문)\n피봇 트랜 : 사가의 진행\/중단 결정 트랜(결제 승인 > 이게\n성공하면 진행, 실패하면 주문 data도 롤백)\n재시도 가능 : 피봇 직후 트랜, 반드시 성공함(주문 확정)\n보상 트랜 : 피봇 실패 시 보가트 Undo하는 애(주문 취소)"},{"토픽":"SAGA 패턴 종류","키워드":"코 오 ","도식":null,"정의":null,"내용":"(우)Choreography : 서비스별 각각 트랜잭션 처리 엔진\n(좌)Orchestration : 하나의 조정자가 트랜 처리 담당"},{"토픽":"SAGA 패턴 한계","키워드":"L D","도식":null,"정의":"I 보장 불가","내용":"복수의 사가가 수행될 때 한 사가의 특정 트랜잭션이 커밋한\n변경분을 다른 사가가 참조할 수 있다\n> 갱신 손실, 더티 리드 등 발생"},{"토픽":"SAGA 패턴 한계\n극복 대책","키워드":"시 다 교 버","도식":null,"정의":"격리성 보장 방법","내용":"시멘틱 락 : APP 수준 lock, 보가트가 생성\/수정하는\n레코드에 Pending flag 세팅, 아직 완벽한 커밋 전임을 표시\n다시 읽기 : write 전 변경 확인, 변경 시 W 중단, 트랜 재시작\n교환적 업뎃 : 인출\/입금처럼 업뎃, 롤백을 교환적으로 구성\n버전 관리 : MVCC 같이 해서 동시성 제어"},{"토픽":"콘웨이법칙","키워드":"해결책 : 디 런 역 스","도식":null,"정의":"시스템을 설계하는 조직은 어떤 조직이든 그 조직의 의사소통 구조를 닮은 구조를 가진 시스템으로 설계한다.","내용":"콘웨이 해결책 : Clean State(SW 특성파악 후 맞춤조직 구성)\n: Define(비즈니스 미션 정의) > Learn(비즈니스 오너한테\n비즈니스 프로세스 배워라) > 역공학(미션에 맞게 프로세스\n재구성) > Structure(그 프로세스 위한 IT조직 구성)\n\nCross Functional Team 구성"},{"토픽":"디자인 패턴","키워드":"컨 문 해","도식":null,"정의":"SW 설계 시 공통적\/고질적 문제 발생 시의 해결책 모아 정형화한 패턴 (선배 개발자들의 지혜)","내용":"컨텍스트(문제 기반 정황) > 문제(이슈) > 해결(템플릿)\n* 아키 패턴이 '시스템 구조' BP라면 이건 '모듈' BP\n* 아키 : 요구 분석, 상위 설계 시 \/ 디자인 : 상세 설계 시"},{"토픽":"GoF 디자인 패턴","키워드":"생 구 행","도식":null,"정의":"언어에 독립적이며 모든 프로그래밍 언어에 적용해 생성\/구조\/행위로 구분해 패턴을 정의, 개발","내용":"생성패턴 : 인스턴스 생성 추상화로 유연성 \/ 클래스 캡슐화\n\n구조패턴 : 더 큰 구조 형성 위해 클래스+객체 합성법 제공\n\n행위패턴 : 객체행위를 조직화, 관리, 연합하고 객체\/클래스\n\n연동에 대한 유형 제시"},{"토픽":"생성 패턴","키워드":"팩\n싱 프 앱 팩 빌","도식":"\"팩토리 클래스에서 싱글 프로가 추상적 공장을 짓는다\"","정의":"인스턴스 생성 절차 추상화, 사용 클래스 정보를 캡슐화 해 생성을 통한 유연성 제공 패턴","내용":"클래스 : Factory Method\n객체 : Singleton, Prototype, Abstract, Factory, Builder"},{"토픽":"구조 패턴","키워드":"어\n어 브 컴 데 패 플 프","도식":"\"어댑터 클라스 보니 어데 브릿지에 컴 데코를 패카 날라서 프락\"","정의":"더 큰 구조 형성 위해 클래스+객체를 합치고 I\/F 구현 시 상속 기법 사용 등 객체 조직화 방식 제공 패턴","내용":"클래스 : Adaptor(Class)\n객체 : Adaptor(Object), Bridge, Composite, Decorator,\nFacade, Flyweight, Proxy"},{"토픽":"행위 패턴","키워드":"인 템\n스 옵 비 메 이 커 스 미","도식":"\"State의 관찰자 방문자가 메멘토 반복 명령을 전략적으로 중재\"","정의":"객체 간 연결 방법 중점 고려, 객체 행위를 관리, 연합하고 객체\/클래스 간 연동 제시 패턴","내용":"클래스 : Interpreter, Template Method\n객체 : State, Observer, Visitor, Memento, Iterator,\nCommand, Strategy, Mediator"},{"토픽":"팩토리 메소드 패턴","키워드":"프 콘프\n크 콘크","도식":null,"정의":"객체 생성 위한 I\/F를 정의 시 클래스의 인스턴스 생성여부는 서브 클래스에서 결정하는 패턴","내용":"Product(팩토리 메소드가 생성하는 객체의 I\/F), ConcreteProduct(I\/F product 상속한 구체적 객체),\nCreator(팩메 선언 class), ConcreateCreator(콘프 생성)\n팩메가 객체 생성 처리, 객체 생성 코드를 캡슐화"},{"토픽":"옵저버 패턴","키워드":"서 옵 콘서 콘옵","도식":null,"정의":"객체의 1:N 의존 관계 정의, 객체 상태 변경 시 의존성을 가진 다른 객체는 변화 통지 받고 자동 갱신 패턴","내용":"Subject(상태변경 시 옵저버에 전달), Observer(S당 N개)\nConcreteSubject(S 상속), ConcreteObserver(O 상속)\nPush(S->O), Pull(get으로 subject 상태 알아냄)\nPub-Sub, Mediator, Singleton 등 비슷 \/ 센서 data 수집"},{"토픽":"사이드카 패턴","키워드":"아이 씨 믹 갤 파 인","도식":null,"정의":"컨테이너 변경 없는 기능확장 위해 기본 APP 외의 추가 기능 별도 APP으로 구현하는 클라우드 디자인 패턴","내용":"Istiod : 서비스 디스커버리, 설정관리, 인증\nCitadel : 보안 기능, 사용자 인증(앤드 유저 인증 강화)\nMixer : 모니터링 수집, 액세스 컨트롤, 정책 관리\nGalley : 설정 검증, 분배, 프로세싱\nPilot : Envoy 설정 관리, Envoy 호출 서비스 디스커버리\nEnvoy : 로드밸런싱, TLS 인증서 처리, 프록시, 헬스체크"},{"토픽":"CQRS\n(Command Query Responsibility Segregation)","키워드":"분 전 동","도식":null,"정의":"Data 저장소에 대한 읽기 \/ 업데이트 작업을 APP 단에서 분리하는 패턴","내용":"요청 분리(명령, 쿼리) > 요청 전달(읽\/쓰 DB) > Data 동기화\n- 분리 : 사용자 요청을 명령(커맨드) \/ 쿼리로 분리\n- 전달 : 요청 Forward(sql 변환, QEP) \/ WAS-DB 연계\n- 동기화 : 읽\/쓰 DB 간 Event Sourcing 패턴(이벤트 버스)\n\n* Kafka는 CQRS 효율적 활용(커맨드 \/ 쿼리 큐 분리)"},{"토픽":"아키텍처 평가","키워드":"시 뮬 수 경","도식":null,"정의":"SW 아키텍처가 사용자가 요구하는 품질특성을 만족하는지 검증하는 평가","내용":"시나리오 : SAAM, ATAM, CBAM\n\n시뮬(실험적 평가) : 프로토타입, BMT\n\n수학적 : 수치 기반 평가 \/ 무중단 시간, 장애 횟수, 자원량 등\n\n경험 : 델파이, 전문가 평가 \/ 비정형 평가"},{"토픽":"SW 아키텍처 품질속성 시나리오","키워드":"유 자 대 환 응 측\n기 신 사 효 유 이 보 호","도식":null,"정의":"SW의 품질 준수 검증 위한 아키텍처 평가 시나리오","내용":"자극의 유발원 -자극-> 대상\/환경 -응답-> 응답 측정\n- 환경 : 정상\/저하 모드, 시스템 장애, 비상 동작 모드\n- 응답 : 트랜 처리, 시스템 복구, 연산 수행, data 수정 등\n품질속성 : 기능적합, 신뢰, 사용, 효율, 유지보수, 이식, 보안, 호환"},{"토픽":"SW 아키텍처 정방향 분석","키워드":"초 최 의 고","도식":null,"정의":"SW의 품질특성 충족 여부를 개발단계 이전에 아키텍처 수준에서 분석 기법","내용":"프로젝트 초기 \/ 위험 최소화 \/ 의사소통 기반 \/ 고품질\n\nSAAM : 변경 용이성, 기능분석\nATAM : 속성 간 trade off\nCBAM : 경제성, 투자가치\nADR : 상세설계, 응집도, 디자인\nARID : 품질요소, 초기 일부 구조, 시나리오+설계 검토 혼합"},{"토픽":"ATAM","키워드":"소 분 시 결","도식":null,"정의":"SW 아키텍처 평가 위해 속성의 Trade-off 관계 고려해 프로젝트 초기에 평가하는 모델","내용":"소개(ATAM, 비즈니스 드라이버, 아키텍처)\n> 조사\/분석(아키텍처 식별\/분석, 품질속성 유틸리티 트리)\n> 시험(브레인스토밍, 품질 속성 시나리오 우선순위 매기기)\n> 결과 보고"},{"토픽":"CBAM","키워드":"시 효 이 선","도식":null,"정의":"SW 아키텍처의 품질속성 만족 여부 판단 위해 ATAM 수행 후 경제성 평가모델","내용":"시나리오 결정(시나리오 수집\/정제\/우선순위 결정)\n> 효용\/비용 곡선 작성\n> 이익 계산(효용, 이익, NPV)\n> 선정과 검증(ROI 계산, 순위 결정, 비용\/일정 고려)"},{"토픽":"ARID","키워드":"시 브 의 부","도식":null,"정의":"SW 아키텍처 초기 단계에 시나리오와 설계를 혼합해 일부 구조만으로도 평가 가능한 모델","내용":"시나리오, 브레인스토밍, 의사코드 검토, 부분평가\n- 부분평가 : 아키텍처가 완전히 구성되기 전에도 평가 가능"},{"토픽":"SW 아키텍처 역방향 분석","키워드":"역 정 동 바 시","도식":null,"정의":"프로그램 소스를 분석하여 다시 아키텍처 구조로 재생산하는 아키텍처 분석 기법","내용":"실제 개발 진행 중에 개발 잘 되고 있는지 중간마다 점검\n의존성 적은 코드 가능, 정량적인 관리, 코드 이해도 향상\n\n종류 : 역공학, 정적\/동적 분석, 바이너리 분석, 시멘틱 분석"},{"토픽":"기업 시스템 통합 기법","키워드":"EAI ESB API","도식":null,"정의":"기업의 서비스간 연동을 위한 시스템 통합 솔루션","내용":"시스템 분리(P2P 직접 통신) > EAI > ESB > API GW\nEAI : 이기종 연동, EAI허브\/어댑터\/메시지 큐\/데이터 변환\nESB : SOA 지원, SOAP(XML\/HTTP) 표준, Runner(경로)\nAPI : MSA 지원, REST(HTTP\/JSON), API 토큰\/라우팅\/로깅"},{"토픽":"Open API","키워드":"아 데 인","도식":null,"정의":"기업\/정부 데이터를 언제, 어디서나, 누구든 쉽게 이용할 수 있게 하는 사용자 중심의 인터페이스","내용":"아키텍처 : SOAP(XML), REST(get, put, post, delete)\n데이터 형식 : XML(태그\/엘리먼트\/속성), JSON(이름\/값)\n사용자 인증체계 : Oauth 2.0(RFC6749, 접근 토큰)"},{"토픽":"SOAP\n(Simple Object Access Protocol)","키워드":"엔 헤 바 폴\n공 떠 유 떠 사","도식":null,"정의":"xml 데이터를 사용해서 헤더와 바디 생성 후 text\/xml 형태로 정보 전달하는 HTTP 프로토콜","내용":"Envelope : 모든 SOAPmsg 기초, 헤더(선택)\/바디(필수)포함\n헤더, 바디, 폴트(Fault, body 하위 요소, 오류 보고)\n공급자 > WSDL(XML) > UDDI 검색엔진 > WSDL > 사용자\n복잡, 자체 보안 기능, 표준, XML만 가능, 캐시 X, ACID 준수"},{"토픽":"REST\n(Representational State Transfer)","키워드":"겟 포 풋 패 딜\n여 캐 쓸(SSL)","도식":null,"정의":"컴퓨터들이 NW 통해 통신할 수 있게 해주는 아키텍처 스타일","내용":"get(조회), post(생성), put(수정), patch(일부수정), delete\n일반 txt, HTML, XML, JSON 등 여러 포맷 OK, 캐시O,\nACID 준수 내용 없음,\nSSL\/HTTPS 지원(SOAP는 WS-Security랑 SSL)\n\n구성요소 : 자원(URI 있는 data), 메시지(요청\/응답), 행위"},{"토픽":"XML","키워드":"느 파 텍 숫 이 차","도식":null,"정의":"트리구조(tag 구조) 데이터 형식","내용":"느림, XML Parser로 파싱, txt\/숫자\/이미지\/차트\n\n<person>\n<name>홍길동<\/name> <age>22<\/age>\n<\/person>"},{"토픽":"JSON\n(JavaScript Object Notation)","키워드":"빠 이 텍 숫","도식":null,"정의":"XML의 가독성 저하 및 용량 문제 해결 위해 Key-Value 구조 사용한 개방형 표준 파일 형식","내용":"빠름, Eval()로 파싱, txt\/숫자\n\n{ \"students\" : [\n {\"name\" : \"홍길동\", \"age\" : 22},\n {\"name\" : \"Julie\", \"age\" : 23} ] }\n\n자바스크립트 사용으로 JSON 많이 쓰나, 그래픽\/문서는 XML\n공백\/개행 무시해 빠른 데이터 직렬화 통한 data 교환에 굿\n* 주석 사용 불가, 큰 따옴표 필수라 설정파일 불가 > YAML"},{"토픽":"YAML\n(YAML Ain't Markup Language)","키워드":"들 샵 콜 배 대 공","도식":null,"정의":"들여쓰기와 공백을 이용해 사람이 쉽게 읽을 수 있으나 파싱\/생성은 JSON보다 느린, 주로 설정파일의 data 형식","내용":"students :\n- name : Mark\n   major : Math\n   age : 20\n- name : Julie\n\n들여쓰기로 하위 Property 표현(계층 구조 표현) \/ 주석은 #\nK-V는 JSON과 같이 콜론 씀 \/ 배열은 대시(-)와 공백 사용"},{"토픽":"OAuth 2.0","키워드":"앱 오 인 리\nRFC 6749","도식":null,"정의":"제 3의 앱이 유저 대신 자원 접근해 서비스 요청 가능한 Open API의 인증체계","내용":"Client App(트립비토즈) > Resource Owner(사용자)\n> 인증 서버(네이버), 토큰 발급 > Resource 서버(네이버)\n\nSSL(핸쉐\/change ciper\/alert\/ssl record) \/ IPSEC\nOpen API 사용 시 계정 노출 방지 위해 OAuth2.0로 인증"},{"토픽":"OAuth 2.0\n취약점 보안 강화","키워드":"씨 스 입 블\n커 리 유 풀","도식":null,"정의":"인증은 편리하나 구현이 복잡하여 CSRF, Covert Redirect 취약","내용":"CSRF : State 검증 미흡 시\n- CSRF 링크로 유저 접속 시 공격자 계정이 연동됨\n- State 토큰 필수 요청, 입력값 검증, 블랙리스트 필터\nCovert Redirect : Redirect URI 검증↓(일부 경로만 검증)\n- Auth Code가 공격자 URI로 전송됨\n- 인증서버가 Redirect URI를 Full Path 검증\n외에도 DoS, 스니핑, 인증 미흡(2 팩터로 대응) 등 대응"},{"토픽":"OAuth Grant Type\n(인증방식)","키워드":"권 암 패 클","도식":null,"정의":"RFC 6749(OAuth 2.0 Framework)에서 소개된 4가지 방식\n\nAuthorization Code\nPKCE\nClient Credentials\nDevice Code\nRefresh Token\nLegacy: Implicit Flow\nLegacy: Password Grant","내용":"권한코드 승인\nResource Owner 인증한 권한 코드로 AccessToken을 요청\n\n암시적 승인\n추가 절차 없이 Resource Owner 인증 후 Access Token 발급\n\n패스워드 자격 증명(두 시스템, 도메인 신뢰관계일때)\n사용자 ID \/ Password를 가지고 인증서버에 Access Token 요청\n\n클라이언트 자격 증명\nClient와 Resource Onwer 같은 주체 \/ 바로 Access Token 발행"},{"토픽":"UML\n(Unified Modeling Language)","키워드":"개 클 유 시\n\n정 동 기","도식":null,"정의":"SW의 시각화를 위해 객체, 관계 등을 도형으로 표현하는 표준화 된 통합 모델링 언어","내용":"개념, 클래스, 유즈케이스, 시퀀스 다이어그램\n\n정적 : 클래스, 컴포넌트, 디플로이먼트, 패키지 다이어그램\n동적 : 시퀀스, 콜라보레이션, 상태, 인터액션, 타이밍 다이어그램\n기능 : 유즈케이스(정적), 액티비티(동적) 다이어그램"},{"토픽":"개념적 객체 모델","키워드":null,"도식":null,"정의":"요구사항 분석 통해 객체와 관계를 나타낸 모델","내용":"객체 : Player, 주사위 게임, 주사위(2개)\n관계 : Play, Rolling, Include(게임 1개당 주사위 2개 포함)"},{"토픽":"클래스 다이어그램","키워드":null,"도식":null,"정의":"객체를 정의하고, 객체 간 정적인 관계를 다양한 방식으로 표현한 다이어그램","내용":"class: 이름, attribute(-속성:타입), operation(+메소드:타입)\nstereo type : UML이 제공하는 추가 확장요소(《interface》)\n접근제어자 : public(+), private(-), protected(#), 패키지(~)\n관계: 연관(실선), 의존(점선+열린화살), 상속(위로 닫힌화살)"},{"토픽":"유스케이스 다이어그램","키워드":null,"도식":null,"정의":"시스템 기능 및 객체 등을 사용자의 관점에서 표현하는 다이어그램","내용":"Use Case : 시스템이 제공하는 서비스\nActor : 시스템과 상호작용하는 사람, 사물\n시스템 : 전체 시스템 영역(Use Case + Actor)\n관계 : Use Case와 Actor간 관계 \/ 요소 간 상속 \/ 그룹화"},{"토픽":"시퀀스 다이어그램","키워드":null,"도식":null,"정의":"객체 간의 메시지 순서를 시간의 흐름에 따라 표현하는 다이어그램","내용":"활성객체 : 시스템의 행위자, 객체 \/ 생명선 가짐(점선)\n제어사각형 : 객체가 정보 처리 or 대기 중(생명선에 네모칸)\n메시지 : 객체 간 통신(화살표 위에 메시지 표시)\nmsg 전달 : 동기-꽉찬 화살 \/ 비동기-열린 화살 \/ 반환-점선"},{"토픽":"UML 4 + 1 View","키워드":"유 리 피 디\n(U L I P D)","도식":null,"정의":"SW 아키텍처를 서로 다른 관점에 따라 4+1개로 분류한 뷰 모델 (유 로 프 디 임)","내용":"Usecase : 기능, 요구사항(다른 뷰는 이거 해결 위한 영역)\nLogical : 내부 모듈 간 논리 구조(Class Diagram)\nProcess : 시스템 순차 흐름(Activity Diagram)\nDeployment : 시스템 H\/W와 S\/W 간 관계 정의\nImplementation : 독립 실행되는 컴포넌트와 그들 간의 관계"},{"토픽":"함수형 언어","키워드":"계 왓 범 람 선","도식":null,"정의":"시스템을 함수의 계산으로 보고 상태\/가변data를 멀리하는  동시(병렬) 처리 특화된 선언형 언어","내용":"구현 관점 : 프로그램은 '함수의 계산'으로 구성\n구현 방식 : 'What'에 초점 맞춘 구현\n이론적 배경 : 범주론(모나드 \/ 모노이드), 람다(λ) 계산식\n명령형은 a=3(a에 3 대입) \/ 함수형은 a를 3으로 선언(불변)"},{"토픽":"함수형 언어 구성요소","키워드":"순 익 고","도식":null,"정의":null,"내용":"순수 : 외부에 영향 X, 동일 입력 시 동일 출력\n- function sum(a, b) {return (a+b);}\n익명 : 이름 없이 기능만 수행하는 함수\n- (a, b) > a+b\n고계 : 함수를 인자로 취하는 함수\n- sum(add(a, b)) \/\/ sum 함수 안에 add함수를 인자로\n* Haskell(지연계산), Scala(객체+함수), Erlnag(실시간)"},{"토픽":"프로그래밍 언어 패러다임","키워드":"기 어 절 객 함","도식":null,"정의":null,"내용":"기계어 > 어셈블리 > 절차지향(C) > 객체지향(C++) > 함수형\n- 기계어 : 0x01 \/ 어셈블리 : mov(a, 3)"},{"토픽":"반응형 프로그래밍","키워드":" ","도식":null,"정의":"옵저버, Iterator 패턴 등 기반, 구독자가 data 변화를 감지해 자발적 비동기 처리 기법","내용":"대량 Data 연계 복잡 완화, 폰\/PC\/IoT 등 여러 환경 배포,\n비동기라 구현 간단, Scale Out 유연, 즉각 응답 \/ (예) 엑셀\n구성 : 관찰 대상 \/ 연산자 \/ 구독(원하는 값 통지 시 처리)\na = 10; b = 20; c = a+b; a=20; 이면 c는 30이 아니라 40 됨"},{"토픽":"반응형 프로그래밍 선언문\n(Menifesto)","키워드":"응 탄 유 메\n\n밸 폼 민","도식":null,"정의":null,"내용":"\n가치(Value)\n응답성 : 시스템은 즉각적 응답\n\n형태(Form)\n탄력성 : 장애 시에도 응답 유지\n유연성 : 환경\/처리량과 독립적(작업량 많아도 응답 유지)\n\n의미(Mean)\n메시지 기반 : 비동기 메시지"},{"토픽":"백프레셔\n(Back Pressure)","키워드":"구 섭 데 회","도식":null,"정의":"반응형 프로그래밍에서 빠른 Pub, 느린 Sub 간의 속도 동기화를 위해 Sub가 '요청 시' 전달하는 기법","내용":"Sub이 구독 요청 : Subscribe() \/ 연결 요청\n> Pub이 Subscript 전달 : Subscription() \/ 큐의 토픽 역할\n> Sub이 Data 요청 : Subscription.request()\n> Pub이 Data 회신 : Subscriber.onNext()\n\n빠른 Publisher - 느린 Subscriber 문제를 해결\nPublisher의 일방적 데이터 Push 가 아니라, Subscriber가 처리할 수 있을 만큼의 데이터만 Subscriber의 요청에 의해서 전달\n중간에 Queue 같은게 필요없음(dynamic pull).\n리액티브 스트림에서는 이것을 Subscription 로 제어\nrequest 메소드를 통해 요청량을 조절"},{"토픽":"테스트 7원칙","키워드":"완 결 \/ 초 파 \/ 살 정 오\n\n한 효 품","도식":null,"정의":"수준에 맞는 테스트를 위한 원칙","내용":"완벽한(모든) test 불가 \/ Test는 결함 검증 활동 \/ 초기 수행\n파레토 법칙(20%에 80% 결함 집중) \/ 살충제 패러독스\n정황 의존적(게임\/의료 테스트는 달라야)\n오류부재 궤변(품질 낮으면 발견할 오류도 없음)\n\n한계-완결(MCDC) \/ 효율-초파(동경) \/ 품질-살정오(페어)"},{"토픽":"테스트 표준","키워드":"8 2 119 불러 29 119\n싫오?(15) 오백사 TMI","도식":null,"정의":null,"내용":"IEEE 829\nISO 12119, 29119, 15504\nTMMi, ISTQB(7원칙)"},{"토픽":"ISO\/IEC\/IEEE 29119","키워드":"개 프 문 기 키","도식":null,"정의":"SW 테스트 체계적 절차\/원리, 가이드 지원 목적으로 SDLC 전과정 테스팅 절차와 산출물에 대한 국제 표준","내용":"파트1 : 개념&정의\n파트2 : 프로세스(조직, 테스트관리, 동적 테스트)\n파트3 : 문서화\n파트4 : 테스팅 기법(명세, 구조, 경험)\n파트5 : 키워드 주도 테스팅(소개, 방법, 프레임워크)"},{"토픽":"ISO\/IEC\/IEEE\n33063","키워드":null,"도식":null,"정의":"Test 성숙도 평가 모델","내용":null},{"토픽":"TMMi","키워드":"초 관 정 측 최","도식":null,"정의":"현 조직의 테스팅 평가를 통해 Test 역량 수준 점검 표준\n테스트 프로세스 심사와 개선에 중점을 두고 있는 조직을 지원하기 위한 가장 대표적인 성숙도 모델 ","내용":"Level 1 : 초기\nLevel 2 : 관리\nLevel 3 : 정의\nLevel 4 : 관리\/측정\nLevel 5 : 최적화"},{"토픽":"IEEE 829","키워드":null,"도식":null,"정의":"테스트 케이스 구성요소, 테스트 용이성 등에 대한 표준\n\nSW테스트 문서화 표준, 즉, 테스트 설계 명세와 TC 명세에 대한 기술을 하는 표준","내용":null},{"토픽":"테스트 설계 프로세스","키워드":"29119-2\n\n컨 준 식 완 전 확 작 승 공","도식":null,"정의":null,"내용":"컨텍스트이해 > 테스트 계획 개발 준비 > 리스크 식별 및 분석 > 리스크 완화 접근법 식별 > 테스트 전략 설계 > 원칙 확정 및 일정 수립 결정 > 테스트 계획 작성 > 테스트 계획 승인 획득 > 테스트 계획 공유 및 사용 가능"},{"토픽":"테스트 케이스 생성절차\n(테스트 구현 프로세스)","키워드":"식 컨 커 케 셑 절","도식":null,"정의":null,"내용":"기능세트 식별 > 테스트 컨디션 도출 > 테스트 커버리지 항목 도출 > 테스트 케이스 도출 > 테스트 세트 구성 > 테스트 절차 도출"},{"토픽":"테스트 케이스","키워드":"IEEE 829\n\n식 항 입 출 환 특 의\n\n블 화","도식":null,"정의":"기능\/요구 준수 여부 확인 위해 개발된 입력값, 실행 조건, 예상된 결과의 집합","내용":"구성 : 식별자 \/ 항목(Test Item) \/ 입력값 \/ 출력값 \/ 환경 \/\n특수절차요구 \/ 의존성(Test 케이스 간 의존성)\n\n설계 기법 : 블박 관점, 화박 관점"},{"토픽":"테스트 용이성","키워드":"이안 분단 조작관","도식":null,"정의":"SW를 얼마나 쉽고 효율적이고 완전하게 테스트 할 수 있는지 나타내는 테스트 품질 특성","내용":"이해성(정확한 문서화)\n안정성(실패 잘 극복),\n분해성(모듈은 독립적 test)\n단순성(기능\/구조 단순) \n조종성(출력은 입력의 조합으로)\n작동성(bug 적은 test),\n관찰성(입력 > 출력 가시적 생성)"},{"토픽":"테스트 설계 기법","키워드":"명 구 경","도식":null,"정의":null,"내용":"명세기반 : 동등분할 \/ 경계값 분석 \/ 원인 결과  \/ 상태전에 \/ 결정테이블 \/ 페어와이즈 \/ 유즈케이스\n\n구조기반 : 커버리지(구문 \/ 결정 \/ 조건 \/ 조건결정 \/ MCDC \/ 다중조건 \/ 경로)\n\n경험기반 : 탐색 \/ 분류 \/ 체크리스트 \/ 특성 \/ 오류"},{"토픽":"테스트 커버리지","키워드":null,"도식":null,"정의":"블랙박스 테스트 시 기능, 요구 등 test 수행 정도\/검증 범위 보장 위한 지표","내용":"커버리지 : 단위\/통합\/기능\/인수 test\n코드 Bad Smell 및 코드 품질 검증 X > 코드 커버리지 필요\n테스터의 도메인 역량에 의존 \/ 자동화 도구 적용 어려움"},{"토픽":"소스코드\n커버리지","키워드":"구 결 조 조경 M 다 경","도식":null,"정의":"화이트박스 테스트 시, test 수행 정도 확인 및 적절 테스트 수준 제시 위해 사용하는 지표","내용":"구문, 결정, 조건, 조건\/결정, MC\/DC(변경조건),\n다중조건(MCC, 모든 조합, 커버리지 100%), 경로\n- 오른쪽으로 갈수록 커버리지 높음\n\n대부분 단위 테스트로 제한됨 \/ 자동화 도구 필수"},{"토픽":"MC\/DC\n(Modified Condition \/Decision Coverage)","키워드":"ISO 26262","도식":null,"정의":"각 개별 조건식이 다른 조건식에 영향 받지 않고 전체 조건식 결과에 독립적으로 영향 주는 TC","내용":"조건문 N개일 시 최소 N+1 Case 필요\n- MCC는 조건문 n개일 시 2^n 개 case\nISO 26262 ASIL D\n항공 임베디드 SW표준 DO178B Level A"},{"토픽":"테스트 오라클","키워드":"참 샘 휴 일","도식":null,"정의":"테스트 수행한 결과가 참인지 거짓인지를 판단 위해 미리 정의된 참 값을 대입하여 비교하는 기법 및 활동","내용":"참 오라클 : 전수테스트, 모든 테스트 케이스\n샘플링\n휴리스틱(샘플링 + 휴리스틱) : 확률, 직관, 예상결과\n일관성 : 변경 전후 함수 결과값 같은지 확인"},{"토픽":"테스트 드라이버","키워드":"상향식","도식":null,"정의":"단위\/모듈 시험(통합test)에서 테스트하려는 모듈을 호출하는 가상의 상위계층 SW","내용":"하위 모듈 Test \/ Bottom Up\nData Driven, Single Test 방식\n하위 모듈들 개별 완성도↑, 통합된 상향모듈 완성도 보장 X"},{"토픽":"테스트 스텁","키워드":"하향식","도식":null,"정의":"단위\/모듈 시험(통합test)에서 테스트하려는 모듈에게 호출받아 값을 리턴하는 가상의 하위계층 SW","내용":"상위 모듈 Test \/ Top Down\n미구현 함수\/라이브러리 함수 테스트, 통합 관점 Test\n통합 관점 Test 수행 용이, 하위 모듈들 개별 세부 완성도↓"},{"토픽":"블랙박스 테스트\n(명세기반 테스트)","키워드":"동경 결상 원페유","도식":null,"정의":"프로그램 요구사항 명세서, 매뉴얼 등 기반으로, 구조 참조 없이 기능\/비기능을 사용자 관점 SW 테스트","내용":"동등 분할(결과가 같은 입력값들은 동일 그룹)\n경계값 분석,\n원인-결과 그래프\n상태 전이,\n결정 테이블(행 : 조건 1, 2.. \/ 열 : Case 1, 2.. \/ 칸 : T, F..),\n페어와이즈\n유즈케이스"},{"토픽":"화이트박스 테스트\n(구조 기반)","키워드":null,"도식":null,"정의":"프로그램 내부 구조\/코드 기반 개발자 관점 SW 테스트","내용":"기초 경로 시험(프로그램 논리적 복잡도 기반)\n루프 시험(Loop에 국한해 수행 \/ 초기값, 인덱싱, 루프 경계)\n* 이건 로직 기반이고, 커버리지 기반은 구결조조M다경\n* 알파 테스트(블박은 베타) \/ 개발자 관점 \/ 하위레벨 test"},{"토픽":"경험 기반 테스트","키워드":"탐 분 체 특 오","도식":null,"정의":"이전에 테스터가 다루었던 유사 APP 등의 경험, 직관, 테스터의 기술 능력으로부터 TC 추출 기법","내용":"탐색적 기법 : 경험 기반 Test 우선순위, 시간 제약, 휴리스틱\n분류 트리 : SW를 트리형태로 시각화 > TC 도출\n체크리스트 : 테스트 경험\/노하우 목록화 > 다음에 재활용\n특성 테스팅 : ISO\/IEC 9126 품질모델의 특성 기반 TC 도출\n오류 추정 : 가능한 결함 나열, 추정에 의해 검출 및 수정"},{"토픽":"카오스\n엔지니어링","키워드":"정 가 오 모 검\nOSS로는 카오스 몽키","도식":null,"정의":"복잡한 분산 시스템 환경에서 시스템 신뢰성 확인 위해, 인위적인 카오스 가해 취약점 찾고 보강하는 기법","내용":"정상상태 정의 > 가설 > 오류 주입 > 모니터링 > 가설 검증\n\n* 가설 : 오류 시에도 대조군\/실험군 모두 정상일 것이다\n* 오류 기반의 대조군\/실험군 차이 통해 가설 검증"},{"토픽":"카오스 테스트","키워드":"몽 고 콩\n\n인 존 리","도식":null,"정의":"일종의 성능 테스트로, 무차별적인 부하 속에서 어떤 컴포넌트가 먼저 장애를 일으키는지 확인하는 테스트","내용":"카오스 몽키 : 인스턴스\n카오스 고릴라 : 존\n카오스 콩 : 리전\n\n일반 몽키\/고릴라 테스트와 헷갈리지 말것"},{"토픽":"몽키테스트","키워드":"무 시","도식":null,"정의":"전체 시스템 대상으로 자동화괸 테스트 도구나 스크립트를 이용, 무작위 입력을 제공하여 안정성 및 버그를 찾는 테스트","내용":"무작위성, 엣지케이스 탐색\n\n시스템 테스트\n\n유형 : Dumb, Smart, Briliant\n기법 : 랜덤 \/ Fuzz \/ Stochastic"},{"토픽":"고릴라테스트","키워드":"모 단","도식":null,"정의":"특정 모귤이나 기능에 집중하여 심층적인 평가를 통해 잠재적인 버그를 찾는 테스트","내용":"특정 시나리오 테스트, 모듈\/기능 집중\n\n단위테스트\n\n기법 : Falut Tolerance \/ Frustrating"},{"토픽":"회귀 테스트","키워드":"리 셀 프\n리 전 결\n영 라 변 사","도식":null,"정의":"SW 결함 정정 이후 새로 생긴 결함(Riffle 효과) or 이전 결함 때문에 미발견됐던 또 다른 결함을 발견하는 Test","내용":"Retest All : 기존 Test Case 및 데이터 전부를 재사용\nSelective : 변경대상의 영향범위 위주로 테스트\nPriority : 핵심 기능(중요도\/위험도) 위주로 테스트\n고려 : Record&Replay, 전략적 TC, 높은 결합도 위주 Test\n영향 받는 모듈 : Riffle Effect \/ 변경모듈 : Side Effect"},{"토픽":"리스크 기반 테스트","키워드":"식 분 대 전 추","도식":null,"정의":"테스트 대상에 비해 테스트 자원이 부족한 경우, 우선순위로 자원 효율적 분배 테스트 전략","내용":"리스크 식별 > 분석 > 대응계획(STA) > 전략 > 리스크 추적\n기준 : 발생가능성\/장애영향, 비즈니스는 영향을 더 따짐\nSevere(STA), Strong(STTA), Intesive(ITA), 기초(FTA)\n상위레벨 : STA > STTA > ITA > FTA 순으로 자원 우선 투입\n- 비즈니스 리스크 중점, 인수 테스트 중심(리스크 추적)\n하위레벨 : STA > ITA > STTA > FTA 순으로 자원 투입\n- 기술적 리스크 중점, 개발 테스트 중심(리스크 추적)"},{"토픽":"백투백 테스트\n(back-to-back)","키워드":"명 앱 테 비 피","도식":null,"정의":"동일 설계 명세서 이용해 서로 다른 APP 개발 후 똑같은 TC 실행결과 비교해 오류 도출하는 테스트","내용":"동일 명세서 > App 1, 2 > Test > 결과 비교 > 피드백\n- 동일 결과 : 명세서 신뢰, 피드백으로 개발 결함만 조치\n- 다른 결과 : 명세서 오류 가능, 명세서부터 재검증\n* 자동차 SW test에 씀 : ISO 26262(자동차 SW), aSPICE"},{"토픽":"E2E 테스트\n(End-to-End)","키워드":"유 실 프 병","도식":null,"정의":"사용자 관점에서 유저 시나리오 기반으로 App 동작 등 검증해 App 무결성 증명하는 테스트","내용":"원칙 : 유저 스토리 기반, Mock data 아닌 실 환경 내 Test,\nPre-Push 단계에서 검증, 병렬로 수행\n\n- Pre Push : 테스트 통과 코드만 push 되도록 미리 수행\n* API 응답, 화면 렌더링 시간 등 다 기다리므로 시간 소요↑\n도구 : Selenium, testCafe, cypress, nightwatch"},{"토픽":"성능 테스트","키워드":"룹 티 스 \/ 인 로 스\n스 테 부 결 분","도식":null,"정의":"특정 상황에서 SW 안정성\/속도\/확장\/반응성 어떤지 판별하는 비기능적 테스트 기법","내용":"Loop Back(단위) \/ Tier(통합) \/ Spike(시스템)\nEndurance(긴 시간 동안 Load보다 조금 낮은 부하)\nLoad(일정시간 동안 부하) \/ Stress(Load보다 큰 부하)\n\n스크립트 작성 > 테스트 > 부하생성 > 결과측정 > 분석"},{"토픽":"성능 테스트 지표","키워드":"유 시 자","도식":null,"정의":null,"내용":"유저 : Named(전체)유저, Concurrent 유저(Act+Inactive),\nActive(요청 후 대기) 유저, Inactive(다음 요청까지 대기)\n\n시간 : Resp, Idle(think), Req Interval(Resp+idle), 쓰루풋\n- Response : 요청 응답 받아 화면에 표현할 때까지 시간\n\n자원 : 자원 사용량(실 사용량), 효율성(쓰루풋\/자원 사용량)"},{"토픽":"이상적 성능 임계치","키워드":null,"도식":null,"정의":null,"내용":"가상 사용자가 증가하면 응답시간 느려지고 TPS는 증가\nTPS가 완만해지는 시점이 그 시스템의 성능 임계치\n밑에서 올라가는 애는 MRT(평균 응답시간)임\nY축은 응답속도\/처리수, X축은 테스트 시간"},{"토픽":"리틀의 법칙","키워드":"객 = 유시\n\n엘 람 떠\n액 티 폰\n컨 티 퀘","도식":null,"정의":"공간내에 머무는 객체 수(L)는 객체의 공간유입량(λ)과 객체가 머무는시간(W)에 비례한다는 법칙(L = λW)","내용":"Active User(L) = TPS(λ) * Response Time(W)\n\nConcurrent user(L) = TPS(λ) * Request Interval(W)\nActive User = TPS(초당 처리 필요수) * Response Time\n\n* 성능 test는 요 이론에 근거해 지표(TPS, 유저 수)를 설정"},{"토픽":"사용성 테스트","키워드":"계 설 테 분\n완 용 일 패 시 정\n탐 평 검 비","도식":null,"정의":"사용자 관점에서 SW의 편의성, 학습 용이성 등 측정\/검증하는 테스트","내용":"계획수립 > 설계 > 테스트 > 분석\n항목 : 완성도(성공비율), 사용 패턴(빈도, 접근성), 작업시간(완료\/로딩\/입력), 정확성(오류율), 학습 용이성, 일관성\n유형 : 탐색적(초반), 평가(중반), 검증(후반), 비교(경쟁사)"},{"토픽":"단위 테스트","키워드":"모 객 클 단","도식":null,"정의":"개발자가 개발 환경에서 단위 모듈에 대해 화이트박스 test 하는 활동","내용":"검증 : 모듈, 객체, 클래스, 단위 프로그램 결함\/기능\n기법 : Test Stub, Driver\n* 컴포넌트 test : 인수 test 일종, happy path test\n* 단위 test가 unhappy path를 처리"},{"토픽":"통합 테스트","키워드":"빅 점 하 스 상 드 샌","도식":null,"정의":"개발자가 개발환경에서 통합 모듈에 대해 외부 Library 연계 등 그레이박스 test 하는 활동","내용":"검증 : 성능\/처리량, 업무 규칙, 입력-출력, 외부 library\n전략 : 빅뱅 통합 \/ 점진적(하향, 상향, 샌드위치) 통합\n- 빅뱅 : 시간 단축, but 오류 시 원인 찾기 어려움\n- 하향 : 하위를 stub 대체해 test, 또 그 밑.. BFS\/DFS로\n- 상향 : 하위 통합 후 driver로 test, driver 제거 후 결합..\n- 샌드 : 어떤 모듈은 상향(Driver), 어떤건 하향(Stub)"},{"토픽":"시스템 테스트","키워드":"사 경 신 보 성","도식":null,"정의":"제3자(테스터)가 운영 환경과 유사한 환경에서 전체 시스템에 대해 그레이박스 test 하는 활동","내용":"검증 : 사용성, 견고성, 신뢰성(가용성), 보안성, 성능(인로스)\n* 단위, 통합은 기능 중점 \/ 시스템은 기능 + 비기능 검증"},{"토픽":"인수 테스트","키워드":"준 수 평 모\n확 배 준 피\n기 성 품 보 안","도식":null,"정의":"사용자가 실 운영환경에서 전체 시스템에 대해 블랙박스 테스트 하는 활동","내용":"준비(시나리오) > 수행(측정서) > 평가(결과보고) > 모니터링\n\n목적 : 확신, 배포가능성 평가, 준수(계약\/규정) 확인, 피드백\n- 결함을 찾는게 아니라 시스템에 대한 확신을 얻는 블박 test\n\n인수기준 : 기능, 성능, 품질, 보안, 안전"},{"토픽":"인수 테스트 종류","키워드":"공 사 운 계 규\n비 알 베 필","도식":null,"정의":null,"내용":"공식적 : 사용자, 운영, 계약(준수 여부), 규정(준수 여부)\n- 운영 : 시스템 관리자 \/ 복구, 유저 관리, 유지보수, 보안\n비공식적 : 알파, 베타, 필드\n- 알파 : 내부 대상(QA, 개발진), Monkey\/Chaos, 개발이후\n- 베타 : Close(일부)\/Open(모든), A\/B test, 설문, 출시직전\n- 필드 : '구매자'가 test, 실제 피드백, 출시 및 '판매 이후'"},{"토픽":"이벤트 기반 테스트\n(Record & Replay)","키워드":"관 타 에 레 저 리 보 저","도식":null,"정의":"타겟시스템에서 발생하는 사용자 입력 및 외부 이벤트를 기록해 Test Script로 구성, 이를 재현해 결함 발견 Test","내용":"사용자 입력, 외부 메시지에 정확히 대응하는지 자동 Test\nTest 관리자 > 타겟환경[S\/W > Test Agent] > Recorder\n> Event(XML) 저장소 > Replayer > 보고기 > Event 저장소"},{"토픽":"임베디드 SW 테스트","키워드":"코 호 타\n도 호 에 타","도식":null,"정의":"임베디드 SW에서 SW와 HW의 기능\/비기능 검사, 최종 제품에 결함 없는지 확인하기 위한 테스트","내용":"코드기반 TC 생성 > 호스트 환경 시험 > 타겟 환경시험\n- 호스트 시험 : HW 미확정 상태에서 SW 테스트(하네스)\n- 타겟 시험 : test 도구는 호스트, test agent는 타겟에 탑재\n* 개발환경(host)과 운영환경(타겟)이 달라 기존 test와 상이\n* Host > JTAG I\/F(에뮬레이터, 복제 후 모방) > 타겟"},{"토픽":"임베디드 SW","키워드":null,"도식":null,"정의":"컴퓨터가 아닌 기계 제어 위해, 특정 HW에 특화되어 미리 정한 특정 기능 수행하는 내장형 SW","내용":"정형기법, 이벤트 기반 테스트 등으로 Test"},{"토픽":"임베디드 SW\n품질 특성","키워드":"측 요 안","도식":null,"정의":"산업용 임베디드 SW는 오동작, 결함으로 인한 피해가 매우 크므로 신뢰성, 품질이 중요","내용":"품질 측정 : 품질 신뢰성 지표 모호, 정량화 기준 모호\n- 객관적 지표, Top Down 접근 \/ ISO 26262 등 정량 기준\n품질 요소 : 품질 요소 한정, 목적 따라 평가 품질요소 변경\n- 품질 요소 우선순위 부여, 기능\/성능\/신뢰 중심 평가\n품질 안정 : 환경 의존성, 품질 가변성(환경 바뀔 시)\n- HW-SW 간 상호 품질 보완, 환경 요건 평가, 의존성 고려"},{"토픽":"DevTestOps","키워드":null,"도식":null,"정의":"개발, 테스트, 운영을 하나로 융합하는 개발 문화","내용":"구성 : 개발, 운영, QA(Quality Assurance)\n데브옵스 그려놓고 그 단계마다 test 추가하면 됨"},{"토픽":"테스트 자동화 도구","키워드":"자 교 기 품\n오 시 셀 기\n상 디 시 엑 퀄커","도식":null,"정의":"개발자에 의한 수동 test 아닌 자동 test 위한 도구","내용":"자동화 구축 > 교육 > 기술지원 > 품질측정\nOSS : Sikuli(이미지인식), Selenium(웹), Guitar(웹\/모바일)\n상용 : Device Anywhere, Sirocco, Experitest, Quality Commander"},{"토픽":"SW 복잡도 관리","키워드":"측 회 헐 엘\n관 티 피 쏘 인","도식":null,"정의":"SW의 코드 및 분기 등 작업의 어려운 정도를 정량적 측정, 관리 기법","내용":"측정 : 회전 복잡도, Halstead 척도, LoC 산정\n관리 : TDD, PMD, Sonarqube,\nCode Inspector(복잡도 자동 계산해서 위험 알려줌)"},{"토픽":"Fan In\nFan Out","키워드":"인 높 아 낮","도식":null,"정의":"시스템 복잡도 측정해 재사용, 유지보수 등 향상 위한 모듈 제어 관계 관련 지표","내용":"독립성은 응집\/결합, 시스템 복잡도는 Fan In\/Out으로 측정\nFan In : 대상 모듈'을' 제어하는 모듈의 수\n- 높을수록 복잡도 감소 & 재사용성 향상 \/ SPOF 이슈 가능\nFan Out : 대상 모듈'이' 제어하는 모듈 수\n- 낮을수록 굿 \/ 높을 시 단순화, 불필요 모듈 호출 검토"},{"토픽":"Mccabe 회전 복잡도(Cyclomatic Complexity)","키워드":"이 마 엔 플 이\n시 와 언 잎\nISO26262 : 복잡도 측정 요구","도식":null,"정의":"SW의 제어 흐름을 그래프로 표현하여 설계 단계에서 코드 복잡도를 정량 측정 기법","내용":"복잡도 = V(G) = E(엣지, 흐름) - N(노드, task) + 2p\n- p : 그래프에서 서로 단절된 부분집합(몇 덩어리인지)\n복잡도 = 분기문의 수 + 1\n그래프 : 시퀀스(분기\/반복 X), While(사전조건 따른 반복),\nUntil(사후조건 반복), If-Else(조건 분기)\n분기 : if, else if, for, while, switch 안의 case 1개당 1분기\n복잡도 1~10(안정) \/ 11~20(다소 복잡) \/ 50~(test 불가)"},{"토픽":"Halstead 척도","키워드":"길 보 볼 레 에","도식":null,"정의":"연산자, 피연산자의 종류 및 개수 등을 사용해 구현단계에서 프로그램 복잡도 측정 방법","내용":"N1 = 연산자 총 발생 수 \/ N2 = 피연산자 총 발생 수\nn1 = 서로 다른(유일) 연산자 수 \/ n2 = 유일 피연산자 수\n프로그램 길이(N) = N1 + N2\n프로그램 Vocabulary(n) = n1 + n2\n프로그램 Volume(V) = Nlog2(n)\n프로그램 Level(L) = (2 \/ n1) * (n2 \/ N2)\n프로그램 Effort(E) = V \/ L\n* 제어흐름 복잡도 반영 못해서 결함발생률 직접 연관↓,\n연산\/피연산자 수 알아야 해서 설계단계에서 사용 어려움"},{"토픽":"ISO\/IEC 14764","키워드":"수 적 완 예\n이 구 3R\n공 문 수 검 이폐","도식":null,"정의":"ISO\/IEC 12207의 유지보수 부분을 6단계로 상세화한, SW 유지보수의 표준 프로세스","내용":"분류 : Proactive(완전, 예방) \/ Reactive(수정, 적응)\n기법 : 프로그램 이해(코드분석 tool, Code-Browser),\n재구조화(클래스\/설계 변형), 역공학, 재공학(리팩), 재사용\n공정 구현 > 문제 분석 > 수정 > 검토\/승인 > 이전or폐기"},{"토픽":"유지보수 유형","키워드":"수 적 완 예","도식":null,"정의":"SW를 유저에 인수\/설치 후에 성능\/품질 개선 및 결함 등 수정하는 활동","내용":"수정 : 결함 발생 시 \/ 오류 원인 찾아 해결\n적응 : 개선된 HW, SW 패치 시 \/ 신규 OS 환경 등으로 이식\n완전 : 신규 Biz 절차 발생 \/ 오류 아닌 불완전, 신기능 추가\n예방 : 노후 SW 리팩토링 \/ 향후 발생 가능 문제 사전 처리"},{"토픽":"유지보수 전략","키워드":"티 비 정 재","도식":null,"정의":null,"내용":"TFT 구성 : 조직적 지원 \/ 개발 全단계 아는 운영관리자 배치\n비상 : 장애조치 알림 \/ 예기치 못한 장애 조치, 결과 기록\n정기예방 : TFT 회의, 통계 분석 \/ 장애 요인 사전 차단\n재난복구 : 경영진까지 열람 체계 \/ data, 장비 등 안전 보장"},{"토픽":"리만의 SW 분류","키워드":"S P E\n> E에 대한 변화 원리 제시","도식":null,"정의":"SW의 지속적 진화에 대해 SW를 3가지로 나눈 분류","내용":"S(static) : Specification 관점, 명세 따라 정확 동작 SW\nP(Practical) : Procedures, 절차\/입력값 따라 다르게 동작\nE(Embedded) : Environment, 실 환경 변화에 따라 동작"},{"토픽":"리만의 SW 변화 법칙","키워드":"계복친 조지자 피품","도식":null,"정의":"SW의 지속적 진화에 대해 SW를 3개의 타입으로 나누고 SW 진화에 대해 설명한 8가지 법칙","내용":"계속적 변경 : 내\/외부 요인 및 요구사항에 따른 SW 변경\n복잡도 증가 : 변경 진행될수록 복잡도 계속 증가\n친근성 보존 : 각 버전의 변화는 일정하여 계측 가능\n조직 안정성 : 조직이 변해도 생산성\/작업량은 크게 안변함\n지속적 성장 : SW는 계속해서 성장\n자기 규제 : 프로그램 변경\/진화는 고유한 패턴\/추세 존재\n피드백 시스템(개선 위해 구성)\n품질 감소(변화 못따라가면)"},{"토픽":"3R","키워드":"역 추 분 클 문\n공 역 재 구\n사 분 설 개 시 제","도식":null,"정의":"SW위기극복, 생산성 향상 위해 Repository 기반으로 역공학, 재공학, 재사용 기법을 사용하는 공학적 접근법","내용":"역공학 : Ollydbg, JD-GUI(더티코드 추출) > 정적\/동적 분석\n> 클린코드화 > 문서화(도메인 지식도 활용)\n재공학 : 역공학(물리>논리 수준) > 재구조화 > 구현\n재사용 : 분\/설\/개\/시\/제품 각각 다 재사용 가능"},{"토픽":"리팩토링","키워드":"단 추 이","도식":null,"정의":"코드스멜 제거하여 가독성\/성능 등 향상 위해 사용자가 보는 외부환경,기능은 두고 내부 구조 개선 유지보수 행위","내용":"단순화 : 불필요 파라미터\/중복\/긴 메소드\/거대 클래스\n추상화 : 동일 기능은 통합\/상위 클래스로 이동\n기능이동 : SRP 어긴 클래스는 분리, 메소드는 더 자주 쓰는 클래스로 이동\n\n회귀 테스트 필수"},{"토픽":"Inline Method","키워드":null,"도식":null,"정의":"Method(함수) 몸체가 메서드의 이름만큼이나 명확\/단순 할 때, 호출하는 곳에 바로 몸체를 넣는 리팩토링","내용":"boolean five( ){ return num > 5;}\nreturn (five( )) ? 2 : 1;\n\n>  return (num > 5) ? 2 : 1;"},{"토픽":"SW 난독화","키워드":"분 기 난\n구 데 집 제 예 패\n* 패킹은 binary, 나머진 코드","도식":null,"정의":"역공학 대비 또는 보안 우회 등 위해 바이너리\/소스코드 일부 또는 전체의 가독성을 낮추는 방법","내용":"소스 분석 > 특성별 기법 선정 > 난독화\n\n구획(주석 제거, 식별자 손상), 데이터(변수 자르기\/합치기),\n집합(순서 변환, 클래스 분할), 제어(loop 역순, loop 나눔),\n예방(디버거 제거\/가짜 data 주입), 패킹(파일 압축)\n* 3단락 : 보안 ↔ 성능 간 Trade off\n- 난독화 시 Dead Code(대\/소문자 전환 등) 넣으면 부하↑"},{"토픽":"난독화 기법","키워드":"동 가 로 추","도식":null,"정의":null,"내용":"동적 데이터 변환 : 화이트박스, 불부명 술어, 혼합 논리 연산, 단방향 변환, 데이터 인코딩\n\n가변 데이터 변환 : 변수 분할 및 결합\/재배열, 배열 재구축, 데이터 흐름 평탄화\n\n코드 로직 변환 : 명령어 재배열\/대체, 점프구문 추가, 데드 코드 삽입, 분기\/루프\n\n코드 추상화 변환 : 상속 변형, 함수 병합 및 분할, 메서드 매개변수 무작위, 주석 제거"},{"토픽":"품질관리","키워드":"계 보 통","도식":null,"정의":"SW의 품질 특성별 요구사항 만족 위한 관리체계","내용":"계획 > 보증 > 통제\n품질계획을 통해 QA\/QC 에 대한 실천계획을 수립"},{"토픽":"품질보증\nQA(Quality Assuarance)","키워드":"IEEE 610, 1991\nITTO\n관 기 인 워밸 표","도식":null,"정의":"SW의 요구 적합 보장, 품질문제 조기 발견\/제거 위한 거시적 품질 관리 체계 (절차 중점, 사무실, 전 과정)","내용":"Inputs : 프로젝트 관리계획, 품질지표, 작업성과 정보\n> Tools & Tech : 관리 리뷰, 기술 리뷰, Inspection,\n워크쓰루 Valid&Verify, 표준화 검사\n> Outputs : 변경 요청, OPA 갱신, 프로젝트 계획\/문서 갱신"},{"토픽":"품질통제\nQC(Quality Control)","키워드":"QA 따라 실제 품질 관리\/통제\n체 히 파 특 산 층 그","도식":null,"정의":"품질 허용범위 내에 들어오게 산출물 또는 제품 대상으로 지표를 관리\/통제하는 활동 (산출물 중점, 현장, 특정 단계)","내용":"Input : 계획, 품질지표, 작업성과 측정치, 승인된 변경요청\nTool & Tech : 체 파 히 산 특 층 그\noutputs : 품질 통제 측정치, 확인된 변경요청\/인도물\n현상 : 체크시트, 파레토, 히스토그램\n원인 : 산점도, 특성요인도, 층별, 그래프"},{"토픽":"QC7 도구","키워드":"현 체 히 파\n원 특 산 층\n자 그","도식":null,"정의":"품질 개발\/개선\/관리에 대한 유용한 도구로, 기초적인 데이터 정리 기반 품질관리하는 통계적 방법","내용":"현상파악 : 체크시트, 파레토 차트(중요 문제순), 히스토그램\n원인분석 : 산점도, 특성요인(원인결과), 층(문제 원인 분류)\n자료관리 : 그래프(관리도) - 상한\/중심\/하한 내에 들어와야"},{"토픽":"신 QC7 도구","키워드":"연 친 계 매 해 P 애","도식":null,"정의":"단순 수치 해석과 달리 정성적 방식으로 감독자 중심의 정보 수집 도구","내용":"연관도, 친화도, 계통도, 매트릭스도,\n매트릭스 해석도, PDPC, 애로우 다이어그램\n- PDPC : Process Design Program Chart, 우발상황 대응"},{"토픽":"SW Matrix","키워드":"제 절 프\n공 수 분 해 피","도식":null,"정의":"SW 측정 기술 기반으로 SDLC에 걸쳐 SW 품질을 정량화, 평가하는 기준","내용":"유형 : 측정 대상에 따라 구분(Product, Process, Project)\n- 제품 : LOC, FP, McCabe, Quality(결함, 신뢰, 가용)\n- 절차 : 프로세스 준수율, 결함 제거율, Test 효과\/효율\n- 프로젝트 : 공정 \/ 예산 \/ 투입 공수 준수율, 교육 이행률\n공식 마련 > Data 수집 > 분석 > 해석(평가) > 피드백"},{"토픽":"형상관리","키워드":"식 통 감 기","도식":null,"정의":"SW 수명주기의 산출물을 체계적으로 관리하여 SW 가시성\/추적성\/무결성 부여하여 품질보증 도모 기법","내용":"식별 > 통제(변경 승인) > 감사(기준선 승인) > 기록\n자동화 : Git(분산), SVN(중앙) \/ Push, Pull, Commit 명령\nCCB(형통위) : 기준선 변경 요청 검토\/승인\nScope Creep, Gold Plating 방지해서 기준선 잘 관리!"},{"토픽":"형상관리 기준선","키워드":"\n계 분 설 개 릴 운\n기 분 설 시 제 운","도식":null,"정의":"형상관리의 기준이 되는 각 형상 항목들의 기술적 통제 시점\/명세","내용":"계획-기능(시스템 명세서)\n요구분석-분배(요구 정의서)\n설계-설계(상세 설계서)\n개발-시험(원시코드, 실행코드),\n릴리즈-제품(제품 보고서, 인증시험 보고서),\n운영-운영(운영자\/사용자 지침서, 납품서)"},{"토픽":"SVN","키워드":"커 업","도식":null,"정의":"형상관리 등 위한 중앙 집중형 소스코드\/문서 체계적 관리도구","내용":"중앙 집중형 클라이언트-서버 방식\nCommit(로컬 PC > Repo) \/ Update(Repo > 로컬 PC)"},{"토픽":"Git","키워드":"커 피 로\n푸 로 리\n페 리 로\n머 로 피\n\n풀 페 + 마","도식":null,"정의":"형상관리 등 위한 분산형 소스코드\/문서 체계적 관리도구","내용":"각 로컬 PC에 완전한 저장소 구성, 필요시 중앙형으로도 운영\nCommit : PC > 로컬 Repo\nPush : 로컬 Repo > Repo\nFetch : Repo > 로컬 Repo\nMerge : 로컬 Repo > PC\n* Pull = Fetch + Merge"},{"토픽":"SW Visualization","키워드":"코 시 콜 \/ 코 문 자 독\n프 문 레 임\n요 구 테 형\n실 투 자 간 미 정","도식":null,"정의":"SW 품질 확보 위해, 개발 전체과정 투명하게 파악, 이를 통한 품질 향상 기법","내용":"문서\/시각(프로세스\/코드), 정량, 자동화, 형상관리, 품질검증\n코드 : 시각-Call graph(역공학), 문서-JavaDoc, Doxygen\n프로세스 문서화(산출물) : Redmine, Impasse\n\n요구사항관리 > 구현 > 테스트 > 형상관리\n목적 : 실시간성, 투명성, 자동화, 간소화, 미래지향, 정량화"},{"토픽":"SW Visualization 품질지표","키워드":"요 추 달\n형 항 등 변\n동 기 비 정 사 구\n정 표 이","도식":null,"정의":null,"내용":"요구사항 : 추적성(개발 단계별 일관된 구현), 달성율\n형상관리 : 형상항목(대상), 항목 등록율, 항목 변경율\n동적test : 기능, 비기능, 정형, 사용자 검증, 구조적 커버리지\n정적test : 코딩 표준 준수율, 정적 분석 이행율"},{"토픽":"ISO 25000\n(SQUARE)","키워드":"프 제 경\n관 모 측 요 평 시\n기 신 사 효 유 이 보 호","도식":null,"정의":"SW SDLC 각 단계의 제품이 사용자 요구 만족 검증 위해 프로세스, 제품, 경영 품질 통합한 국제표준","내용":"ISO 9126, 14598 기반\n2500n~2504n : 품질 관리 \/ 모형 \/ 측정 \/ 요구사항 정의\n\/ 평가 + 확장(25050~25099)\n\n기능적합, 신뢰, 사용, 효율, 유지보수, 이식, 보안, 호환\n\n품질 관리(ISO2500n)- 가이드라인 \/ 품질 평가 관리 표준\n품질 모델(ISO2501n)- 제품 품질 평가 모델 \/ 데이터 품질 모델\n품질 측정(ISO2502n)- 측정 매트릭스 \/ 시스템 외부, 사용품질 측정\n품질 요구(ISO2503n)- 요구사항 설정 프로세스 \/ ISO15288 참조\n품질 평가(ISO2504n)- 품질 평가의 절차 \/ 측정 결과 문서화\n품질 시험(ISO2505n)- 품질 요구사항 및 시험"},{"토픽":"ISO 25000 명세기반테스트 맵핑","키워드":null,"도식":null,"정의":null,"내용":null},{"토픽":"GS 인증\n(Good S\/W)","키워드":"기 신 사 효 유 이 보 호\n상계 분 시 결 개 심 적\n51이랑 41이랑 23하세\n요(51) 평(41) 측(23)","도식":null,"정의":"실제 운영환경 Test Bed 기반 철저한 제품 시험을 통해 품질을 인증하는 제도 * SW 진흥법 20\/15조(GS25)","내용":"기능적합성, 신뢰, 사용, 효율, 유지보수, 이식성, 보안, 호환\n상담\/계약 > 분석 > 시험, 현장 심사 > 결함리포트 > 개선 >\n품질인증 심의 위원회 상정 > 적합\/부적합\n\nISO\/IEC 25023(측정), 25041(평가), 25051(요구\/시험)"},{"토픽":"SP 인증","키워드":"조 개 관 개 지","도식":null,"정의":"국내 SW기업 사업 능력 강화, 사업 부실방지 위해 기업의 SW 개발절차 역량수준 평가 인증하는 제도","내용":"SW 진흥법 제 21조\n해외 : CMMi, SPICE(얘들은 개선 목적, SP는 평가 목적)\n조직 관리 : 조직프로세스, 기반구조, 교육\n프로세스 개선 : 정량적 관리, 문제해결, 프로세스 개선\n프로젝트 관리 : 계획, 통제, 협력업체\n개발 : 고객 요구사항 관리\/분석\/설계\/구현\/테스트\n지원 : 품질보증, 형상관리, 측정 및 분석"},{"토픽":"CMMi\n(Capability Maturity Model Integration)","키워드":"미 초 관 정 량 최\n15504 12207 33000","도식":null,"정의":"SW업체 조직 성숙도 평가 위한 심사 방법 제시하고 산업계 표준(de facto)인 프로세스 개선 참조 모델","내용":"ISO 15504 \/ 12207 \/ 33000\n0 : 미달성\n1 : 초기(프로세스 구조X)\n2 : 관리(기본 프로세스)\n3 : 정의(표준 프로세스)\n4 : 정량적 관리(통계)\n5 : 최적화"},{"토픽":"CMMI 1.0","키워드":null,"도식":null,"정의":null,"내용":"구조 : Specific Goal, Generic Goal\nPA 구성 : 22 Process Area \/ 유지심사 : 없음"},{"토픽":"CMMI 2.0","키워드":"두 매 인 임\n벤 유 재 자","도식":null,"정의":"V1.3에 애자일, 성과 적용하고Process를 Practice로 변경, 카테고리별 Capability Area 둔 조직 성숙도 평가 모델 * Process 개선 참조 모델","내용":"구조 : Practice Group, Practices\nPA 구성 : 20 Practice Area \/ 유지심사 : 2년에 1번\n카테고리 : Doing, Managing, Enabling, Improving\n- Doing : 품질 솔루션 생산\/제공(PA 7개) : QA, VV, 리뷰 등\n- Managing : 솔루션 이행 계획\/관리(5) : 축정, 계획 등\n- Enabling : 솔루션 이행 지원(3) : 설정 관리, 결정 분석\n- Improving : 성능 향상\/유지(5) : 거버넌스, 절차 관리\/개발\n심사 : 벤치마크(공식\/3년), 유지심사(2년), 재심사, 자체심사"},{"토픽":"벤치마크 테스트\n(BMT)","키워드":null,"도식":null,"정의":"기준점\/표준점을 뜻함, 대상을 여러 방법으로 측정, 누구라도 인정할 수 있도록 표준화시키는 과정","내용":"컴, 스마트폰 등 전자기기 연산성능 시험해 수치화\n- 주로 SW보단 HW 적용, 여러 전자기기 성능 비교평가\n테스트 툴, 환경, 기기 상태에 따라 점수 오차 발생하는 한계\n상용 SW 평가 시 BMT로 동종 경쟁제품 간 객관적 비교분석"},{"토픽":"ISO\/IEC 33000","키워드":"평 측 모\n미 수 관 립 예 최","도식":null,"정의":"프로세스 능력 평가를 위해 프로세스 심사모델 구성 전체 Framework를 제공하는 ISO 국제표준","내용":"평가 프로세스 \/ 측정 프레임워크 \/ 프로세스 모델\n\n수준모델\nLevel0 - 미달성 프로세스\nLevel1 - 수행되는 프로세스\nLevel2 - 관리되는 프로세스\nLevel3 - 수립된 프로세스\nLevel4 - 예측 가능한 프로세스\nLevel5 - 최적화 프로세스"},{"토픽":"ASPICE\n(Automotive SPICE)","키워드":"ISO 15504 \/ 12207\n불 수 관 립 예 최\n앸 싯 쉐 섶 맨 핌 류\n\n획 요 관 품 프 개 재","도식":null,"정의":"자동차 장치 품질 문제 및 임베디드 개발절차 성숙도 평가 위해 자동차 개발에 특화된 프로세스 모델의 국제 표준","내용":"0 ~ 5 : 불완전 \/ 수행 \/ 관리 \/ 수립됨 \/ 예측가능 \/ 최적화\nACQ(고객의 서비스 획득절차), SYS(시스템 요구 도출),\nSWE(요구사항 관리), SUP(품질보증, 형상관리 등 지원),\nMAN(관리자 프로세스), PIM(프로세스 개선), REU(재사용)"},{"토픽":"SW 기능안전","키워드":"기 방 정 오","도식":null,"정의":"생명\/재산 피해 사고 방지 위해 안전 절차 및 기능적 안전 등 능동적 방안을 포함한 상태","내용":"기능 단위(보안 : 전체 범위), 방어적코딩(보안 : 시큐어코딩)\n명세\/설계 : 정형기법(SIL4), 테스트 : 오류 삽입\n\n레벨 : SIL\/ASIL\/Class\/Level\nIEC 61508, 62279, 61513, 62061 \/ ISO 26262,\nDO-178C(항공)"},{"토픽":"SW 보안","키워드":"전 시 위 보","도식":null,"정의":"SW 소스코드 등에 존재가능한 잠재적 보안 취약점 제거 및 내\/외부 침입으로부터 시스템을 보호하는 활동","내용":"전체 시스템 통합 범위, SDLC 보안 요구 분석, 시큐어 코딩\n명세-정성\/정량적 위협 모델링, 설계-Secure Life Cycle\n\n보안성 테스트, 레벨 : EAL\n표준 : OWASP Top10, 시큐어 코딩 가이드라인, CWE"},{"토픽":"정형 기법","키워드":"명 검","도식":null,"정의":"수학적, 논리적 명세와 검증기술을 사용하여 시스템을 검증함으로써 고신뢰(안전) 시스템 개발법","내용":"정형명세 > 정형검증\n임베디드, 항공\/우주\/의료 등\nISO26262, IEC61508"},{"토픽":"정형 명세","키워드":"Z 상 초 오\n페 토 플 트 앜\n상 액 모 전","도식":null,"정의":"수학적\/논리적 언어를 사용하여 적절한 추상화를 통해 시스템 및 시스템의 요구속성을 묘사하는 기법","내용":"1. Z언어 : 집합론\/일차 수리논리, 상태\/전이 표현\n- 시스템 상태\/초기상태\/오퍼레이션 명세\n2. Petri Nets : Token, Place(원), 트랜지션(사각), Arc(>)\n3. 상태차트 : 액티비티(기능), 모듈(구조), 상태(전이) 차트"},{"토픽":"정형 검증","키워드":"이 명+결 시 적\n모 속+시 체 트","도식":null,"정의":"시스템의 동작 및 요구사항을 논리식\/수학식 등 정형화된 명세언어로 기술, 만족 여부 증명하는 SW 검증","내용":"이론증명 : 명세 + 구현결과 > 시험기(PVS, HOL, Zeves) >\n적\/부적합 \/\/ 사람의존적, F\/반례 출력 X, True 증명 목적\n모델체킹 : 속성 + 시스템(유한상태머신) > 모델 체킹 도구\n(SMV, Ecosim) > OK면 True, 문제 시 F랑 반례 반환"},{"토픽":"상태 폭발","키워드":"기 추 릴","도식":null,"정의":"시스템의 규모가 커지면 시스템이 가질 수 있는 상태 수가 기하급수적으로 증가 현상","내용":"[해결]\n\n기호적 모델체킹 : 상태 직접 검사 X, 상태를 이진\n트리로 표현 후 BFS\n\n추상화 기법 : 변수 크기\/개수 줄이기, 좀 더 작은 모델 생성\n\n릴레이 모델체킹 : 한번에 다하지 말고 상태들을 나눠서 검사"},{"토픽":"SW 안전성 분석","키워드":"안 1 기 간\n위 해 함 리","도식":null,"정의":"위험 분석 등 통해 위험성 크기가 수용 가능한지 확인 활동","내용":"안전성 : 1차적(화재 등 HW 직접 사고로부터의 안전),\n기능(설계 통한 장비 안전), 간접(DB data 에러 대응 안전)\n위험성 : Hazard(원인), Harm(물리피해), Risk(확률*심각)\n\nFTA, FMEA, HAZOP, STPA\n\n국제표준\nISO\/IEC guide 51\nIEC 61508(산업 공통) \/ ISO 26262(자동차)"},{"토픽":" FTA\n(Failue Tree Analysis)","키워드":"연 정 트리","도식":null,"정의":"고장을 트리 모향으로 분석, 고장의 원인이 뭔지 찾아가는 정량\/연역 분석 (장치 이상, 실수 발견)","내용":"Root : 의도하지 않은 이벤트(위험, 영향)\nNode : 루트 발생시킬 수 있는 원인(잠재오류, 정상상황 등)\n원인 분석은 되지만 위험 찾아내진 못함\n개발 전단계 사용 가능, AND\/OR gate로 트리 구성"},{"토픽":"FMEA\n(Failure Mode and Effect Analysis)","키워드":"성 상 납 엠\n잠 영 대\nRPN 심*발*검\n디 프 리","도식":null,"정의":"심각도\/발생도\/검출도를 통해 고장으로 인한 시스템 영향 정성\/귀납적 상향식 분석 (장치\/시스템 문제 영향 파악)","내용":"잠재적 고장 파악 > 영향평가 > 대책 수립\nRPN(Risk Priority Num) = 심각도 x 발생도 x 검출도\n유형 : Design, Process, Reverse\n* 연필 > 고장모드 : 심없다 > 심발검 > (RPN ＞1)이면 위험"},{"토픽":"HAZOP\n(Hazard and Operability Analysis)","키워드":"대 파 가 식 원 결\n낫 레 몰 리 파\n\n이 가 * 공","도식":null,"정의":"Guide words 통해 운영상의 위험 조사 정성 기법 (위험 요소, 문제점 사전 파악)","내용":"분석대상 > 파라미터(위험요인) > 가이드 워드 적용\n> 변이 식별 > 변이 원인 파악 > 결과 분석\n\n가이드 워드 : 파라미터의 변이, 상상 설명, 공정변수의 질,양,상황 표현\n- Not, Less(Lower), More(Higher), Reverse, Part of\n공정변수 : 물리적 특성 및 정비, 샘플링 등의 공정 상태(특정\/일반)\n특정 : 유량, 온도,압력,액위,조성,상,점도\n일반 : 첨가,반응,유지관리,시험,완화,혼합,부식\/침식(단독으로 하나의 이탈 구성)\n\n이탈 = 가이드 워드 * 공정변수(특정변수)"},{"토픽":"STPA(System-Theoretic Process Analysis)","키워드":"목 컨 U 손","도식":null,"정의":"사고는 모듈 간 상호작용 기반 발생한다는 전제, 모듈 간 UCA 분석하여 위험 분석하는 기법","내용":"분석 목적 정의 > 컨트롤 스트럭처 모델링 > UCA 식별\n> 손실 시나리오\n- 컨트롤 스트럭처 : 시스템 모듈 + 기능 간 상호작용\n- UCA(Unsafe Control Action) : 사용자 오입력 등\nController > Controlled Process"},{"토픽":"SOTIF\n(Safety Of The Intended Functionality)","키워드":null,"도식":null,"정의":"오작동\/고장\/결함 관련이 아닌, 설계 자체가 안전을 확보하기에 불충분\/부적절한 경우  ADAS\/Autonomous Driving 분야에서 차량 HW, SW 오작동이 없더라도 설계의 불합리로 인해 발생 할 수 있는 위험을 최소화 하기 위한 목적으로 제정","내용":"ISO26262 문제점 보완"},{"토픽":"ETA\n(Event Tree Analysis)","키워드":"시 중 결\n정 시 사 평","도식":null,"정의":"초기 결함\/실수에서 발생되는 사건의 순서 및 상관관계를 파악하는 기법","내용":"시작 사상 > 중간 사상(사상1, 2, 3) > 결과로 Tree 형태\n- 성공\/실패로 나눔(위가 성공), [성공 + 실패 확률] = 1\n- 시작 : 화재 발생\n- 중간 : 화재 감지기(1), 화재 경보(2), 스프링클러 작동(3)\n- 결과 : 경미한 피해, 심각한 피해, 사망\/부상 등\n- 각 가지마다 성공\/실패 확률 적고 최종 결과별 확률 도출\n시스템 정의 > 사고 시나리오 > 사상(시, 중, 결) > Risk 평가"},{"토픽":"IEC 61508","키워드":"개 범 해리 명 할 기\nSIL(1~4, 5~8)","도식":null,"정의":"전기\/전자 고신뢰 시스템의 기능안전 표준","내용":"개념 정의 > 범위 정의 > 해저드&리스크 분석 >\n안전 요구 명세 > 안전 요구 할당 > 안전 기능별 요구 명세\n\nSIL 1~4(4가 최고, 저빈도 : 10^(-1)~(-4),\n고 : 10^(-5)~(-8))"},{"토픽":"ISO 26262","키워드":"정 해리 목 개 명\nASIL(SEC 0 3 4 3)\n심 노 통\n\n21434","도식":null,"정의":"자동차에서 안전과 관련된 핵심 부품 전기\/전자 시스템의 기능 안전 표준","내용":"기능 정의 > 해저드&리스크 분석 > 안전 목표 >\n기능 안전 개념 > 기술적 안전 요구 명세\nASIL A~D(D가 최고)\nSEC(심각 S0~3 \/ 노출 가능성 E0~4 \/ 통제성 C0~3)\n\n보안은 ISO 21434\n\n26262(안전) > 21448(ADAS, SOTIF) > 21434(보안)"},{"토픽":"안전성 보증 활동","키워드":"분 보 Ve 감 지","도식":null,"정의":"요구사항에서 제품까지 SDLC 단계별 안전게이트 두어 안전성 감사 및 가시화를 통한 지원 활동 수행","내용":"분, 설, 개, 시 중간마다 안전 gate 놓음\n안전성 분석(요구, 분석 단계) > 안전 보증 개발(전체 단계)\n> Verification(시험 단계) > 감사(Gate 마다)\n> 지원(전체 단계, SW Visualization)"},{"토픽":"SW 안전진단 가이드","키워드":"충 품(동코) 기\n준 계 수 종","도식":null,"정의":"국가·공공기관 등에서 SW 안전진단 기획\/추진\/수행 할 때 참고할 수 있는 템플릿, 예제 등 실무 지침서","내용":"영역 : 안전기능 충분성 \/ SW 품질 안전 \/ 기반 시스템 안전\n- 안전기능 : Hazard, Risk, Harm, 안전기능 여부, FTA 등\n- SW 품질 : 기능 동작 정확성 진단, 소스코드 품질 진단\n- 기반 Sys : CPU, OS, DB, WEB\/WAS, 각종 SW test 등\n진단 결과 : SIL 레벨로 표기(SIL은 THR 도출원리 기반 설정)\n준비(목적\/범위\/팀 구성) > 계획 > 수행(분석, test) > 종료\n- 모든 영역별 절차가 준계수종임"},{"토픽":"GAMAB 원리","키워드":"프 기 사 고","도식":null,"정의":"THR(Tolerable Hazard Rate) 도출을 위해, 기존 시스템 고장률 기반 프랑스에서 발의한 원리","내용":"신규 시스템은 최소 기존 시스템보다는 안전\n- 안전성 원리 : λ(기존 고장률) ≥ λ(신규 고장률)\n- 위험도 산출 : 사건 발생 확률 X 고장 발생 확률\n- THR 수준 : 기존 시스템의 고장률 '이하'"},{"토픽":"ALARP 원리","키워드":"영 경 빈 심","도식":null,"정의":"THR(허용 가능 위험) 도출을 위해, 경제성과 최소 위험 기반 영국에서 발의한 원리","내용":"경제성 기반, 가능한 최소의 위험도를 유지 원칙\n- 안전성 원리 : 경제성 고려한 위험 수준 결정\n- 위험도 산출 : 사건 발생 빈도 X 사건의 심각도\n- THR 수준 : 경제성과 위험도의 균형 지점 수준"},{"토픽":"MEM 원리","키워드":"독 사 자 소","도식":null,"정의":"THR(Tolerable Hazard Rate) 도출을 위해, 개개인의 최저 사망률 기반 독일에서 발의한 원리","내용":"하나의 기능, 장치에 대해 개개인의 최저 사망률이 안전 기준\n- 자연적 최소 사망률 X SW 위험에 따른 사망률 \n> 전체 시스템의 기술적 문제 기반 사망률의 상한선\n- 전체 시스템 사망률 상한을 모듈별로 분할하면 기능별 SIL"},{"토픽":"SRGM\n(SW 신뢰성 성장 모델)","키워드":"테 리 문 S 신\n타 단 결 무 베 로\n인 밀 테 엔","도식":null,"정의":"SW 'Test 중' 발생한 고장 시간\/횟수 기반 SW 신뢰성 추정하는 확률 모델","내용":"테스트 > 리뷰 > 문서화 > SRGM > 신뢰성 추정\nTime Domain Model(결함 발견되면 고치니까 점점 고장↓)\n- Y축 : CPU 단위시간(1시간 등) 돌리는 동안 고장 횟수\n- X축 : 발견된 결함 수(누적 결함 수)\n- Musa-Basic(결함 직선 감소), Musa-로그(로그적 감소)\nInterval Domain(Test 몇 번 할 때의 고장 밀도 추론 가능)\n- Y축 : 고장 밀도 \/ X축 : Test 횟수\n- NHPP : 단봉 그래프(누적 횟수 포아송)"},{"토픽":"IT 프로젝트 관리","키워드":"범 일 원\n착 계 실 통 종","도식":null,"정의":"IT 프로젝트 성공 위해 범위, 일정, 원가 등을 착수, 계획, 실행, 통제, 종료에 따라 관리하는 활동","내용":"PMI\/ISO 21500\n범위, 일정, 원가 관리\n프로젝트 : 착수 > 계획 > 실행 > 통제 > 종료"},{"토픽":"PMO","키워드":"642\n계 후 관\n계 검 결\n책 용 삼","도식":null,"정의":"발주자 입장에서 자원, 일정, 진도, 이슈관리 등 효율적으로 수행 위한 프로젝트 관리 조직","내용":"전자정부법 64조의 2 '권고' 사항\n- 계획~사후관리 단계\n- 프로젝트 전 과정 개입, 관리적 성격\n- PMO수행계획서 \/ 검토보고서 \/ 수행결과보고서\n- 전자정부사업 책임자 3회 \/ 전자정부 위탁용역 3회 이상"},{"토픽":"정보시스템 감리","키워드":"571\n착 종 기\n정 비\n이 피큐삼 발수","도식":null,"정의":"제3자적 입장에서 발주자 요구대로 수행했는지 종합적 점검 및 문제 개선 자문 활동","내용":"전자정부법 57조 1항 '의무' 사항\n- 착수~종료단계(요, 설, 종만으로 부족해서 현장 상주)\n- 기술적 측면 평가\n- 정기 \/ 비정기 보고서\n- 20억 감리 3회 \/ PM, QA 3년 \/ 발주자가 인정 수석감리원"},{"토픽":"감리 프레임워크","키워드":"요분 분설 구 시 전\n아 응 디 시 운\n성 산 절","도식":null,"정의":null,"내용":"윗면(시점) : 분 설 구 시 전(개) \/ 요분, 분설, 구 시 전\n앞면(영역) : 아키텍처, 응용sys, DB, 시험활동, 운영준비\n옆면(기준, 관점) : 성과, 산출물, 절차\n* 대상 : 대국민 서비스, 공공기관 공동 사업, 5억원 이상"},{"토픽":"공통감리 절차","키워드":"예 현 시\n계 결 시\n예 준 실 계\n현 시 착 계 보 종 확\n시 준 확 보 확","도식":null,"정의":"시스템 구축 사업 및 EA\/ISP 수립, DB 구축, 운영 등 모든 유형의 정보화 사업에 공통 적용하는 감리 절차","내용":"예비조사 > 현장감리 > 시정조치 확인\n- 감리 계획서 > 수행 결과 보고서 > 시정조치 확인 보고서\n- 예비조사 : 예비조사 준비 > 실시 > 감리계획서 작성, 제출\n- 현장감리 : 시작 > 착수회의 > 계획서 > 보고서 > 종료회의\n> 보고서 확정\n- 시정조치확인 : 확인준비 > 확인 > 보고서 > 보고서 확정"},{"토픽":"정기 감리","키워드":null,"도식":null,"정의":"3단계, 2단계 감리와 같이 EA\/ISP 수립, DB 구축, 운영, 유지보수 등 모든 IT 사업의 특정단계에 정기 실시하는 감리","내용":"3단계, 2단계 감리를 포함"},{"토픽":"3단계 감리","키워드":"요 설 종","도식":null,"정의":"감리기준 제3조제1항에 따라 정보시스템 개발사업에 대해 요구정의, 설계, 종료 3단계로 과업이행 여부 등 점검 감리","내용":"요구정의  > 설계 > 종료"},{"토픽":"2단계 감리","키워드":"설 종","도식":null,"정의":"감리기준 제3조제1항 단서의 사업기간 및 비용 기준 해당 시 요구 단계 생략하고 설계, 종료 2단계 실시 감리","내용":"설계 > 종료"},{"토픽":"유지보수 감리","키워드":null,"도식":null,"정의":null,"내용":"대상 : 개발 SW, 상용 SW, 인프라"},{"토픽":"상주감리 범위","키워드":"공 과 실 품 위 지 자 기","도식":null,"정의":"전기간 또는 특정기간 동안 감리원이 현장에 직접 상주하는 감리","내용":"범위 : WBS(상세공정표), 공정 조정 \/ 과업 구체화\n품질 : 실적 점검, 산출물 품질 검토, 위험 파악\n기술 : 기술검토 지원 \/ 자문 \/ 기타 지원"},{"토픽":"상주감리 절차","키워드":"계 상(검정) 완\n계 결시정 완","도식":null,"정의":null,"내용":"계획 수립 > 상주감리 수행 > 완료 보고\n- 상주감리 수행 : 검토수행(상시 점검) > 정기보고\n- 계획서 > 결과보고서, 시조확, 정기 보고서 > 완료 보고서"},{"토픽":"상주감리 업무","키워드":"사 과 상 품 위 조 자","도식":null,"정의":"상주감리업무(정보시스템 감리기준 제10조의2)","내용":"1. 사업수행계획서, 상세공정표(WBS, Work Breakdown Structure), 개발방법론의 공정·산출물 조정 내역 검토 \n2. 과업 범위(요구사항) 구체화 및 과업변경 영향·타당성 검토 \n3. 상세공정표에 따른 계획 대비 실적 점검 및 이행 상태 확인 \n4. 산출물에 대한 품질 검토 \n5. 위험요소 사전 파악 및 합리적인 개선방안 제시 \n6. 쟁점사항에 대한 기술검토 및 의견조율 지원 \n7. 발주자의 의사결정지원 및 자문"},{"토픽":"현저성 모델\n(Salience model)","키워드":"권 긴 합\n\n요! 휴 지 위 의 최 자\n5 7 6 1 2 3 4","도식":null,"정의":"PM이 이해관계자 관리 위해, 이해관계자를 분류하고 등급을 부여해서 관리하는 모델","내용":"3속성 : 권력 \/ 합법 \/ 긴급\n\n이해관계자 우선순위\n휴면기 \/ 자유재량 \/ 요구 많은 \/ 지배적 \/ 위험한 \/ 의존적\n\/ 최종적(Definitive, 제일 중요!) \/ 비 이해관계자\n우선순위 : 7 > 4 > 5 > 6 > 1 > 2 > 3 > 8"},{"토픽":"권력 관심 모델","키워드":"잠 후 옹 무\n만 집 정 관","도식":null,"정의":"이해관계자들의 프로젝트에 대한 관심도, 영향력을 통해 어떤 영향 받게 될지 분석 모델","내용":"Y축 : 권력 \/ X축 : 관심\n관계자 : (시계방항) 잠재적(CEO), 후원적, 옹호적, 무관심\n- 후원적 : 검수 책임자 \/ 옹호적 : 개발자, 사용자\n- 각각 만족도 유지, 집중 관리, 지속 정보 제공, 관찰"},{"토픽":"ISO 21500","키워드":"범위관리\nWBS","도식":null,"정의":"프로젝트 관리의 모범사례 및 프로세스에 대해 설명하는 프로젝트 관리 지침 국제표준","내용":"적용범위\n목적 : 프로젝트 관리 개념 및 프로세스에 대한 일반적 지침 제공\n적용범위 : 어떤 형태의 조직, 모든 프로젝트 가능\n\nWBS 주요 투입물 : 프로젝트 계획서 \/ 요구사항 문서 \/ 승인된 변경\n작성방법 : 분할 \/ 분할수준"},{"토픽":"프로젝트 범위관리","키워드":"착 계 실 통 종","도식":null,"정의":"프로젝트 과업 범위 결정, 해당 과업 수행 계획\/통제 활동 정의한 프로젝트관리 영역","내용":"착수 > 계획 > 실행 > 통제 > 종료\n- 계획 : 범위 정의 > WBS 작성(+ WBS 사전) > 활동 정의\n- 통제 : 범위 통제(산출물 : 변경요청서)"},{"토픽":"WBS\n(작업 분류 체계)","키워드":"계 기 요 자 환\n기 팩 사 코\nISO 21500","도식":null,"정의":"프로젝트 목표 달성 위해 필요한 활동과 업무 세분화한 완전한 업무 범위 기술 문서","내용":"투입물 : 범위관리 계획, 범위 기술서, 요구사항, 자산, 환경\n작성 : 분할(자원\/일정 기반), 전문가 판단\n결과 : 범위 기준선, Work Package, WBS 사전, Code of Account\n- 작업 패키지 : 최하위 단위(전체의 1~10%, 2주 소요 크기)\n- WBS 사전 : 각 작업 패키지의 상세 내용(개요, 일정)\n- Code of Account : WBS ID(WBS 요소 식별자)\n* 일정관리, 의사소통(PM, 개발자, 고객) 등에 WBS 활용"},{"토픽":"WBS 구성요소","키워드":"워 콘 팩\n100 책 자","도식":null,"정의":null,"내용":"WBS 구성요소\n구성도 : Work - Control Account - Work Package (계층 트리구조)\n작성원칙 : 100% 룰 \/ 책임기준 \/ 자원측정 기준\n작성장점 : 공정 시각화 \/ 비용,시간 추정 \/ 진척률 관리\n작성고려사항 : 의견수렴 \/ Task 누락 방지 \/ 인도물 중심 구성\n\n기대효과 : 일정지연 만회 (Crashing, Fast Tracking, 범위축소)"},{"토픽":"프로젝트 일정관리","키워드":"계 활 산(순 자 기) 개","도식":null,"정의":"프로젝트 적시 완료 위해 일정계획 수립\/실적 모니터링, 일정지연 대응 활동 기반 프로젝트관리 영역","내용":"일정관리 계획 > 활동 정의 > 활동 산정(순서, 자원, 기간)\n> 일정 개발\/통제\n- WBS, 자산, 일정 계획 투입 > 분할, 연동계획 > 활동 목록\n* WBS는 산출 인도물 중심, 활동은 인도물 생성 시간 고려"},{"토픽":"연동계획\/연동기획\n(Rolling Plan \/ Rolling Wave Planning)","키워드":"관 레 크 백\n마 분 떠 패 실","도식":null,"정의":"근 미래의 상세 계획 기반으로 장기의 상위 수준 계획을 반복적 세분화하는 일정의 점진적 구체화 기법","내용":"원칙 : 관리 가능 크기 분할, 분할 레벨 적정(3~5단계 권장),\npkg 크기 조절(1~10%), WBS 100%(최하 레벨 pkg 총합)\n마스터플랜 > 작업 분류 > WBS 단위 > pkg 상세 > 실제계획\n- pkg 상세 : 산출물, 위험, 인수 기준 등"},{"토픽":"공정단축기법","키워드":"중 압","도식":null,"정의":null,"내용":"중첩 단축법\n\n압축법"},{"토픽":"CPM\n(Critical Path Method)","키워드":"ES 기 EF \/ LS 시 LF","도식":null,"정의":"자원 고려 없이 활동 간 관계\/ 수행기간 만으로 과거 경험 기반 확정적 일정 관리 방법","내용":"Critical Path : 여유시간이 0인 활동 연결 경로(절대적 공정)\n활동 간 의존 없더라도 자원 간 의존 있을 시 충돌 발생\n* CPM은 ES, CCM은 LS에 착수함\n* CPM은 1점 추정, PERT는 3점 추정 방식\n* Crashing 적용 가능, Fast Track은 적용 불가\n- 크래싱 적용 시 브룩스 법칙 주의\n\n가장 오래 걸리는 일정 기반"},{"토픽":"CCM\n(Critical Chain Method)","키워드":"프(안모행) 피 자","도식":null,"정의":"자원제약사항을 고려하여 여유시간을 버퍼로 잡고 버퍼 관리를 통해 일정 관리하는 방법","내용":"프로젝트 버퍼(핵심 체인 끝 버퍼, 안전\/모니터링\/행동)\n- 안전 영역 : 여기까진 사용해도 안전\n- 모니터링 : 버퍼 사용 추이 및 원인 모니터링 필요\n- 행동 영역 : 이쯤 쓰면 버퍼 통제 조치 취해야 됨\n피딩 버퍼(critical chain에 연결되는 non크리티컬 끝 버퍼)\n자원버퍼(착수 전에 알려주는 일종의 경보, critical 앞 버퍼)"},{"토픽":"리소스 레벨링\n(자원 평준화)","키워드":"핵 제 자 원 절","도식":null,"정의":"자원 한계에 따라 시작일, 종료일 조정하여 Task 목표량을 준수하는 기법\n\n자원의 과다 배치를 감소하도록 일정을 평준화하여 원가 부담을 억제하는 일정관리 기법","내용":"조건 : 자원량에 비해 과도한 작업, 동일 기간에 여러 활동\n주공정 : CP 변경\/지연 가능(CP에 레벨링 적용)\n관리자원 : 핵심 인력 \/ 제약 : 자원 \/ 원가 : 절감 가능\n자원 투입 균형 위해 일정 평준화, 원가 부담 억제"},{"토픽":"리소스 스무딩\n(자원 유연화)","키워드":"비 제 일 원 초","도식":null,"정의":"일정 한계에 따라 자원 최적화 통해 Task 목표량 준수하는 기법\n\n일정 지연을 방지하기 위하여 자원을 균형있게 투입하여 프로젝트 CP 활동의 지연을 방지하는 일정관리 기법","내용":"조건 : 자원 간 불균형 발생, 주공정(스케줄) 변화 불가\n주공정 : CP 변경\/지연 없음\n관리자원 : 비핵심인력 \/ 제약 : 일정(End) \/ 원가 : 초과 가능\n일정 지연 방지 위해 자원 투입 균형\n* 보통 레벨링 후 스무딩 수행"},{"토픽":"PERT\n(Program Evaluation and Review Tech)","키워드":"추 단 활","도식":null,"정의":"낙관\/정상\/비관치 기반, 확률개념 반영해 위험 고려한 일정 산정 기법","내용":"PERT\/time : 작업 시간 추정 > 단계 시간 > 활동 시간 계산\n- 추정(3점 추정) : [낙관 + (4 * 정상) + 비관] \/ 6\n- 단계 : TE(이른 예정일), TL(늦은 완료일), S(슬랙, 여유)\n- 활동 : ES, EF, LS, LF, 여유시간 0면 CP\nPERT\/cost : 시간과 비용을 함께 계획, 최소 비용 위함\n\n작업의 순서를 정함"},{"토픽":"실질적 일정 단축 방안","키워드":"재 인 초 품 범 버","도식":null,"정의":null,"내용":"Re-Estimation : 현 자원\/일정 재검토, Critical Path 재도출\n인적자원 품질 향상 : 도메인\/IT 기술 반복 교육\n초과 근무, 품질 조정(비핵심 업무 품질 낮춤),\n범위 축소(낮은 우선 순위), CCM 버퍼 축소"},{"토픽":"납기 지연 4법칙","키워드":"파 자 후 학","도식":null,"정의":null,"내용":"파킨슨 법칙 : 업무를 마치는 데 걸리는 시간이 업무를 위해 할당된 시간만큼 늘어난다\n자기 방어 : 작업 일찍 끝내면 다른 작업 시킬까봐 완료 숨김\n후행공정 미준비 : 일찍 끝냈지만 뒷작업 준비가 안됨\n학생 증후군 : 닥치기 전까지는 일을 안함"},{"토픽":"Brook's 이론","키워드":"n(n-1)\/2","도식":null,"정의":"지연되는 프로젝트에 인력을 더 투입하면 커뮤니케이션 비용 증가로 오히려 늦어진다는 이론","내용":"추가 인력 > 커뮤니케이션 비용 ↑ > 업무 오류 > 일정 지연\n- 비용 관리 기법중 하나인 M\/M(Man Month) 기법의 오류\n- 사람별 기여도 다름, 후반 투입인력은 오히려 M\/M 손해\n> Crashing(여유 자원 빼서 투입), 패스트 트래킹(병렬)"},{"토픽":"EVM\n(Earned Value Management)","키워드":"\nSV, CV, SPI, CPI\n회피, 전가, 위임, 수용\n\nSEP, CEA \/ EV 기준","도식":null,"정의":"진척 상황을 비용으로 표현, 프로젝트 일정 및 원가를 수치적 관리하는 기법","내용":"Budget At Completion(총 예산)\nPV(계획작업), EV(완료작업), AC(투입실적원가)\/SV, CV, SPI, CPI\nEstimate To Completion(추가 발생될 원가, EAC-AC)\nEAC(종료 시 원가), VAC(종료시 절감 원가 = BAC-EAC)\nEAC = BAC \/ CPI\nSV = EV – PV\nCV = EV – AC\nSPI = EV \/ PV\nCPI = EV \/ AC\nETC = EAC – AC or ETC = (BAC – EV) \/ CPI\nEAC = BAC \/ CPI or EAC = AC + ETC\nVAC = BAC – EAC"},{"토픽":"프로젝트 위험관리","키워드":"식 분 계 실\n활 공 강 수\n회 전 완 수","도식":null,"정의":"위험 식별\/분석 후 긍정적 위험 증대, 부정적 위험 최소화 관리 방안","내용":"위험 식별 > 정성\/정량 분석 > 대응 계획 > 대응 실행\n긍정적 : 활용 \/ 공유(제 3자에 기회 공유) \/ 강화 \/ 수용\n부정적 : 회피 \/ 전가 \/ 완화 \/ 수용\n공통 : 에스컬레이션\n* 왼쪽(활용\/회피)이 적극적, 오른쪽(수용)이 소극적 방안"},{"토픽":"위험 분석 기법","키워드":"금 민 의 몬 \/ 피 전 리","도식":null,"정의":null,"내용":"정성 : PI, 전문가 영향, Risk 분류\n정량 : 금전적 분석(EMV), 민감도 분석, 의사결정나무,\n몬테카를로(반복적 무작위 샘플링)"},{"토픽":"정량적 위험분석 지표","키워드":"노 발 단노자 연단발","도식":null,"정의":null,"내용":"노출 계수(EF) : 자산에 대한 손실 가능성(0~1)\n연간 발생률(ARO) : 연간 위험 발생 가능성(0~1)\n단일 손실 예상액(SLE) : 노출 계수 X 자산 가치\n연간 손실 예상액(ALE) : 단일 손실 예상액 X 연간 발생률\n* [연간 보안 예산 ≤ 연간 예상 손실액] 이어야 합리적"},{"토픽":"금전적 기대값 분석\n(EMV)","키워드":"기 가 * 발","도식":null,"정의":"불확실성 고려, 사건의 가치와 발생률 곱해 미래 기댓값을 도출하여 위험 계산하는 기법","내용":"기댓값(EMV) = 사건의 가치(V) * 발생 확률(P)\n- EMV < 0 : 위협(부정적 위험) \/ EMV > 0 : 기회(긍정적)\n- 복권 1장 천원, 당첨금 만원, 당첨 확률 7%일 때 EMV\n= (1만 - 1천) * 0.07 + (0-1000) * 0.93 = -300원\n* 기댓값 분석 시 효용이론 통해 정성적 측면도 고려"},{"토픽":"효용 이론\n(Utility Theory)","키워드":null,"도식":null,"정의":"사람이 느끼는 효용을 서수적, 기수적으로 나타내는 효용 측정 이론","내용":"기수적 효용 : 효용을 수치화 가능하다\n- 담배가 4의 효용, 피자가 8의 효용이면 피자가 2배 효용\n서수적 효용 : 효용이 더 높다\/낮다만 알 수 있다\n- 피자 한조각이 담배 한 갑보다 낫다\n\n기대효용 : 경제주체의 판단은 결과에 관한 효용의 기대치에 입각하여 이루어진다\n한계효용 : 일정량의 재화가 이것을 소비하는 개인의 주관적 욕망을 충족시키는 정도를 재는 척도"},{"토픽":"민감도 분석","키워드":null,"도식":null,"정의":"위험 영향이 큰 순서로 배열, 한 위험 빼고 나머지는 고정 후 해당 위험의 변화가 미치는 영향 분석 기법","내용":"토네이도 다이어그램으로 영향력 높은것~낮은것 순 배열\n- Y축 : Risk \/ X축 : 비관~낙관치(왼쪽은 -, 오른쪽 +)\n- 인력교체, 규제, 범위변경 이런 위험을 위부터 아래로 배열"},{"토픽":"의사결정나무","키워드":"의 사 결","도식":null,"정의":"기댓값과 Risk 확률을 곱해 잠재적 영향 산출하는 위험 분석 기법","내용":"의사결정 > 사건 > 결과(EMV 기댓값) \/ 오른쪽으로 쭉 그려\n- 의사결정 : 인력 투입, 업무 재분배 등\n- 사건 : 투입, 재분배\n- 결과 : 각각 성공\/실패, 확률과 기댓값(돈) 각각 입력\n\n가지치기 필수!"},{"토픽":"몬테카를로 시뮬레이션","키워드":null,"도식":null,"정의":"원가\/기간의 확률 분포 기반, 반복적 무작위 샘플링으로 프로젝트 원가\/일정의 분포를 산출하는 기법","내용":"원가는 WBS, 일정은 PDM(선후행 도형법)등을 모델로 함\n변수의 확률분포 > 모델 > 난수 발생 > 일정\/원가 준수 확률\n- Y : 발생 가능성 \/ X : 원가\n- 42M$의 산정치 충족 확률은 불과 12%다 이런식으로 추정"},{"토픽":"위험 관리","키워드":"식 분 대 감","도식":null,"정의":"프로젝트 수행 시 아직 발생하지 않은 확률적 사건 선제적 대응 관리","내용":"식별 > 분석 > 대응 > 감시\/통제\n당장 해결 안해도 프로젝트 진행 가능\n- 일정, 비용, 품질, 인력 등"},{"토픽":"이슈 관리","키워드":"식 분 실 감","도식":null,"정의":"현재 프로젝트에서 이미 발생한 부정적 영향 주는 문제 관리","내용":"식별 > 분석\/평가 > 실행 > 감시\/리뷰\n발견 즉시 처리 필요\n- 변경 요구사항, 버그, 장애 등"},{"토픽":"Boehm의 10대 위험 목록","키워드":"프 인 비\n개 소 인\n요 요 과\n품 취 성 모 기","도식":null,"정의":null,"내용":"프로젝트관리 : 인력부족, 비현실적 일정 및 예산\n개발 : 잘못된 기능의 SW 개발, 잘못된 I\/F개발\n요구사항 : 과포장, 계속적인 요구변경\n품질 : 외부모양\/기능빈약, 실시간 성능빈약, 기술적 취약"},{"토픽":"S\/W 비용 산정","키워드":"상 하 수\n상 록 맨\n하 전 델\n수 코 엪","도식":null,"정의":"SW 규모에 근거해 개발에 필요한 소요공수, 기간, 투입자원 등 비용을 예측하는 활동","내용":"상향식 : LOC, M\/M\n하향식 : 전문가 판단, 델파이\n수학식 : COCOMO(MM = a * LOC), FP"},{"토픽":"기능점수(FP)","키워드":"유 범 데이트 미 조 개\n규 유 언 품 특\n\nISO 14143","도식":null,"정의":"ISO\/IEC 14143 표준 기반, EI, EO 등 사용자 요구 기반 SW 규모를 정량적 산정 기법","내용":"데이터(ILF, EIF) \/ 트랜잭션(EI, EO, EQ)\n유형 결정 > 범위\/APP 경계 식별 > Data\/트랜 기능 측정\n> 미조정 기능점수 결정 > 조정 기능점수 결정 > 개발비 산정\n- 유형 : 개발 플젝, 개선 플젝, APP(패키지, 완료 제품)\n* 보정 계수 : 규모, APP 유형, 언어, 품질, 특성(분산, 성능)"},{"토픽":"정통법","키워드":"설to폐\n원 뎉 렡 엪 기","도식":null,"정의":"SW 설계 단계 이후 폐기까지, 일정 및 원가 산정 등 위해 기능의 유형별 복잡도를 적용해 정밀한 기능점수 산정하는 기법","내용":"시점 : 설계 이후~폐기까지(상세 설계정보 제공된 시점부터)\n목적 : 일정 및 원가 산정, 개발\/유지보수 범위 설정\n측정 : Data 기능 + DET, RET 수 \/ 트랜 기능 + DET, FTR\n- ILF, EIF 각 DET, RET 식별, 기능복잡도 따라 가중치 결정\n- RET(Record Element Type) : 테이블 수\n- DET(Data Element Type) : 고유 필드 수\n- FTR(File Type Reference) : 연계되는 테이블 수\n복잡도 : 기능별 복잡도 매트릭(Low, Average, High)"},{"토픽":"간이법","키워드":"시 목 측 복\n기 예 견 대 데 트 평","도식":null,"정의":"SW 기획 및 발주 단계에서 예산 추정 등 위해 평균 복잡도를 적용해 단순하게 기능점수 산정 기법","내용":"시점 : 기획 및 발주 단계(개발 요건만 정의 시 적용 가능)\n목적 : 예산 수립, 제안서 견적, SW 사업 대가 산정\n측정 : 데이터 기능, 트랜잭션 기능\n복잡도 : 평균 복잡도"},{"토픽":"LoC 기법\n(Line of Code)","키워드":"낙중비 예 노비생","도식":null,"정의":"각 모듈별 코드 라인 수 예측 후 이에 따라 구현단계의 M\/M 비용 산정 기법","내용":"낙관\/중간\/비관치 > 예측치 > 비용(노력, 개발비용, 생산성)\n- 낙관 : 한 모듈 라인 수를 가장 적게 칠 때의 예상 라인 수\n- 추정 LOC = [낙관치 + (4 * 중간치) + 비관치] \/ 6\n- 개발기간 = 노력(M\/M) \/ 투입인원\n- 개발비 = 노력(M\/M) * 단위비용\n- 생산성 = LOC \/ 노력(M\/M)"},{"토픽":"M\/M 기법\n(개발 단계별\n노력 기법)","키워드":null,"도식":null,"정의":"구현 단계 위주의 LoC를 보완, 분석\/설계 등 전체 SDLC의 인력 및 자원을 산정하는 기법","내용":"M\/M을 SDLC 각 단계에 적용해 단계별 산정\n- 코딩만 대상으로 하는 LoC 보다 정확"},{"토픽":"COCOMO 모형\n(COnstructive COst MOdel)","키워드":"엘 방 비 \/ 조 반 내","도식":null,"정의":"구현\/코드 위주의 LOC를 보완, 분석\/설계 등 전체 SDLC의 인력 및 자원을 비용신장 방정식 기반 산정기법","내용":"LoC 예측(가중치) > SW 유형별 비용산정 방정식 대입 > 비용 산정\n- 조직형 : 기관 내 개발, 중\/소규모, 업무\/계산용, ~5만 line\n- 반분리형 : 조직-내장의 중간, 트랜 처리\/OS\/DBMS, ~30\n- 내장형 : 대규모 트랜\/OS, 미사일\/실시간\/신호제어, 30~"},{"토픽":"COCOMO 종류","키워드":"기 중 발","도식":null,"정의":null,"내용":"기본형 : LoC와 개발 유형만 이용해 비용 산정\n중간형 : 기본형 공식 + 여러 다른 요인\n발전형 : 중간형 + 개발 공정별로 M\/M 더 상세화"},{"토픽":"H\/W 규모 산정","키워드":"구 기 참 가\n수 참 시\n웹 와 오 \/ 씨 메 디 스","도식":null,"정의":"기본 용량과 성능 요구사항이 제시되었을 때, 이를 시스템 요구사항으로 변환하는 기법","내용":"구축 방향\/기초자료 > 기초자료 업무 분석 > 참조모델 > 모델별 가중치\n\n- 모델 : 1~3(WEB+WAS+OLTP > WEB+WAS, OLTP > ..)\n수식계산법(수요 기반 계산, 보정 적용), 참조법(경험 기반,\n유사 sys 규모 적용), 시뮬법(업무 작업부하 모델링\/시뮬)\n대상 : WEB, WAS, OLTP 서버의 HW\n- 서버마다 CPU, 메모리, 디스크(시스템\/데이터), 스토리지\nThink Time 0으로 하고 Active User 넣어서 예시"},{"토픽":"CPU 성능 기준치","키워드":null,"도식":null,"정의":null,"내용":"TPC-C : DB 테이블 5개  트랜 규정, 분당 트랜 측정(tpm)\nSPEC jbb2015 : 자바 App 기반 시나리오, Critical-jOPS는 SPEC 응답시간 내 처리, max-jOPS는 응답시간 상관 없음\nSPC-1 : 실환경 시뮬, 40% 읽기\/60% 쓰기 요청"},{"토픽":"SW평가비용","키워드":"예 평 내 외","도식":null,"정의":"SW 개발시 불량 감소를 위한 품질관리 활동 비용을 기간 원가로 계산 관리하는 비용","내용":"초기 설계가 잘못 될수록 실패 비용의 증가로 이어짐\n\n예방비용 : 프로젝트 관리, 교육, 형상관리 및 기술지원 투입 공수\n평가비용 : 품질활동(동료\/고객 검토, 내\/외부 감리)과 테스트 활동 투입 공수\n내부 실패 비용 : 품질활동(동료\/고객 검토 후 결함조치, 감리 후 결함조치), 테스트 후 결합 조치에 투입 공수\n외부 실패 비용 : 개발한 SW의 오픈 이후 안정화 기간동안 발견한 결함 처리를 위해 투입된 공수"},{"토픽":"스프링프레임워크","키워드":"역 의 어 서 웹 컨 엠","도식":null,"정의":"전자정부 프레임워크 JAVA 플랫폼 상 경량화 된 오픈소스 웹 애플리케이션 프레임워크","내용":"IoC(Inversion of Cntrl, 제어 역전) : 제어권이 개발자가 아닌\n컨테이너에 있음\nDI(의존성 주입) : 컨테이너가 class 간 의존성 알아서 넣어줌\nAOP(Aspect Oriented Programming) : 로깅\/트랜잭션\/\n보안 같은 공통 기능은 아예 따로 빼서 재사용 극대화\nASP(Active 서버 Page) : 서버에서 실행되는 script\nWeb : Request 기반 프레임워크\nContext : 동적 언어 등 지원 \/ J Unit 등 테스팅 용이\nMVC : 다른 프레임워크랑 통합 용이"},{"토픽":"ASP\n(Active Server Page)","키워드":"접 디 태 출","도식":null,"정의":"<% 와 %> 구분자 기반으로 서버에서 실행되고 결과만 브라우저에 표출하는 동적 스크립트","내용":"ASP 접속 > ASP.DLL로 해석 > HTML 태그 > 브라우저 출력\n<% 와 %> 사이의 script는 서버에서 실행됨\n- 브라우저에서 HTML 보기 해도 ASP 코드 내용 안보임\n- HTML 소스에는 그 결과값만 보임\n- 윈도우 OS에서만 작동 > OS 종류가 알려지니 보안 취약\n* 자바스크립트는 사용자 쪽에서 실행, ASP는 서버 실행"},{"토픽":"상용 SW 품질성능평가시험","키워드":"경 상 억 B\n대 사 설 조 의 실 결","도식":null,"정의":"동종 경쟁 제품 간 기능 및 성능 비교 평가 통해 요구사항 만족하며 품질\/성능 우수한 제품 가려내는 시험","내용":"SW 진흥법 제 55조(상용 SW 구매 시 평가 의무)\n대상 : 경쟁입찰 + 상용SW + 1억 이상 + BMT 대상 분야\n제외 : 조달청 종합쇼핑몰 구매 \/ 직접 구매 대상 아닐 시\n대상 검토 > 사전협의 > 시험 설계 > 조달 >\n시험 의뢰(TTA에 의뢰) > 실시 > 결과 반영"},{"토픽":"상용 SW\n직접구매제도\n(구 분리발주)","키워드":"삼 오 인 조\n비 기 효 민\n분 대 예 발","도식":null,"정의":"대형 SI 업체 독식 방지 위해 공공 SW 발주 시 상용 SW는 분리해 별도 발주하는 제도","내용":"SW 진흥법 54조\n대상 : 3억 이상 사업(VAT 포함)이면서(1차 조건)\n- 5천만원 이상 S\/W 또는 동일 SW 다량구매가 5천 초과 +\nGS, CC, NEP, NET 등 국정원 검증\/지정 인증 SW\n- 조달청 종합쇼핑몰 등록 SW(5천 미만이라도 대상)\n예외 : 비용 상승 \/ 기간 지연 \/ 비효율 증가 \/ 민투형 사업\n사업 분석 > 대상 검토 > 예외 검토 > 사업 발주"},{"토픽":"SW 단계별 발주\n(구 분할 발주)","키워드":null,"도식":null,"정의":"SW 개발 생산성 향상 위해 SW 공정을 기획-설계와 상세설계-인수의 2단계로 분할하여 발주하는 제도","내용":"SW 진흥법 44조\n필요 : 요구 명확, 기본설계 강화, 물리환경 고려한 상세설계\n특징 : 복수 사업자, 설계와 구현 분할, 단계별 별도 수행\n장점 : 크로스 체크 가능, 벤더 의존성 감소\n단점 : 책임소재 불분명, 사업자 간 이슈"},{"토픽":"발주 표준 프로세스","키워드":"핵 지 조\n핵 계 계 운 공\n지 품 기\n조 기 관","도식":null,"정의":"SW 발주 시 준수해야 하는, 3개 수명주기의 관점별 20개의 세부 표준 프로세스","내용":"핵심 수명주기 : 계약, 계획, 운영, 공학 관점\n- 발주, 공급, ISP, 운영, 유지보수, 개발 프로세스\n\n지원 수명주기 : 품질관리, 기타 관점\n- 품질보증, 검증, 확인, 합동검토, 감리, 문서화, 형상관리,\n문제해결, 사용성 프로세스\n\n조직 수명주기 : 기획, 관리 관점\n- 정보화기획, 관리, 기반구조, 프로세스 개선, 인적자원,\n성과관리, 자산관리, 재사용 프로그램 관리, 도메인공학"},{"토픽":"민간투자형 SW 사업","키워드":"소진 40\n국 민 협\n민 공 구\n제 검 인 예 공 평","도식":null,"정의":"국민 편익 위해 민간의 자본, 기술로 추진하는 민관 협력 공공 SW 사업","내용":"SW 진흥법 40조\n대상 : 공공 SW 사업 \/ SW 및 Infra 포함\n요건 : 국민 편익 \/ 민자 50% 이상 or 민간 기술 \/ 민관 협력\n유형 : 민간 \/ 공공 \/ 구매형\n운영 방식(수익창출 방법) : BTO(기업 운영) \/ BTL(gov 운영)\n제안서 > 사업검토 > 인정, 고시 > 예산 > 제3자 공고 > 평가\n* ISP 수립 면제(사업계획서\/제안서로 ISP 갈음)"},{"토픽":"공공 SW 사업 과업 심의 가이드","키워드":null,"도식":null,"정의":"공공기관의 SW 발주 전 과업내용 확정\/변경 시 기준 등 수립한 문서","내용":"SW 진흥법 50조\n대상 : 공공이 발주하는 모든 SW 사업(상용 SW 구매 포함)\n과업심의 위원회 : 위원장 1명, 5~10명 이내, 간소는 2명 이상"},{"토픽":"공공 SW 사업 과업 심의 가이드 과업 확정 기준","키워드":"내 기 상 영","도식":null,"정의":"사업 전, 과업 확정의 적정 기준","내용":"과업 내용 : 상세 요구\/예산(사업계획서, RFP 기반)\n사업 기간 : FP, RFP, 유사 사업 자료 기반\n상용 SW 구매 제외 : 직구 제외 여부, 대상 중 예외 50% 이상\nSW 영향평가 재평가 : 사업자가 결과 이의 시 위원회 심의"},{"토픽":"공공 SW 사업 과업 심의 가이드 과업 변경 기준","키워드":"법 기 상","도식":null,"정의":"사업 중, 과업 변경의 적정 기준","내용":"법\/제도 : 법령상 업무처리 방식 변경, 기간\/금액 등 변경\n기술\/정책 : 정책에 따른 Open API 추가, 변경 시 효율 검토\n상호 합의 : 위원회 심의 불필요, 발주자\/사업자 합의"},{"토픽":"공공 SW 사업 과업 심의 가이드 과업 변경 절차","키워드":"요 심 결 내 계","도식":null,"정의":null,"내용":"변경 요청 > 심의 > 결과 통지 > 변경 내역 작성 > 계약 변경\n- 요청 : 사업자 or 발주자가 상대한테 요청\n- 결과 통지 : 14일 이내, 사업자에 통지(조치 계획서)\n- 내역 작성 : 계약 금액 조정 시 필수 수행\n- 계약변경 : 동의 시 변경, 이의 시 재심의(14일 내)"},{"토픽":"차세대 시스템 오픈 시 문제점","키워드":null,"도식":null,"정의":null,"내용":"조직 : 인력 교체\/퇴사, 의사소통 문제\n인프라 : 산정 오류(Traffic, HW)\n운영 : 유저가 IT 비전공 시 검증 어렵, 오류 잔존\n서비스 : 요구 변경, 오류 시 롤백 어려움, 성능 미흡"},{"토픽":"차세대 시스템 오픈 시 점검","키워드":null,"도식":null,"정의":null,"내용":"Test : 주요 로직, Data 검증\nWBS : 주요 기능 개발\nCut Over List : 운영 준비, 롤백 가능 여부, Cron 모니터링\n유관 I\/F 관리 : 상호 개발\/수정\/일정 관리, Data 송수신"},{"토픽":"공공기관 시스템 구축 계약 방식","키워드":"품 협 경","도식":null,"정의":null,"내용":"품질 기반 : 기능보다 가격\n협상에 의한 계약 체결 : 보통 이거 택함\n경쟁적 대화에 의한 계약 : 문제를 혁신적 방법\/해결"},{"토픽":"SW 기술성 평가","키워드":null,"도식":null,"정의":"예비타당성 조사 전에 기술'성'을 평가하는 것","내용":"제안서 평가 시의 가격\/기술 평가랑 다른거임!\n- 이건 가격 20% + 기술 80% or 가격 10% + 기술 90%\n- 1, 3, 5 이렇게 점수 확실히 차등하는 차등 점수제 도입함"},{"토픽":"MAS\n(다수 공급자 계약)","키워드":"공 등 구","도식":null,"정의":"조달청에서 업체랑 계약 체결, 기관은 체결된 업체에 주문하는 방식","내용":"조달청 공고 > 공급자 물품 등록 > 기관이 구매\n- 구매 시 2단계 경쟁 등 수행\n- 1단계 : 한 품목에 업체 5개 이상 시 조달청이 몇 개 선정\n- 2단계 : 이 중 하나를 기관이 알아서 평가해 최종 선정"},{"토픽":"이해관계자 관리","키워드":"권 합 긴\n착 계 실 통 - 식 계 관 통","도식":null,"정의":"프로젝트에 영향을 주거나 받을 수 있는 사람, 그룹, 조직 식별 이해관계자의 기대사항과 영향력을 파악 의사결정과 실행에 영향력 있는 이해관계자에 대한 적절한 관리전략을 포함한 프로세스","내용":"절차 : 착수 > 계획수립 > 실행 > 통제\n수행 : 식별 > 관리계획 > 참여관리 > 참여통제\n\n현저성 모델 : 권력, 합법성, 긴급성 3가지 속성으로 이해 관계자 분류 \/ 등급부여"},{"토픽":"인력관리","키워드":"R A C I\n관 절 회 수 해","도식":null,"정의":"Responsible(실무담당자) : 해당 업무를 실제로 수행하는 주체\nAccountable(의사결정권자) : 해당 업무에 대해 최종 책임을 지는 주체\nConsulted(업무수행 조언자) : 업무 수행과 관련하여 상의가 필요한 주체\nInformed(결과보고 대상자) : 해당 업무 수행 결과를 통보 받는 주체\"","내용":"프로젝트 갈등원인 해결전략\nForcing: 자기의견 관철\nProblem Solving : 문제해결\nCompromising : 절충\nWithdrawing : 회피\nSmoothing : 상대의견 수용\n"},{"토픽":"동기부여이론","키워드":"매 E 2 세 XY 기 공 리","도식":null,"정의":"개인을 동기부여하는 요인들이 무엇인지에 대해 설명","내용":"동기부여이론\n매슬로의 욕구 5단계\nERG(존재,관계,설장) 이론\n2요인 이론(위생\/동기)\n세가지 욕구(성취,친교,권력)\nX이론 Y이론(X, Y형으로 구분)\n\n과정이론 : 기대이론 \/ 공정성이론 \/ 리더십이론"},{"토픽":"SW 제품품질","키워드":"GS 소진20 BMT\n\n9126\n14598\n12119\n25000\n\n기 신 사 효 유 이","도식":null,"정의":"IT 프로젝트를 진행하거나 SW 패키지, 완성된 제품 등에 대해 기능성, 신뢰성, 사용성, 효율성, 유지보수성 등을 평가하는 푸밎ㄹ","내용":"국내\nGS인증 : ISO 25051, 25041, 25023 국제표준 기반\nSW진흥법 20조 : SW 품질 확보 및 유통 촉진 품질인증\nBMT 시험 : SW 진흥법 55조, 품질성능 평가시험\n\n국제\nISO\/IEC 9126 : 기능성, 신뢰성, 사용성, 효율성, 유지보수성, 이식성\nISO\/IEC 14598 : SW 제품평가 프로세스 안내\nISO\/IEC 12119 : SW 패키지들에 대한 품질 요구사항\nISO\/IEC 25000 : SQuaRE 표준의 가이드 라인\/품질평가 관리 표준"},{"토픽":"SW 프로세스 품질","키워드":"SP 소진21\n\n9000\n12207\n15504\nASPICE\nCMMI","도식":null,"정의":"IT 프로젝트 진행 및 운영함에 있어 SW 프로세스의 수립 체께 및 적합성, 효율성 등을 평가하는 품질","내용":"국내\nSP인증 : 영역\/평가항목\/세부평가항목 3개등급\nSW 진흥법 21조 : SW 개발\/유지\/관리활동\n\n국제\nISO 9000 : 품질시스템 보증\nISO\/IEC 12207 : SDLC 프로세스 내 SW 품질 요구사항\nISO\/IEC 15504 : SPICE 모델\nASPICE : 자동차 산업\nCMMI : SW 개발 프로세스의 성숙도 측정"}]