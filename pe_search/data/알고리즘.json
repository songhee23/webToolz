[{"토픽":"점근 표기법","키워드":"오 세 옴","도식":null,"정의":"알고리즘 시간 복잡도를간소화 해 표기하는,빅오, 빅세타, 빅오메가 등의표현법","내용":"빅 오(O) : 최악의 경우에서의 시간 복잡도\n빅 세타(Θ) : 평균적인 경우에서의 시간 복잡도\n빅 오메가(Ω) : 최선의 경우에서의 시간 복잡도"},{"토픽":"대표 알고리즘시간 복잡도","키워드":"해 이 순 퀵머 삽버선\n\n일 로 엔 엔로 엔제","도식":null,"정의":"시간 복잡도는 “얼마나 빠르게 실행되느냐” 그리고 공간 복잡도는 “얼마나 많은 자원이 필요한가?”\n\n좋은 알고리즘이란, “시간도 적게 걸리고 자원의 사용도 적어야 하는 것","내용":"O(1) : Hash\nO(logN) : 이진 탐색\nO(N) : 순차 탐색\nO(NlogN) : 퀵 소트, 머지 소트\nO(N^2) : 삽입, 버블, 선택 정렬"},{"토픽":"결정 문제해결 알고리즘","키워드":null,"도식":null,"정의":"Yes 또는 No로 답할 수 있는문제를 해결 하기 위한결정적\/비결정적 알고리즘","내용":"결정문제 : Yes 또는 No로 답할 수 있는 문제\n결정 : 계산 각 단계에서 한가지 경우만 고려해도 되는 Algo\n비결정 : 계산 각 단계에서 여러 경우 고려해야 하는 Algo"},{"토픽":"알고리즘계산 복잡도","키워드":"P N 컴 하","도식":null,"정의":"문제 해결의 난이도가 아닌,해당 문제 해결하는빠른 알고리즘이 있는지에 대해같은 성질을 갖는 문제들 집합","내용":"P : 결정적 Algo로 다항식 시간 내 풀 수 있는 문제 \nNP : 비결정적 Algo로 다항식 시간 내 해답 검산 가능\nNP-Complete : 다른 NP들을 다항 환원, 간접 해결 해줌\nNP-Hard : NP 아닐 수 있지만 NP Com으로 환원 가능문제\n* NP, Com은 다루기 힘들다 증명됨 \/ Hard는 그것도 증명 X"},{"토픽":"P, NP 문제 예시","키워드":null,"도식":null,"정의":null,"내용":"P : 정렬, 정렬된 배열 검색, 행렬 곱셈, 최단경로, MST\nNP, NP Com : 해밀턴 회로((N-1)! 개의 답), SAT(2^n)\nNP-Hard : 0-1 배낭 문제, 순회 외판원(TSP), 그래프 색칠"},{"토픽":"허프만 코딩","키워드":"좌0 우1 접 최","도식":null,"정의":"문자의 빈도를 이용해Min Heap 기반으로Text Data 무손실 압축 기법","내용":"왼쪽이 0, 오른쪽이 1\n빈도가 높은 기호일수록 경로를 짧게 빈도가 낮은 기호일수록 경로를 길게 설정\n\n접두부 : 디코딩에 사용하기 위해 다른 문자와 충돌하지 않는 고유 이진코드\n최적코드 : 인코딩된 메시지의 길이가 가장 짧은 코드\n빈도수 높은 순으로 위치\n\"aaabrbacard\" > 00010010110001100101111(23비트)\na > 5번 > 0\nb > 2번 > 100 \/ r > 2번 > 101\nc > 1번 > 110 \/ d > 1번 > 111"},{"토픽":"반복길이 부호화\n(Run Length)","키워드":null,"도식":null,"정의":"매우 간단한 비손실 압축 방법으로, 데이터에서 같은 값이 연속해서 나타나는 것을 그 개수와 반복되는 값만으로 표현하는 방법","내용":"아이콘 등의 간단한 이미지와 같이 연속된 값이 많이 있는 데이터에 효과적\n\n런 렝스 부호화는 만화나 애니메이션 등과 같이 배경의 변화가 없는 영상에 적합"},{"토픽":"산술부호","키워드":null,"도식":null,"정의":"무손실 압축에 사용되는 엔트로피 부호화 알고리즘 가운데 하나\n\n다른 엔트로피 부호화 알고리즘이 각각의 기호를 1:1로 부호로 대체하는 반면에, 산술 부호화는 전체 메시지를 하나의 실수 n으로 대체","내용":"전체 메시지를 하나의 단위로 취급\n\n전체 메시지를 하나의 실수 n으로 대체함산술 부호화는 주어진 기호와 확률분포에 대해 최적에 가까운 압축률"},{"토픽":"LGW\n(Lempel-Ziv-Welch)","키워드":null,"도식":null,"정의":"아브라함 렘펠과 제콥 지브, 테리 웰치가 만든 공통 비손실 데이터 압축 알고리즘]","내용":"RLE 기술과 비슷하게 반복되는 문자열이나 단어를 검색하여 변수에 저장코드\n\n영어 문장의 단어처럼 주로 함께 발생하는 가변 길이의 기호\/문자열을 표현하는데 고정 길이 코드워드 사용"},{"토픽":"최단경로알고리즘","키워드":"다 벨 플 A","도식":null,"정의":"정점-정점 연결하는 경로 중간선들의 가중치 합이 최소인경로를 찾는 알고리즘","내용":"다익스트라 : 하나의 정점 ~ 모든 다른 정점\n벨만포드 : 하나의 정점 ~ 모든 다른 정점, 음의 간선 해결\n플로이드 와샬 : 2차원 배열, 모든 정점 ~ 모든 정점\nA* : 휴리스틱, 탐색속도 빠름"},{"토픽":"다익스트라","키워드":"무 영 갱 반\nO(VlogE)","도식":null,"정의":"하나의 시작 정점으로부터모든 다른 정점까지의최단 경로 탐색 알고리즘","내용":"초기값은 다 무한대 > 시작 정점은 거리 0 > 인접 노드 경로\n길이 갱신 > 경로(가중치) 변화 없을 때까지 반복\n* 현재 노드에서 가장 가까운 거리를 선택(greedy)\n인공위성, GPS SW, 링크 기반 라우팅"},{"토픽":"벨만 포드","키워드":"무 영 갱 반\nO(VE), 반복이 V-1번","도식":null,"정의":"하나의 시작 정점으로부터모든 다른 정점까지,음의 간선도 해결 가능한 최단 경로 알고리즘","내용":"엣지 쭉 써놓고 모든 노드 탐색, 다익보다 느림\n음수 가중치 있으면, 오히려 돌아가는게 더 이득일수도!\n> 벨만은 요거 따질 수 있고, 다익은 greedy라 그게 안됨\n음수 순환 생기면 문제(계속 가중치 업뎃 되니까)"},{"토픽":"플로이드 와샬","키워드":"2 경 갱 반\nO(V^3)","도식":null,"정의":"2차원 배열을 통해모든 정점~모든 정점까지의최단 경로 알고리즘","내용":"초기 2차원 배열(노드별 인접값만 씀)\n> 경유 노드 탐색(노드 A 거쳐가는 경우, B 거치는 경우…)\n> 가중치 갱신 > 변화 없을 때까지 반복\nGIS, 네트워크 분석"},{"토픽":"A* 알고리즘","키워드":"F G H 패 오 클\n휴리스틱 복잡도\n시작 ~ 목적지 지정","도식":null,"정의":"탐색속도를 높이기 위해휴리스틱 방법을 사용한최단경로 알고리즘","내용":"Open List : 계속 갱신 노드들, Close List : 갱신 끝난 노드\nF(G+H), G(시작부터 실제 거리), H(휴리스틱), Parent 노드\nH : 해당 노드~목적지까지 도달에 소요될거로 추정되는 값\n하나의 시작점 ~ 하나의 목적지, 네비게이션 등"},{"토픽":"최소신장트리\n(MST)","키워드":"크 프","도식":null,"정의":"모든 정점끼리 연결된,가중치 있는 간선을 갖는무방향 그래프의 가중치 합이최소가 되는 신장 트리","내용":"신장 트리 : 모든 정점 간 연결되나 사이클이 없는 그래프\n신장 트리에서 모든 edge 가중치 합이 최소인게 MST\nMST 도출 알고리즘 : 그리디(크루스칼, 프림)"},{"토픽":"탐욕법\n(Greedy Algorithm)","키워드":"크 프","도식":null,"정의":"결정할 때마다그 순간의 최적해를 선택해최종 해답에 도달하는 전략","내용":"크루스칼, 프림\n\n좌측 예시는 최대값 찾을 때 그리디 알고리즘 적용 결과"},{"토픽":"크루스칼알고리즘\n(Kruskal)","키워드":"정 선 멈\n최선 : O(m logm)\n최악 : O(n^2 logn)","도식":null,"정의":"모든 비용을 순차적 나열해최저비용 간선(신장)들을선택해 나가는 그리디 알고리즘","내용":"간선들 가중치 정렬 > 최소부터 선택 > 사이클 없이 n-1개\n선택되면 멈춤\n* n = 정점 수 \/ m = 간선 수\n* m이 적으면 크루스칼 유리, 많으면 프림이 유리"},{"토픽":"프림 알고리즘\n(Prim)","키워드":"초 다 반\nO(n^2)","도식":null,"정의":"정점을 선택하고그것과 연결된 가장 적은 비용 정점을 선택하는 알고리즘","내용":"시간 복잡도 : O(E*logV)\n최초 (임의)정점 선택 -> 다음 정점(최소비용) 선택 -> 반복\n* 기존 선택 정점과 연결된 간선들(집합)만 계속 비교"},{"토픽":"백트래킹","키워드":"퀸 외판원","도식":null,"정의":"어떤 노드의 유망성 점검 후,유망하지 않으면 가지치기,부모 노드로 되돌아가다른 자손 노드 검색하는 전략","내용":"N-Queen 문제 : 크기 N*N 체스판 위에 퀸 N개가 서로\n공격 불가하게 놓는 방법의 수를 구하는 알고리즘\n외판원(TSP) : 도시별 이동 비용 주어질 시 모든 도시 1번씩\n방문 후 시작점으로 돌아오는 최소 비용 이동 순서, NP hard"},{"토픽":"분할정복","키워드":"분 정 결\n퀵 머","도식":null,"정의":"문제를 작은 2개 문제로 분리,각각을 해결 후 결과를 모아원래의 문제를 해결하는 전략","내용":"분할 > 정복 > 결합\n퀵 소트 : pivot 기준으로 리스트를 좌우 불균등 분할 > 좌우\n각각 또 pivot 분할 > 리스트 크기 0이나 1까지 반복 > 합침\n머지 소트 : 리스트를 2개로 나눠, 각각 정렬 후 합침"},{"토픽":"퀵 소트\n(Quick Sort)","키워드":"피 로 하","도식":null,"정의":"pivot을 설정 후 이를 기준으로작으면 좌측, 크면 우측에 정렬,좌\/우측 각각 또 pivot 정렬하는분할정복 알고리즘","내용":"1번 data를 pivot으로 > 2번 data는 low, n번은 high로 둠 >\nlow는 왼>오, 피벗보다 큰 수 찾으면 멈춤, high는 오>왼,\n피벗보다 작은 수 찾으면 멈춤 > low랑 high 교환 > low랑\nhigh 엇갈릴 때까지 반복 > pivot과 high 교환 > 분할 반복"},{"토픽":"머지 소트\n(Merge Sort)","키워드":"일단 다 분할\nleft \/ right 비교","도식":null,"정의":"data를 최소단위로 분할한 뒤이를 합치면서 정렬하는분할정복 알고리즘","내용":"일단 리스트를 다 1개짜리로 분할 > 1, 2번 list 합치며 정렬\n> 3, 4번 합치며 정렬.. > 길이 2인 list끼리 합치며 정렬..\n> 처음 리스트 길이 될 때까지 반복\n* 왼\/오 배열에서 작은애를 먼저 넣고 넣은쪽 인덱스 증가"},{"토픽":"선택 정렬\n(Selection Sort)","키워드":"최 교","도식":null,"정의":"정렬이 안된 숫자들 중최소 or 최대값을 선택하여배열의 첫번째 요소와교환하는 알고리즘","내용":"정렬이 안된 숫자들 대상으로\n최소값(또는 최대값) 선택 > 배열의 첫번째 요소와 교환\n- 최소값 선택 : O(n) \/ 전체 복잡도 : O(n^2)"},{"토픽":"삽입 정렬\n(Insertion Sort)","키워드":"추 이 삽","도식":null,"정의":"첫번째 키는 정렬된거로 보고두번째 키부터 순서에 맞게삽입시켜 정렬하는 알고리즘","내용":"정렬할 값 추출 > 정렬된 숫자들 이동 > 해당 위치에 삽입\n- 이미 정렬되어 있었을 시 O(n-1) \/ 아니면 O(n^2)"},{"토픽":"동적 계획법\n(DP, DynamicProgramming)","키워드":"겹 최\n점 메 기\n바 반 탑 재","도식":null,"정의":"문제를 작게 나누어서,새로운 해 구할 때 그 전 과정의부분 해를 메모이제이션,재활용하는 알고리즘","내용":"조건 : 1) 겹치는 부분 문제, 2) 최적의 부분 구조\n점화식 도출 > 메모하기 > 기저 상태 파악\n- 기저 상태 : F(0), F(1) 이런 가장 기본이 되는 상태\n- Bottom up : 반복문 \/ Top Down : 재귀"},{"토픽":"동적 계획법 예시","키워드":"피보나치 = O(2^n)","도식":null,"정의":null,"내용":"피보나치 : F(n) = F(n-1) + F(n-2) 하면서 배열에 저장\nF(n) = F(n-1) + F(n-2) (if n > 1) \/ F(0) = 0, F(1) = 1\n외판원 : 3 > 4 > 5 랑 3 > 5 > 4 를, 3 > {4, 5}로 표현 가능\nf(n, {n-1, n-2 …}) = cost(n, n-1) + f(n-1, {n-2, n-3..}) "},{"토픽":"자료구조","키워드":"선 비 파","도식":null,"정의":"data의 모임으로,자료에 효율적 접근 및 수정을가능케 하는조직, 관리, 저장 구조","내용":"선형 \/ 비선형 \/ 파일구조(직접, 순차, 색인 순차)\n프로그램 : 자료구조 + 알고리즘(자료구조 내 내부함수)"},{"토픽":"선형 자료구조","키워드":"배 리 스 큐","도식":null,"정의":"1개 자료 뒤에 1개 자료가존재하는,자료들 간의 앞뒤 관계가 1:1의선형관계인 자료구조","내용":"배열, 리스트, 스택(한쪽만 뚫림, 포인터 하나),\n큐(FIFO, 양쪽 뚫림, 시작\/끝 두 개 포인터)"},{"토픽":"비선형 자료구조","키워드":"트 그","도식":null,"정의":"1개 자료 뒤에 여러개의 자료가존재할 수 있는,자료들 간 앞뒤 관계가 1:n이나n:m 인 자료구조","내용":"트리(부모\/자식, 방향성 존재), 그래프(방향\/무방향)"},{"토픽":"스택","키워드":"푸 팝 LIFO","도식":null,"정의":"push()와 pop() 함수를 통해가장 최근 삽입 데이터가 가장 먼저 나오는 LIFO 자료구조","내용":"push(), pop(), isFull(), isEmpty(), MAX_SIZE,\ntop(현재 포인터, 초기값 : -1), LIFO구조"},{"토픽":"큐","키워드":"인 데 프 리 FIFO","도식":null,"정의":"Enqueue(), Deque() 함수를 통해 선입선출(FIFO) 구조를 가지는 자료구조","내용":"Enqueue(), Dequeue(), Front, Rear"},{"토픽":"순환큐","키워드":"공백 전=후\n포화 전=후+1\n후 삽 전 인","도식":null,"정의":"선형큐의공간낭비\/크기 제약 해결 위해배열의 시작과 끝이 이어지게만든 큐","내용":"공백상태 : front = rear \/ 포화상태 : front = (rear + 1)%n\n실 용량보다 1 크게 만들어서 전단\/후단 사이 비움\n삽입 : rear + 1 한 후 삽입 \/ 인출 : front + 1 에서 인출\n* 후단 삽입 전단 인출"},{"토픽":"인접 행렬","키워드":"2차원배열","도식":null,"정의":"컴퓨터에서 그래프 구현 시,2차원 배열을 사용하여정점과 간선 표현하는 행렬","내용":"무방향 그래프는 대칭적 구조\n가중치 그래프는 0과 1이 아니라 가중치 값이 저장됨\n(가중치가 0인 것과 간선이 아예 없는 것이 구별돼야 함)\n구현 간단, but 간선 상관없이 늘 N*N 배열이라 메모리 낭비"},{"토픽":"비용인접리스트","키워드":"링크드리스트","도식":null,"정의":"컴퓨터에서 그래프 구현 시,연결 리스트를 써서각 정점에 인접한 정점을연결한 리스트","내용":"비연결 표현 위한 메모리 절감, but 엣지 많으면 메모리 낭비\n리스트 내 순서 상관 없음 \/ 노드별로 리스트 생김\n하나의 연결 표현 위해 정점 뿐 아니라 링크도 표현해야 됨\n첫 노드는 head, 마지막은 tail"},{"토픽":"방향성 비순환그래프\n(Directed Acyclic Graph)","키워드":"노순환","도식":null,"정의":"방향성이 존재하며 정점 V에서 시작해다시 V로 돌아가지 못하는,순환 없는 그래프","내용":"블체 1.0 : 비트코인 \/ 블체 2.0 : 스마트 계약 \/\n블체 3.0 : DAG(기존 블체 문제점 보완, 합의 과정에서 적용)\n- 블록 생성 없이 트랜이 다른 트랜 검증, 매우 빠름\n- 작업증명 없어서 수수료 X \/ 블록 대비 트랜 많은 병목도 X"},{"토픽":"그래프위상정렬","키워드":"DAG 한줄나열","도식":null,"정의":"사이클 없는 방향그래프(DAG)정점을 한줄로 나열하는 기법","내용":"기존 블록체인에서 제기된 문제점을 보완, 합의에 적용\n진입차수 정렬해서 0인 애가 출발점\n> 계속 진입차수 하나씩 빼가며 다음 0인 애를 넣어 정렬"},{"토픽":"B트리","키워드":"K+1 정 2 왼 중 리 K\/2","도식":null,"정의":"루트는 최소 두 개의 자식과1개 값을 가지며,루트와 리프 제외하고 최소한1\/2 이상 채워진 자료구조.","내용":"노드 자료 수가 K면 자식수는 K+1 \/ 자료는 정렬해 저장 \/\n루트는 자식 최소 2명 \/ 노드의 왼 sub는 작, 오른은 큼\n중복값 불가 \/ 리프는 다 동일 레벨 \/ 루트 외엔 키 최소 K\/2\nM차 B트리 = 최대 M개 자식 가질 수 있음 \/ 키는 M-1개"},{"토픽":"B트리삽입 알고리즘","키워드":null,"도식":null,"정의":null,"내용":"노드에 여유공간 있을 경우 : Leaf 노드에 삽입\n없을 경우 : 중간 값을 중심으로 2개로 분할 > 중간 key 값은\n분할된 노드의 부모에 삽입 > 이 때 부모 오버 나면 또 분할"},{"토픽":"B트리삭제 알고리즘","키워드":null,"도식":null,"정의":null,"내용":"삭제가 Leaf 노드 : 키 개수 m\/2 보다 작으면 재분배 or 합병\nLeaf 아님 : 후행 key와 자리 바꿔 리프로 이동시킨 후 삭제\n- 키 개수 m\/2 보다 적으면 Underflow 임 > 재분배 or 합병\n* 재분배: 키 多 형제한테 받기 \/ 합병 : 형제 키+부모 키"},{"토픽":"AVL 트리","키워드":"RR LL LR RL","도식":null,"정의":"이진트리 문제 해결 위해,각 노드의 왼 서브트리 높이와오른 서브트리 높이 차이가1 이하인 이진 탐색 트리","내용":"Balanced Factor : 왼쪽 \/ 오른쪽 서브트리의 높이 차이\n\n복잡도\n공간 : O(n)\n검색\/삽입\/삭제 : O(log n)\n\n로데이션 Case는 노드의 위치 기준으로 명명"},{"토픽":"Heap","키워드":"완 반 중","도식":null,"정의":"최댓값, 최솟값을 찾는 연산을빠르게 하기 위해 고안된완전이진트리 기반 자료구조","내용":"완전이진트리 : 두 자식만 갖는 이진트리 중 왼쪽부터 채워짐\n반 정렬 : 큰값은 상위 Lv\/작으면 하위 Lv에 있단 정도만 표시\n중복값 허용 : 힙 트리에서는 중복된 값 허용\n힙 재구성 : O(logN) \/ 평균 : O(NlogN) \/ 최악 : O(NlogN)"},{"토픽":"Max Heap","키워드":null,"도식":null,"정의":"부모 노드의 키값이 자식 노드 키 값보다항상 크거나 같은,내림차순 정렬 Heap","내용":"삽입 : Bottom up(힙의 마지막 노드에 삽입)\n삭제 : Top Down(루트부터 삭제)\n- 루트 삭제 > 힙의 마지막 노드 루트에 > 자식과 교환 반복"},{"토픽":"Min Heap","키워드":null,"도식":null,"정의":"부모 노드의 키값이 자식 노드 키 값보다항상 작거나 같은,오름차순 정렬 Heap","내용":"우선순위 큐는 힙으로 구현해야 가장 효율적 : O(logN)"},{"토픽":"트리 순회\n(Tree Traversal)","키워드":"print가 전\/중\/후 중 어디냐\nO(n)","도식":null,"정의":"트리 구조에서각각의 노드를 정확히 한번만방문하는 재귀적 알고리즘","내용":"전위 : Preorder(TreeNode *node) {\nif(node){ printf(“%d”, node->data);\nPreorder(node->left);\nPreorder(node->right);} }"},{"토픽":"트리 순회 특징","키워드":null,"도식":null,"정의":null,"내용":"전위순회 : 깊이우선순회(DFT, Depth First Traversal)\n중위순회 : 이진탐색에서 오름\/내림차순으로 값 가져올때 씀\n후위순회 : 트리 삭제에 주로 씀(부모 삭제 전 자식을 삭제)"},{"토픽":"그래프너비 우선 순회\n(BFS)","키워드":null,"도식":null,"정의":"한 정점을 시작으로거리가 가까운 점부터 먼 점의 순서로 정점들을 탐색하는 기법","내용":"큐에다 시작점부터 넣고, 목적지 나올 때까지 인접 점들\n삽입\/삭제 반복함"},{"토픽":"그래프깊이 우선 순회\n(DFS)","키워드":null,"도식":null,"정의":"한 정점을 시작으로인접한 정점 중 하나로 이동해탐색하는 기법","내용":null}]